; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\zip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_zip_copyright
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	__time64:PROC
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
_zip_copyright DB ' zip 1.01 Copyright 1998-2004 Gilles Vollant - http://'
	DB	'www.winimage.com/zLibDll', 00H
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getByte
_TEXT	SEGMENT
_c$ = -5						; size = 1
_err$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_zip64local_getByte PROC				; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00013	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	ff d2		 call	 edx
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 353  :     if (err==1)

  00025	83 7d fc 01	 cmp	 DWORD PTR _err$[ebp], 1
  00029	75 0f		 jne	 SHORT $LN4@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  0002b	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 356  :         return ZIP_OK;

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN5@zip64local

; 357  :     }
; 358  :     else

  00038	eb 23		 jmp	 SHORT $LN5@zip64local
$LN4@zip64local:

; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00048	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN2@zip64local

; 361  :             return ZIP_ERRNO;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 04		 jmp	 SHORT $LN5@zip64local

; 362  :         else

  00059	eb 02		 jmp	 SHORT $LN5@zip64local
$LN2@zip64local:

; 363  :             return ZIP_EOF;

  0005b	33 c0		 xor	 eax, eax
$LN5@zip64local:

; 364  :     }
; 365  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_zip64local_getByte ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64local_TmzDateToDosDate
_TEXT	SEGMENT
_year$ = -4						; size = 4
_ptm$ = 8						; size = 4
_zip64local_TmzDateToDosDate PROC			; COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 334  :     uLong year = (uLong)ptm->tm_year;

  00004	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00007	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000a	89 4d fc	 mov	 DWORD PTR _year$[ebp], ecx

; 335  :     if (year>=1980)

  0000d	81 7d fc bc 07
	00 00		 cmp	 DWORD PTR _year$[ebp], 1980 ; 000007bcH
  00014	72 0e		 jb	 SHORT $LN3@zip64local@2

; 336  :         year-=1980;

  00016	8b 55 fc	 mov	 edx, DWORD PTR _year$[ebp]
  00019	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  0001f	89 55 fc	 mov	 DWORD PTR _year$[ebp], edx
  00022	eb 0f		 jmp	 SHORT $LN2@zip64local@2
$LN3@zip64local@2:

; 337  :     else if (year>=80)

  00024	83 7d fc 50	 cmp	 DWORD PTR _year$[ebp], 80 ; 00000050H
  00028	72 09		 jb	 SHORT $LN2@zip64local@2

; 338  :         year-=80;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _year$[ebp]
  0002d	83 e8 50	 sub	 eax, 80			; 00000050H
  00030	89 45 fc	 mov	 DWORD PTR _year$[ebp], eax
$LN2@zip64local@2:

; 339  :     return
; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	83 c2 01	 add	 edx, 1
  0003c	c1 e2 05	 shl	 edx, 5
  0003f	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00042	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00045	03 c2		 add	 eax, edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _year$[ebp]
  0004a	c1 e1 09	 shl	 ecx, 9
  0004d	03 c1		 add	 eax, ecx
  0004f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00052	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00055	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00057	d1 e9		 shr	 ecx, 1
  00059	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  0005c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0005f	c1 e2 05	 shl	 edx, 5
  00062	03 ca		 add	 ecx, edx
  00064	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00067	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0006a	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  0006d	03 ca		 add	 ecx, edx
  0006f	0b c1		 or	 eax, ecx

; 342  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp
;	COMDAT _zip64local_putValue_inmemory
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_n$ = -4						; size = 4
_dest$ = 8						; size = 4
_x$ = 12						; size = 8
_nbByte$ = 20						; size = 4
_zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 313  :     unsigned char* buf=(unsigned char*)dest;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _buf$[ebp], eax

; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN7@zip64local@3
$LN6@zip64local@3:
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00018	83 c1 01	 add	 ecx, 1
  0001b	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN7@zip64local@3:
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00021	3b 55 14	 cmp	 edx, DWORD PTR _nbByte$[ebp]
  00024	7d 2b		 jge	 SHORT $LN5@zip64local@3

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  00026	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00029	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00031	83 e1 00	 and	 ecx, 0
  00034	8b 55 f8	 mov	 edx, DWORD PTR _buf$[ebp]
  00037	03 55 fc	 add	 edx, DWORD PTR _n$[ebp]
  0003a	88 02		 mov	 BYTE PTR [edx], al

; 317  :         x >>= 8;

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0003f	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp+4]
  00042	b1 08		 mov	 cl, 8
  00044	e8 00 00 00 00	 call	 __aullshr
  00049	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0004c	89 55 10	 mov	 DWORD PTR _x$[ebp+4], edx

; 318  :     }

  0004f	eb c4		 jmp	 SHORT $LN6@zip64local@3
$LN5@zip64local@3:

; 319  : 
; 320  :     if (x != 0)

  00051	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00054	0b 45 10	 or	 eax, DWORD PTR _x$[ebp+4]
  00057	74 25		 je	 SHORT $LN8@zip64local@3

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN3@zip64local@3
$LN2@zip64local@3:
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00065	83 c1 01	 add	 ecx, 1
  00068	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN3@zip64local@3:
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  0006e	3b 55 14	 cmp	 edx, DWORD PTR _nbByte$[ebp]
  00071	7d 0b		 jge	 SHORT $LN8@zip64local@3

; 323  :        {
; 324  :           buf[n] = 0xff;

  00073	8b 45 f8	 mov	 eax, DWORD PTR _buf$[ebp]
  00076	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00079	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH

; 325  :        }

  0007c	eb e4		 jmp	 SHORT $LN2@zip64local@3
$LN8@zip64local@3:

; 326  :     }
; 327  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_zip64local_putValue_inmemory ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64local_putValue
_TEXT	SEGMENT
_buf$ = -12						; size = 8
_n$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_x$ = 16						; size = 8
_nbByte$ = 24						; size = 4
_zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN9@zip64local@4
$LN8@zip64local@4:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@zip64local@4:
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0001b	3b 4d 18	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  0001e	7d 2b		 jge	 SHORT $LN7@zip64local@4

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00020	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp+4]
  0002c	83 e0 00	 and	 eax, 0
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00032	88 54 0d f4	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 294  :         x >>= 8;

  00036	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00039	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp+4]
  0003c	b1 08		 mov	 cl, 8
  0003e	e8 00 00 00 00	 call	 __aullshr
  00043	89 45 10	 mov	 DWORD PTR _x$[ebp], eax
  00046	89 55 14	 mov	 DWORD PTR _x$[ebp+4], edx

; 295  :     }

  00049	eb c4		 jmp	 SHORT $LN8@zip64local@4
$LN7@zip64local@4:

; 296  :     if (x != 0)

  0004b	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  0004e	0b 55 14	 or	 edx, DWORD PTR _x$[ebp+4]
  00051	74 24		 je	 SHORT $LN6@zip64local@4

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0005a	eb 09		 jmp	 SHORT $LN5@zip64local@4
$LN4@zip64local@4:
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN5@zip64local@4:
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00068	3b 4d 18	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  0006b	7d 0a		 jge	 SHORT $LN6@zip64local@4

; 299  :         {
; 300  :           buf[n] = 0xff;

  0006d	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00070	c6 44 15 f4 ff	 mov	 BYTE PTR _buf$[ebp+edx], 255 ; 000000ffH

; 301  :         }

  00075	eb e5		 jmp	 SHORT $LN4@zip64local@4
$LN6@zip64local@4:

; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00077	8b 45 18	 mov	 eax, DWORD PTR _nbByte$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d f4	 lea	 ecx, DWORD PTR _buf$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00082	52		 push	 edx
  00083	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00086	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00089	51		 push	 ecx
  0008a	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0008d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00090	ff d0		 call	 eax
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	3b 45 18	 cmp	 eax, DWORD PTR _nbByte$[ebp]
  00098	74 07		 je	 SHORT $LN2@zip64local@4

; 305  :         return ZIP_ERRNO;

  0009a	83 c8 ff	 or	 eax, -1
  0009d	eb 04		 jmp	 SHORT $LN10@zip64local@4

; 306  :     else

  0009f	eb 02		 jmp	 SHORT $LN10@zip64local@4
$LN2@zip64local@4:

; 307  :         return ZIP_OK;

  000a1	33 c0		 xor	 eax, eax
$LN10@zip64local@4:

; 308  : }

  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
_zip64local_putValue ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_init_linkedlist PROC					; COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  :     ll->first_block = ll->last_block = NULL;

  00003	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  00010	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 216  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_init_linkedlist ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _free_datablock
_TEXT	SEGMENT
_ldinext$79963 = -4					; size = 4
_ldi$ = 8						; size = 4
_free_datablock PROC					; COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN3@free_datab:

; 205  :     while (ldi!=NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00008	74 22		 je	 SHORT $LN4@free_datab

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _ldi$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	89 4d fc	 mov	 DWORD PTR _ldinext$79963[ebp], ecx

; 208  :         TRYFREE(ldi);

  00012	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00016	74 0c		 je	 SHORT $LN1@free_datab
  00018	8b 55 08	 mov	 edx, DWORD PTR _ldi$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 04	 add	 esp, 4
$LN1@free_datab:

; 209  :         ldi = ldinext;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ldinext$79963[ebp]
  00027	89 45 08	 mov	 DWORD PTR _ldi$[ebp], eax

; 210  :     }

  0002a	eb d8		 jmp	 SHORT $LN3@free_datab
$LN4@free_datab:

; 211  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_free_datablock ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_ldi$ = -4						; size = 4
_allocate_new_datablock PROC				; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)
; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00004	68 00 10 00 00	 push	 4096			; 00001000H
  00009	e8 00 00 00 00	 call	 _malloc
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ldi$[ebp], eax

; 194  :     if (ldi!=NULL)

  00014	83 7d fc 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00018	74 1d		 je	 SHORT $LN1@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00026	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  00030	c7 42 04 f0 0f
	00 00		 mov	 DWORD PTR [edx+4], 4080	; 00000ff0H
$LN1@allocate_n:

; 199  :     }
; 200  :     return ldi;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]

; 201  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_allocate_new_datablock ENDP
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _update_keys
_TEXT	SEGMENT
_keyshift$79894 = -4					; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_c$ = 16						; size = 4
_update_keys PROC					; COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	33 4d 10	 xor	 ecx, DWORD PTR _c$[ebp]
  0000c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00012	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	c1 e8 08	 shr	 eax, 8
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0001d	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00025	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00032	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00035	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0004d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00050	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00059	89 4d fc	 mov	 DWORD PTR _keyshift$79894[ebp], ecx

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0005c	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	33 45 fc	 xor	 eax, DWORD PTR _keyshift$79894[ebp]
  00065	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0006d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00070	c1 ea 08	 shr	 edx, 8
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00076	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00079	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0007c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 56   :     }
; 57   :     return c;

  0007f	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]

; 58   : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_update_keys ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_decrypt_byte PROC					; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00010	83 c9 02	 or	 ecx, 2
  00013	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00016	8b 55 fc	 mov	 edx, DWORD PTR _temp$[ebp]
  00019	83 f2 01	 xor	 edx, 1
  0001c	8b c2		 mov	 eax, edx
  0001e	0f af 45 fc	 imul	 eax, DWORD PTR _temp$[ebp]
  00022	c1 e8 08	 shr	 eax, 8
  00025	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_decrypt_byte ENDP
; Function compile flags: /Odtp
; File c:\msvs09\vc\include\time.inl
_TEXT	ENDS
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     return _time64(_Time);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __time64
  0000c	83 c4 04	 add	 esp, 4

; 136  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_time	ENDP
PUBLIC	_Write_GlobalComment
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\zip.c
;	COMDAT _Write_GlobalComment
_TEXT	SEGMENT
_size_global_comment$ = -8				; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_Write_GlobalComment PROC				; COMDAT

; 1865 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1866 :   int err = ZIP_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1867 :   uInt size_global_comment = 0;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _size_global_comment$[ebp], 0

; 1868 : 
; 1869 :   if(global_comment != NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00018	74 0f		 je	 SHORT $LN3@Write_Glob

; 1870 :     size_global_comment = (uInt)strlen(global_comment);

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _global_comment$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strlen
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _size_global_comment$[ebp], eax
$LN3@Write_Glob:

; 1871 : 
; 1872 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00029	6a 02		 push	 2
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _size_global_comment$[ebp]
  0002e	33 d2		 xor	 edx, edx
  00030	52		 push	 edx
  00031	51		 push	 ecx
  00032	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00035	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00038	51		 push	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _zip64local_putValue
  00042	83 c4 14	 add	 esp, 20			; 00000014H
  00045	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1873 : 
; 1874 :   if (err == ZIP_OK && size_global_comment > 0)

  00048	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004c	75 33		 jne	 SHORT $LN2@Write_Glob
  0004e	83 7d f8 00	 cmp	 DWORD PTR _size_global_comment$[ebp], 0
  00052	76 2d		 jbe	 SHORT $LN2@Write_Glob

; 1875 :   {
; 1876 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00054	8b 45 f8	 mov	 eax, DWORD PTR _size_global_comment$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _global_comment$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0005f	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00062	50		 push	 eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00066	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	ff d1		 call	 ecx
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	3b 45 f8	 cmp	 eax, DWORD PTR _size_global_comment$[ebp]
  00078	74 07		 je	 SHORT $LN2@Write_Glob

; 1877 :       err = ZIP_ERRNO;

  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN2@Write_Glob:

; 1878 :   }
; 1879 :   return err;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1880 : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_Write_GlobalComment ENDP
_TEXT	ENDS
PUBLIC	_Write_EndOfCentralDirectoryRecord
; Function compile flags: /Odtp
;	COMDAT _Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
tv219 = -24						; size = 4
tv199 = -20						; size = 4
_pos$81011 = -16					; size = 8
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1818 :   int err = ZIP_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1819 : 
; 1820 :   /*signature*/
; 1821 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0000d	6a 04		 push	 4
  0000f	6a 00		 push	 0
  00011	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00016	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00019	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 _zip64local_putValue
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of this disk */

  0002c	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00030	75 1c		 jne	 SHORT $LN12@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00032	6a 02		 push	 2
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0003b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _zip64local_putValue
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN12@Write_EndO:

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0004e	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00052	75 1c		 jne	 SHORT $LN11@Write_EndO

; 1827 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00054	6a 02		 push	 2
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0005d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00060	51		 push	 ecx
  00061	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 _zip64local_putValue
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN11@Write_EndO:

; 1828 : 
; 1829 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00070	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00074	75 67		 jne	 SHORT $LN10@Write_EndO

; 1830 :   {
; 1831 :     {
; 1832 :       if(zi->number_entry >= 0xFFFF)

  00076	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00079	89 45 ec	 mov	 DWORD PTR tv199[ebp], eax
  0007c	8b 4d ec	 mov	 ecx, DWORD PTR tv199[ebp]
  0007f	83 b9 fc 00 01
	00 00		 cmp	 DWORD PTR [ecx+65788], 0
  00086	77 0f		 ja	 SHORT $LN15@Write_EndO
  00088	8b 55 ec	 mov	 edx, DWORD PTR tv199[ebp]
  0008b	81 ba f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [edx+65784], 65535 ; 0000ffffH
  00095	72 21		 jb	 SHORT $LN9@Write_EndO
$LN15@Write_EndO:

; 1833 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00097	6a 02		 push	 2
  00099	6a 00		 push	 0
  0009b	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000a0	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000a3	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000a6	51		 push	 ecx
  000a7	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 _zip64local_putValue
  000b0	83 c4 14	 add	 esp, 20			; 00000014H
  000b3	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1834 :       else

  000b6	eb 25		 jmp	 SHORT $LN10@Write_EndO
$LN9@Write_EndO:

; 1835 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000b8	6a 02		 push	 2
  000ba	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000bd	8b 88 f8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65784]
  000c3	33 d2		 xor	 edx, edx
  000c5	52		 push	 edx
  000c6	51		 push	 ecx
  000c7	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000ca	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000cd	51		 push	 ecx
  000ce	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 _zip64local_putValue
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN10@Write_EndO:

; 1836 :     }
; 1837 :   }
; 1838 : 
; 1839 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000dd	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e1	75 67		 jne	 SHORT $LN7@Write_EndO

; 1840 :   {
; 1841 :     if(zi->number_entry >= 0xFFFF)

  000e3	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000e6	89 45 e8	 mov	 DWORD PTR tv219[ebp], eax
  000e9	8b 4d e8	 mov	 ecx, DWORD PTR tv219[ebp]
  000ec	83 b9 fc 00 01
	00 00		 cmp	 DWORD PTR [ecx+65788], 0
  000f3	77 0f		 ja	 SHORT $LN16@Write_EndO
  000f5	8b 55 e8	 mov	 edx, DWORD PTR tv219[ebp]
  000f8	81 ba f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [edx+65784], 65535 ; 0000ffffH
  00102	72 21		 jb	 SHORT $LN6@Write_EndO
$LN16@Write_EndO:

; 1842 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00104	6a 02		 push	 2
  00106	6a 00		 push	 0
  00108	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0010d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00110	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00113	51		 push	 ecx
  00114	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 _zip64local_putValue
  0011d	83 c4 14	 add	 esp, 20			; 00000014H
  00120	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1843 :     else

  00123	eb 25		 jmp	 SHORT $LN7@Write_EndO
$LN6@Write_EndO:

; 1844 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00125	6a 02		 push	 2
  00127	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0012a	8b 88 f8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65784]
  00130	33 d2		 xor	 edx, edx
  00132	52		 push	 edx
  00133	51		 push	 ecx
  00134	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00137	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0013a	51		 push	 ecx
  0013b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 _zip64local_putValue
  00144	83 c4 14	 add	 esp, 20			; 00000014H
  00147	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN7@Write_EndO:

; 1845 :   }
; 1846 : 
; 1847 :   if (err==ZIP_OK) /* size of the central directory */

  0014a	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0014e	75 1f		 jne	 SHORT $LN4@Write_EndO

; 1848 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  00150	6a 04		 push	 4
  00152	8b 45 0c	 mov	 eax, DWORD PTR _size_centraldir$[ebp]
  00155	33 c9		 xor	 ecx, ecx
  00157	51		 push	 ecx
  00158	50		 push	 eax
  00159	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0015c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 _zip64local_putValue
  00169	83 c4 14	 add	 esp, 20			; 00000014H
  0016c	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN4@Write_EndO:

; 1849 : 
; 1850 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  0016f	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00173	75 72		 jne	 SHORT $LN3@Write_EndO

; 1851 :   {
; 1852 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00175	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00178	8b 45 10	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  0017b	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  00181	8b 4d 14	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00184	1b 8a f4 00 01
	00		 sbb	 ecx, DWORD PTR [edx+65780]
  0018a	89 45 f0	 mov	 DWORD PTR _pos$81011[ebp], eax
  0018d	89 4d f4	 mov	 DWORD PTR _pos$81011[ebp+4], ecx

; 1853 :     if(pos >= 0xffffffff)

  00190	75 06		 jne	 SHORT $LN17@Write_EndO
  00192	83 7d f0 ff	 cmp	 DWORD PTR _pos$81011[ebp], -1
  00196	72 1e		 jb	 SHORT $LN2@Write_EndO
$LN17@Write_EndO:

; 1854 :     {
; 1855 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  00198	6a 04		 push	 4
  0019a	6a 00		 push	 0
  0019c	6a ff		 push	 -1
  0019e	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001a1	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001a4	50		 push	 eax
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a8	51		 push	 ecx
  001a9	e8 00 00 00 00	 call	 _zip64local_putValue
  001ae	83 c4 14	 add	 esp, 20			; 00000014H
  001b1	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1856 :     }
; 1857 :     else

  001b4	eb 31		 jmp	 SHORT $LN3@Write_EndO
$LN2@Write_EndO:

; 1858 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  001b6	6a 04		 push	 4
  001b8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001bb	8b 45 10	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  001be	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  001c4	8b 4d 14	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  001c7	1b 8a f4 00 01
	00		 sbb	 ecx, DWORD PTR [edx+65780]
  001cd	33 d2		 xor	 edx, edx
  001cf	52		 push	 edx
  001d0	50		 push	 eax
  001d1	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  001d4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001d7	51		 push	 ecx
  001d8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001db	52		 push	 edx
  001dc	e8 00 00 00 00	 call	 _zip64local_putValue
  001e1	83 c4 14	 add	 esp, 20			; 00000014H
  001e4	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_EndO:

; 1859 :   }
; 1860 : 
; 1861 :    return err;

  001e7	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1862 : }

  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
_Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
PUBLIC	_Write_Zip64EndOfCentralDirectoryRecord
; Function compile flags: /Odtp
;	COMDAT _Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
_pos$80982 = -16					; size = 8
_err$ = -8						; size = 4
_Zip64DataSize$ = -4					; size = 4
_zi$ = 8						; size = 4
_size_centraldir$ = 12					; size = 4
_centraldir_pos_inzip$ = 16				; size = 8
_Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1778 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1779 :   int err = ZIP_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1780 : 
; 1781 :   uLong Zip64DataSize = 44;

  0000d	c7 45 fc 2c 00
	00 00		 mov	 DWORD PTR _Zip64DataSize$[ebp], 44 ; 0000002cH

; 1782 : 
; 1783 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00014	6a 04		 push	 4
  00016	6a 00		 push	 0
  00018	68 50 4b 06 06	 push	 101075792		; 06064b50H
  0001d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00020	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00023	51		 push	 ecx
  00024	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 _zip64local_putValue
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  00033	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00037	75 1f		 jne	 SHORT $LN9@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00039	6a 08		 push	 8
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _Zip64DataSize$[ebp]
  0003e	33 c9		 xor	 ecx, ecx
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00045	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _zip64local_putValue
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN9@Write_Zip6:

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version made by */

  00058	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0005c	75 1c		 jne	 SHORT $LN8@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0005e	6a 02		 push	 2
  00060	6a 00		 push	 0
  00062	6a 2d		 push	 45			; 0000002dH
  00064	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00067	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0006a	50		 push	 eax
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _zip64local_putValue
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN8@Write_Zip6:

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* version needed */

  0007a	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0007e	75 1c		 jne	 SHORT $LN7@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00080	6a 02		 push	 2
  00082	6a 00		 push	 0
  00084	6a 2d		 push	 45			; 0000002dH
  00086	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00089	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _zip64local_putValue
  00096	83 c4 14	 add	 esp, 20			; 00000014H
  00099	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN7@Write_Zip6:

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of this disk */

  0009c	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a0	75 1c		 jne	 SHORT $LN6@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000a2	6a 04		 push	 4
  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000ab	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _zip64local_putValue
  000b8	83 c4 14	 add	 esp, 20			; 00000014H
  000bb	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN6@Write_Zip6:

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000be	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000c2	75 1c		 jne	 SHORT $LN5@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000c4	6a 04		 push	 4
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000cd	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000d0	50		 push	 eax
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 _zip64local_putValue
  000da	83 c4 14	 add	 esp, 20			; 00000014H
  000dd	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN5@Write_Zip6:

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000e0	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e4	75 29		 jne	 SHORT $LN4@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000e6	6a 08		 push	 8
  000e8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000eb	8b 82 fc 00 01
	00		 mov	 eax, DWORD PTR [edx+65788]
  000f1	50		 push	 eax
  000f2	8b 8a f8 00 01
	00		 mov	 ecx, DWORD PTR [edx+65784]
  000f8	51		 push	 ecx
  000f9	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000fc	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000ff	50		 push	 eax
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 _zip64local_putValue
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN4@Write_Zip6:

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  0010f	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00113	75 29		 jne	 SHORT $LN3@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00115	6a 08		 push	 8
  00117	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0011a	8b 82 fc 00 01
	00		 mov	 eax, DWORD PTR [edx+65788]
  00120	50		 push	 eax
  00121	8b 8a f8 00 01
	00		 mov	 ecx, DWORD PTR [edx+65784]
  00127	51		 push	 ecx
  00128	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0012b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0012e	50		 push	 eax
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 _zip64local_putValue
  00138	83 c4 14	 add	 esp, 20			; 00000014H
  0013b	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_Zip6:

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* size of the central directory */

  0013e	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00142	75 1f		 jne	 SHORT $LN2@Write_Zip6

; 1807 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  00144	6a 08		 push	 8
  00146	8b 55 0c	 mov	 edx, DWORD PTR _size_centraldir$[ebp]
  00149	33 c0		 xor	 eax, eax
  0014b	50		 push	 eax
  0014c	52		 push	 edx
  0014d	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00150	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00153	52		 push	 edx
  00154	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _zip64local_putValue
  0015d	83 c4 14	 add	 esp, 20			; 00000014H
  00160	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_Zip6:

; 1808 : 
; 1809 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  00163	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00167	75 3b		 jne	 SHORT $LN1@Write_Zip6

; 1810 :   {
; 1811 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00169	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016c	8b 55 10	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp]
  0016f	2b 91 f0 00 01
	00		 sub	 edx, DWORD PTR [ecx+65776]
  00175	8b 45 14	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00178	1b 81 f4 00 01
	00		 sbb	 eax, DWORD PTR [ecx+65780]
  0017e	89 55 f0	 mov	 DWORD PTR _pos$80982[ebp], edx
  00181	89 45 f4	 mov	 DWORD PTR _pos$80982[ebp+4], eax

; 1812 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  00184	6a 08		 push	 8
  00186	8b 4d f4	 mov	 ecx, DWORD PTR _pos$80982[ebp+4]
  00189	51		 push	 ecx
  0018a	8b 55 f0	 mov	 edx, DWORD PTR _pos$80982[ebp]
  0018d	52		 push	 edx
  0018e	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00191	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00194	51		 push	 ecx
  00195	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00198	52		 push	 edx
  00199	e8 00 00 00 00	 call	 _zip64local_putValue
  0019e	83 c4 14	 add	 esp, 20			; 00000014H
  001a1	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN1@Write_Zip6:

; 1813 :   }
; 1814 :   return err;

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]

; 1815 : }

  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
PUBLIC	_Write_Zip64EndOfCentralDirectoryLocator
; Function compile flags: /Odtp
;	COMDAT _Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
_pos$ = -16						; size = 8
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_zip64eocd_pos_inzip$ = 12				; size = 8
_Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1756 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1757 :   int err = ZIP_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1758 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _zip64eocd_pos_inzip$[ebp]
  00013	2b 88 f0 00 01
	00		 sub	 ecx, DWORD PTR [eax+65776]
  00019	8b 55 10	 mov	 edx, DWORD PTR _zip64eocd_pos_inzip$[ebp+4]
  0001c	1b 90 f4 00 01
	00		 sbb	 edx, DWORD PTR [eax+65780]
  00022	89 4d f0	 mov	 DWORD PTR _pos$[ebp], ecx
  00025	89 55 f4	 mov	 DWORD PTR _pos$[ebp+4], edx

; 1759 : 
; 1760 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  00028	6a 04		 push	 4
  0002a	6a 00		 push	 0
  0002c	68 50 4b 06 07	 push	 117853008		; 07064b50H
  00031	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00034	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _zip64local_putValue
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1761 : 
; 1762 :   /*num disks*/
; 1763 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00047	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0004b	75 1c		 jne	 SHORT $LN3@Write_Zip6@2

; 1764 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0004d	6a 04		 push	 4
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00056	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 _zip64local_putValue
  00063	83 c4 14	 add	 esp, 20			; 00000014H
  00066	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN3@Write_Zip6@2:

; 1765 : 
; 1766 :   /*relative offset*/
; 1767 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00069	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006d	75 20		 jne	 SHORT $LN2@Write_Zip6@2

; 1768 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  0006f	6a 08		 push	 8
  00071	8b 45 f4	 mov	 eax, DWORD PTR _pos$[ebp+4]
  00074	50		 push	 eax
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _pos$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0007c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 _zip64local_putValue
  00089	83 c4 14	 add	 esp, 20			; 00000014H
  0008c	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN2@Write_Zip6@2:

; 1769 : 
; 1770 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1771 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0008f	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00093	75 1c		 jne	 SHORT $LN1@Write_Zip6@2

; 1772 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  00095	6a 04		 push	 4
  00097	6a 00		 push	 0
  00099	6a 01		 push	 1
  0009b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0009e	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000a1	50		 push	 eax
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 _zip64local_putValue
  000ab	83 c4 14	 add	 esp, 20			; 00000014H
  000ae	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN1@Write_Zip6@2:

; 1773 : 
; 1774 :     return err;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1775 : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryLocator ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64FlushWriteBuffer
_TEXT	SEGMENT
_t$80816 = -12						; size = 4
_i$80815 = -8						; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_zip64FlushWriteBuffer PROC				; COMDAT

; 1364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1365 :     int err=ZIP_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1366 : 
; 1367 :     if (zi->ci.encrypt != 0)

  0000d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00010	83 b8 ac 00 01
	00 00		 cmp	 DWORD PTR [eax+65708], 0
  00017	0f 84 83 00 00
	00		 je	 $LN5@zip64Flush

; 1368 :     {
; 1369 : #ifndef NOCRYPT
; 1370 :         uInt i;
; 1371 :         int t;
; 1372 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$80815[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@zip64Flush
$LN3@zip64Flush:
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _i$80815[ebp]
  00029	83 c1 01	 add	 ecx, 1
  0002c	89 4d f8	 mov	 DWORD PTR _i$80815[ebp], ecx
$LN4@zip64Flush:
  0002f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00032	8b 45 f8	 mov	 eax, DWORD PTR _i$80815[ebp]
  00035	3b 42 7c	 cmp	 eax, DWORD PTR [edx+124]
  00038	73 66		 jae	 SHORT $LN5@zip64Flush

; 1373 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0003d	8b 91 dc 00 01
	00		 mov	 edx, DWORD PTR [ecx+65756]
  00043	52		 push	 edx
  00044	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00047	05 d0 00 01 00	 add	 eax, 65744		; 000100d0H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _decrypt_byte
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f4	 mov	 DWORD PTR _t$80816[ebp], eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0005b	03 4d f8	 add	 ecx, DWORD PTR _i$80815[ebp]
  0005e	0f b6 91 a4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+164]
  00065	52		 push	 edx
  00066	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00069	8b 88 dc 00 01
	00		 mov	 ecx, DWORD PTR [eax+65756]
  0006f	51		 push	 ecx
  00070	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00073	81 c2 d0 00 01
	00		 add	 edx, 65744		; 000100d0H
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _update_keys
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00085	03 45 f8	 add	 eax, DWORD PTR _i$80815[ebp]
  00088	0f b6 88 a4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+164]
  0008f	33 4d f4	 xor	 ecx, DWORD PTR _t$80816[ebp]
  00092	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00095	03 55 f8	 add	 edx, DWORD PTR _i$80815[ebp]
  00098	88 8a a4 00 00
	00		 mov	 BYTE PTR [edx+164], cl
  0009e	eb 86		 jmp	 SHORT $LN3@zip64Flush
$LN5@zip64Flush:

; 1374 : #endif
; 1375 :     }
; 1376 : 
; 1377 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  000a0	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000a3	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000a6	51		 push	 ecx
  000a7	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000aa	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  000b0	52		 push	 edx
  000b1	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000b4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000b7	51		 push	 ecx
  000b8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000bb	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000be	50		 push	 eax
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000c2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c5	ff d2		 call	 edx
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000cd	3b 41 7c	 cmp	 eax, DWORD PTR [ecx+124]
  000d0	74 07		 je	 SHORT $LN1@zip64Flush

; 1378 :       err = ZIP_ERRNO;

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN1@zip64Flush:

; 1379 : 
; 1380 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  000d9	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000dc	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  000df	33 c9		 xor	 ecx, ecx
  000e1	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000e4	03 82 c0 00 01
	00		 add	 eax, DWORD PTR [edx+65728]
  000ea	8b 92 c4 00 01
	00		 mov	 edx, DWORD PTR [edx+65732]
  000f0	13 d1		 adc	 edx, ecx
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000f5	89 81 c0 00 01
	00		 mov	 DWORD PTR [ecx+65728], eax
  000fb	89 91 c4 00 01
	00		 mov	 DWORD PTR [ecx+65732], edx

; 1381 : 
; 1382 : #ifdef HAVE_BZIP2
; 1383 :     if(zi->ci.method == Z_BZIP2ED)
; 1384 :     {
; 1385 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1386 :       zi->ci.bstream.total_in_lo32 = 0;
; 1387 :       zi->ci.bstream.total_in_hi32 = 0;
; 1388 :     }
; 1389 :     else
; 1390 : #endif
; 1391 :     {
; 1392 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;

  00101	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00104	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00107	33 c9		 xor	 ecx, ecx
  00109	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0010c	03 82 c8 00 01
	00		 add	 eax, DWORD PTR [edx+65736]
  00112	8b 92 cc 00 01
	00		 mov	 edx, DWORD PTR [edx+65740]
  00118	13 d1		 adc	 edx, ecx
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0011d	89 81 c8 00 01
	00		 mov	 DWORD PTR [ecx+65736], eax
  00123	89 91 cc 00 01
	00		 mov	 DWORD PTR [ecx+65740], edx

; 1393 :       zi->ci.stream.total_in = 0;

  00129	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0012c	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 1394 :     }
; 1395 : 
; 1396 : 
; 1397 :     zi->ci.pos_in_buffered_data = 0;

  00133	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00136	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 1398 : 
; 1399 :     return err;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 1400 : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
_zip64FlushWriteBuffer ENDP
_TEXT	ENDS
PUBLIC	_Write_LocalFileHeader
; Function compile flags: /Odtp
;	COMDAT _Write_LocalFileHeader
_TEXT	SEGMENT
_CompressedSize$80472 = -40				; size = 8
_HeaderID$80470 = -32					; size = 2
_DataSize$80471 = -28					; size = 2
_UncompressedSize$80473 = -24				; size = 8
_err$ = -12						; size = 4
_size_filename$ = -8					; size = 4
_size_extrafield$ = -4					; size = 4
_zi$ = 8						; size = 4
_filename$ = 12						; size = 4
_size_extrafield_local$ = 16				; size = 4
_extrafield_local$ = 20					; size = 4
_Write_LocalFileHeader PROC				; COMDAT

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _strlen
  0000f	83 c4 04	 add	 esp, 4
  00012	89 45 f8	 mov	 DWORD PTR _size_filename$[ebp], eax

; 963  :   uInt size_extrafield = size_extrafield_local;

  00015	8b 4d 10	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  00018	89 4d fc	 mov	 DWORD PTR _size_extrafield$[ebp], ecx

; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0001b	6a 04		 push	 4
  0001d	6a 00		 push	 0
  0001f	68 50 4b 03 04	 push	 67324752		; 04034b50H
  00024	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00027	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _zip64local_putValue
  00034	83 c4 14	 add	 esp, 20			; 00000014H
  00037	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 966  : 
; 967  :   if (err==ZIP_OK)

  0003a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0003e	75 46		 jne	 SHORT $LN21@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)

  00040	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00043	83 ba b0 00 01
	00 00		 cmp	 DWORD PTR [edx+65712], 0
  0004a	74 1e		 je	 SHORT $LN20@Write_Loca

; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  0004c	6a 02		 push	 2
  0004e	6a 00		 push	 0
  00050	6a 2d		 push	 45			; 0000002dH
  00052	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00055	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _zip64local_putValue
  00062	83 c4 14	 add	 esp, 20			; 00000014H
  00065	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 971  :     else

  00068	eb 1c		 jmp	 SHORT $LN21@Write_Loca
$LN20@Write_Loca:

; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  0006a	6a 02		 push	 2
  0006c	6a 00		 push	 0
  0006e	6a 14		 push	 20			; 00000014H
  00070	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00073	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _zip64local_putValue
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN21@Write_Loca:

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  00086	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008a	75 25		 jne	 SHORT $LN18@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  0008c	6a 02		 push	 2
  0008e	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00091	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00097	33 d2		 xor	 edx, edx
  00099	52		 push	 edx
  0009a	51		 push	 ecx
  0009b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0009e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000a1	51		 push	 ecx
  000a2	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _zip64local_putValue
  000ab	83 c4 14	 add	 esp, 20			; 00000014H
  000ae	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN18@Write_Loca:

; 977  : 
; 978  :   if (err==ZIP_OK)

  000b1	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000b5	75 25		 jne	 SHORT $LN17@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  000b7	6a 02		 push	 2
  000b9	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000bc	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  000c2	33 d2		 xor	 edx, edx
  000c4	52		 push	 edx
  000c5	51		 push	 ecx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000c9	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000cc	51		 push	 ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 _zip64local_putValue
  000d6	83 c4 14	 add	 esp, 20			; 00000014H
  000d9	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN17@Write_Loca:

; 980  : 
; 981  :   if (err==ZIP_OK)

  000dc	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e0	75 25		 jne	 SHORT $LN16@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000e2	6a 04		 push	 4
  000e4	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000e7	8b 88 a4 00 01
	00		 mov	 ecx, DWORD PTR [eax+65700]
  000ed	33 d2		 xor	 edx, edx
  000ef	52		 push	 edx
  000f0	51		 push	 ecx
  000f1	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000f4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000f7	51		 push	 ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 _zip64local_putValue
  00101	83 c4 14	 add	 esp, 20			; 00000014H
  00104	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN16@Write_Loca:

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  00107	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0010b	75 1c		 jne	 SHORT $LN15@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  0010d	6a 04		 push	 4
  0010f	6a 00		 push	 0
  00111	6a 00		 push	 0
  00113	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00116	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00119	51		 push	 ecx
  0011a	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 _zip64local_putValue
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN15@Write_Loca:

; 987  :   if (err==ZIP_OK)

  00129	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0012d	75 46		 jne	 SHORT $LN14@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)

  0012f	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00132	83 b8 b0 00 01
	00 00		 cmp	 DWORD PTR [eax+65712], 0
  00139	74 1e		 je	 SHORT $LN13@Write_Loca

; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  0013b	6a 04		 push	 4
  0013d	6a 00		 push	 0
  0013f	6a ff		 push	 -1
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00144	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00147	52		 push	 edx
  00148	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _zip64local_putValue
  00151	83 c4 14	 add	 esp, 20			; 00000014H
  00154	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 991  :     else

  00157	eb 1c		 jmp	 SHORT $LN14@Write_Loca
$LN13@Write_Loca:

; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  00159	6a 04		 push	 4
  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00162	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00165	52		 push	 edx
  00166	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 _zip64local_putValue
  0016f	83 c4 14	 add	 esp, 20			; 00000014H
  00172	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN14@Write_Loca:

; 993  :   }
; 994  :   if (err==ZIP_OK)

  00175	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00179	75 46		 jne	 SHORT $LN11@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)

  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0017e	83 b9 b0 00 01
	00 00		 cmp	 DWORD PTR [ecx+65712], 0
  00185	74 1e		 je	 SHORT $LN10@Write_Loca

; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  00187	6a 04		 push	 4
  00189	6a 00		 push	 0
  0018b	6a ff		 push	 -1
  0018d	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00190	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00193	50		 push	 eax
  00194	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 _zip64local_putValue
  0019d	83 c4 14	 add	 esp, 20			; 00000014H
  001a0	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 998  :     else

  001a3	eb 1c		 jmp	 SHORT $LN11@Write_Loca
$LN10@Write_Loca:

; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  001a5	6a 04		 push	 4
  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  001ae	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001b1	50		 push	 eax
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 _zip64local_putValue
  001bb	83 c4 14	 add	 esp, 20			; 00000014H
  001be	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN11@Write_Loca:

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  001c1	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  001c5	75 1f		 jne	 SHORT $LN8@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  001c7	6a 02		 push	 2
  001c9	8b 55 f8	 mov	 edx, DWORD PTR _size_filename$[ebp]
  001cc	33 c0		 xor	 eax, eax
  001ce	50		 push	 eax
  001cf	52		 push	 edx
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001d3	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001d6	52		 push	 edx
  001d7	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _zip64local_putValue
  001e0	83 c4 14	 add	 esp, 20			; 00000014H
  001e3	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN8@Write_Loca:

; 1004 : 
; 1005 :   if(zi->ci.zip64)

  001e6	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  001e9	83 b9 b0 00 01
	00 00		 cmp	 DWORD PTR [ecx+65712], 0
  001f0	74 09		 je	 SHORT $LN7@Write_Loca

; 1006 :   {
; 1007 :     size_extrafield += 20;

  001f2	8b 55 fc	 mov	 edx, DWORD PTR _size_extrafield$[ebp]
  001f5	83 c2 14	 add	 edx, 20			; 00000014H
  001f8	89 55 fc	 mov	 DWORD PTR _size_extrafield$[ebp], edx
$LN7@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  001fb	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  001ff	75 1f		 jne	 SHORT $LN6@Write_Loca

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  00201	6a 02		 push	 2
  00203	8b 45 fc	 mov	 eax, DWORD PTR _size_extrafield$[ebp]
  00206	33 c9		 xor	 ecx, ecx
  00208	51		 push	 ecx
  00209	50		 push	 eax
  0020a	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0020d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00210	50		 push	 eax
  00211	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00214	51		 push	 ecx
  00215	e8 00 00 00 00	 call	 _zip64local_putValue
  0021a	83 c4 14	 add	 esp, 20			; 00000014H
  0021d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN6@Write_Loca:

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  00220	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00224	75 33		 jne	 SHORT $LN5@Write_Loca
  00226	83 7d f8 00	 cmp	 DWORD PTR _size_filename$[ebp], 0
  0022a	76 2d		 jbe	 SHORT $LN5@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  0022c	8b 55 f8	 mov	 edx, DWORD PTR _size_filename$[ebp]
  0022f	52		 push	 edx
  00230	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00233	50		 push	 eax
  00234	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00237	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0023a	52		 push	 edx
  0023b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0023e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00241	51		 push	 ecx
  00242	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00245	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00248	ff d0		 call	 eax
  0024a	83 c4 10	 add	 esp, 16			; 00000010H
  0024d	3b 45 f8	 cmp	 eax, DWORD PTR _size_filename$[ebp]
  00250	74 07		 je	 SHORT $LN5@Write_Loca

; 1016 :       err = ZIP_ERRNO;

  00252	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@Write_Loca:

; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  00259	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0025d	75 33		 jne	 SHORT $LN3@Write_Loca
  0025f	83 7d 10 00	 cmp	 DWORD PTR _size_extrafield_local$[ebp], 0
  00263	76 2d		 jbe	 SHORT $LN3@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  00265	8b 4d 10	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  00268	51		 push	 ecx
  00269	8b 55 14	 mov	 edx, DWORD PTR _extrafield_local$[ebp]
  0026c	52		 push	 edx
  0026d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00270	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00273	51		 push	 ecx
  00274	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00277	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0027a	50		 push	 eax
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0027e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00281	ff d2		 call	 edx
  00283	83 c4 10	 add	 esp, 16			; 00000010H
  00286	3b 45 10	 cmp	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00289	74 07		 je	 SHORT $LN3@Write_Loca

; 1022 :       err = ZIP_ERRNO;

  0028b	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN3@Write_Loca:

; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  00292	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00296	0f 85 de 00 00
	00		 jne	 $LN1@Write_Loca
  0029c	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0029f	83 b8 b0 00 01
	00 00		 cmp	 DWORD PTR [eax+65712], 0
  002a6	0f 84 ce 00 00
	00		 je	 $LN1@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;

  002ac	b9 01 00 00 00	 mov	 ecx, 1
  002b1	66 89 4d e0	 mov	 WORD PTR _HeaderID$80470[ebp], cx

; 1030 :       short DataSize = 16;

  002b5	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002ba	66 89 55 e4	 mov	 WORD PTR _DataSize$80471[ebp], dx

; 1031 :       ZPOS64_T CompressedSize = 0;

  002be	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _CompressedSize$80472[ebp], 0
  002c5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _CompressedSize$80472[ebp+4], 0

; 1032 :       ZPOS64_T UncompressedSize = 0;

  002cc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _UncompressedSize$80473[ebp], 0
  002d3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _UncompressedSize$80473[ebp+4], 0

; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  002da	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  002dd	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002e0	51		 push	 ecx
  002e1	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  002e4	52		 push	 edx
  002e5	e8 00 00 00 00	 call	 _call_ztell64
  002ea	83 c4 08	 add	 esp, 8
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  002f0	89 81 b8 00 01
	00		 mov	 DWORD PTR [ecx+65720], eax
  002f6	89 91 bc 00 01
	00		 mov	 DWORD PTR [ecx+65724], edx

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  002fc	6a 02		 push	 2
  002fe	0f bf 45 e0	 movsx	 eax, WORD PTR _HeaderID$80470[ebp]
  00302	99		 cdq
  00303	52		 push	 edx
  00304	50		 push	 eax
  00305	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00308	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0030b	50		 push	 eax
  0030c	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0030f	51		 push	 ecx
  00310	e8 00 00 00 00	 call	 _zip64local_putValue
  00315	83 c4 14	 add	 esp, 20			; 00000014H
  00318	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  0031b	6a 02		 push	 2
  0031d	0f bf 45 e4	 movsx	 eax, WORD PTR _DataSize$80471[ebp]
  00321	99		 cdq
  00322	52		 push	 edx
  00323	50		 push	 eax
  00324	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00327	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0032a	50		 push	 eax
  0032b	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0032e	51		 push	 ecx
  0032f	e8 00 00 00 00	 call	 _zip64local_putValue
  00334	83 c4 14	 add	 esp, 20			; 00000014H
  00337	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  0033a	6a 08		 push	 8
  0033c	8b 55 ec	 mov	 edx, DWORD PTR _UncompressedSize$80473[ebp+4]
  0033f	52		 push	 edx
  00340	8b 45 e8	 mov	 eax, DWORD PTR _UncompressedSize$80473[ebp]
  00343	50		 push	 eax
  00344	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  00347	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0034a	52		 push	 edx
  0034b	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  0034e	50		 push	 eax
  0034f	e8 00 00 00 00	 call	 _zip64local_putValue
  00354	83 c4 14	 add	 esp, 20			; 00000014H
  00357	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  0035a	6a 08		 push	 8
  0035c	8b 4d dc	 mov	 ecx, DWORD PTR _CompressedSize$80472[ebp+4]
  0035f	51		 push	 ecx
  00360	8b 55 d8	 mov	 edx, DWORD PTR _CompressedSize$80472[ebp]
  00363	52		 push	 edx
  00364	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00367	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0036a	51		 push	 ecx
  0036b	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  0036e	52		 push	 edx
  0036f	e8 00 00 00 00	 call	 _zip64local_putValue
  00374	83 c4 14	 add	 esp, 20			; 00000014H
  00377	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN1@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  0037a	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 1045 : }

  0037d	8b e5		 mov	 esp, ebp
  0037f	5d		 pop	 ebp
  00380	c3		 ret	 0
_Write_LocalFileHeader ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64local_SearchCentralDir
_TEXT	SEGMENT
tv86 = -72						; size = 4
tv212 = -68						; size = 8
tv188 = -60						; size = 8
_uReadSize$80202 = -52					; size = 4
_uReadPos$80203 = -48					; size = 8
_i$80204 = -40						; size = 4
_buf$ = -36						; size = 4
_uMaxBack$ = -32					; size = 8
_uBackRead$ = -24					; size = 8
_uPosFound$ = -16					; size = 8
_uSizeFile$ = -8					; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 e0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  0000d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 486  :   ZPOS64_T uPosFound=0;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0
  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp+4], 0

; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00022	6a 02		 push	 2
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN14@zip64local@5

; 489  :     return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	33 d2		 xor	 edx, edx
  00040	e9 f1 01 00 00	 jmp	 $LN15@zip64local@5
$LN14@zip64local@5:

; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00045	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _call_ztell64
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f8	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  00058	89 55 fc	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  0005b	8b 4d e4	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  0005e	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00061	72 16		 jb	 SHORT $LN13@zip64local@5
  00063	77 08		 ja	 SHORT $LN19@zip64local@5
  00065	8b 55 e0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00068	3b 55 f8	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  0006b	76 0c		 jbe	 SHORT $LN13@zip64local@5
$LN19@zip64local@5:

; 495  :     uMaxBack = uSizeFile;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00070	89 45 e0	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	89 4d e4	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN13@zip64local@5:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00079	68 04 04 00 00	 push	 1028			; 00000404H
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	83 c4 04	 add	 esp, 4
  00086	89 45 dc	 mov	 DWORD PTR _buf$[ebp], eax

; 498  :   if (buf==NULL)

  00089	83 7d dc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0008d	75 09		 jne	 SHORT $LN12@zip64local@5

; 499  :     return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	33 d2		 xor	 edx, edx
  00093	e9 9e 01 00 00	 jmp	 $LN15@zip64local@5
$LN12@zip64local@5:

; 500  : 
; 501  :   uBackRead = 4;

  00098	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  0009f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN11@zip64local@5:

; 502  :   while (uBackRead<uMaxBack)

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000a9	3b 55 e4	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000ac	0f 87 6c 01 00
	00		 ja	 $LN10@zip64local@5
  000b2	72 0c		 jb	 SHORT $LN20@zip64local@5
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000b7	3b 45 e0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000ba	0f 83 5e 01 00
	00		 jae	 $LN10@zip64local@5
$LN20@zip64local@5:

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000c3	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000c9	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000cc	83 d2 00	 adc	 edx, 0
  000cf	89 4d c4	 mov	 DWORD PTR tv188[ebp], ecx
  000d2	89 55 c8	 mov	 DWORD PTR tv188[ebp+4], edx
  000d5	8b 45 c8	 mov	 eax, DWORD PTR tv188[ebp+4]
  000d8	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000db	72 18		 jb	 SHORT $LN9@zip64local@5
  000dd	77 08		 ja	 SHORT $LN21@zip64local@5
  000df	8b 4d c4	 mov	 ecx, DWORD PTR tv188[ebp]
  000e2	3b 4d e0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000e5	76 0e		 jbe	 SHORT $LN9@zip64local@5
$LN21@zip64local@5:

; 508  :       uBackRead = uMaxBack;

  000e7	8b 55 e0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000ea	89 55 e8	 mov	 DWORD PTR _uBackRead$[ebp], edx
  000ed	8b 45 e4	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f0	89 45 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], eax

; 509  :     else

  000f3	eb 15		 jmp	 SHORT $LN8@zip64local@5
$LN9@zip64local@5:

; 510  :       uBackRead+=BUFREADCOMMENT;

  000f5	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000f8	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00101	83 d2 00	 adc	 edx, 0
  00104	89 4d e8	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  00107	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN8@zip64local@5:

; 511  :     uReadPos = uSizeFile-uBackRead ;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  0010d	2b 45 e8	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00113	1b 4d ec	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  00116	89 45 d0	 mov	 DWORD PTR _uReadPos$80203[ebp], eax
  00119	89 4d d4	 mov	 DWORD PTR _uReadPos$80203[ebp+4], ecx

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  0011c	8b 55 f8	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0011f	2b 55 d0	 sub	 edx, DWORD PTR _uReadPos$80203[ebp]
  00122	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  00125	1b 45 d4	 sbb	 eax, DWORD PTR _uReadPos$80203[ebp+4]
  00128	89 55 bc	 mov	 DWORD PTR tv212[ebp], edx
  0012b	89 45 c0	 mov	 DWORD PTR tv212[ebp+4], eax
  0012e	83 7d c0 00	 cmp	 DWORD PTR tv212[ebp+4], 0
  00132	72 14		 jb	 SHORT $LN17@zip64local@5
  00134	77 09		 ja	 SHORT $LN22@zip64local@5
  00136	81 7d bc 04 04
	00 00		 cmp	 DWORD PTR tv212[ebp], 1028 ; 00000404H
  0013d	76 09		 jbe	 SHORT $LN17@zip64local@5
$LN22@zip64local@5:
  0013f	c7 45 b8 04 04
	00 00		 mov	 DWORD PTR tv86[ebp], 1028 ; 00000404H
  00146	eb 0f		 jmp	 SHORT $LN18@zip64local@5
$LN17@zip64local@5:
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  0014b	2b 4d d0	 sub	 ecx, DWORD PTR _uReadPos$80203[ebp]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp+4]
  00151	1b 55 d4	 sbb	 edx, DWORD PTR _uReadPos$80203[ebp+4]
  00154	89 4d b8	 mov	 DWORD PTR tv86[ebp], ecx
$LN18@zip64local@5:
  00157	8b 45 b8	 mov	 eax, DWORD PTR tv86[ebp]
  0015a	89 45 cc	 mov	 DWORD PTR _uReadSize$80202[ebp], eax

; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015d	6a 00		 push	 0
  0015f	8b 4d d4	 mov	 ecx, DWORD PTR _uReadPos$80203[ebp+4]
  00162	51		 push	 ecx
  00163	8b 55 d0	 mov	 edx, DWORD PTR _uReadPos$80203[ebp]
  00166	52		 push	 edx
  00167	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 _call_zseek64
  00174	83 c4 14	 add	 esp, 20			; 00000014H
  00177	85 c0		 test	 eax, eax
  00179	74 05		 je	 SHORT $LN7@zip64local@5

; 516  :       break;

  0017b	e9 9e 00 00 00	 jmp	 $LN10@zip64local@5
$LN7@zip64local@5:

; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00180	8b 55 cc	 mov	 edx, DWORD PTR _uReadSize$80202[ebp]
  00183	52		 push	 edx
  00184	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  00187	50		 push	 eax
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0018b	51		 push	 ecx
  0018c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0018f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00192	50		 push	 eax
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00196	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00199	ff d2		 call	 edx
  0019b	83 c4 10	 add	 esp, 16			; 00000010H
  0019e	3b 45 cc	 cmp	 eax, DWORD PTR _uReadSize$80202[ebp]
  001a1	74 02		 je	 SHORT $LN6@zip64local@5

; 519  :       break;

  001a3	eb 79		 jmp	 SHORT $LN10@zip64local@5
$LN6@zip64local@5:

; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  001a5	8b 45 cc	 mov	 eax, DWORD PTR _uReadSize$80202[ebp]
  001a8	83 e8 03	 sub	 eax, 3
  001ab	89 45 d8	 mov	 DWORD PTR _i$80204[ebp], eax
$LN5@zip64local@5:
  001ae	8b 4d d8	 mov	 ecx, DWORD PTR _i$80204[ebp]
  001b1	8b 55 d8	 mov	 edx, DWORD PTR _i$80204[ebp]
  001b4	83 ea 01	 sub	 edx, 1
  001b7	89 55 d8	 mov	 DWORD PTR _i$80204[ebp], edx
  001ba	85 c9		 test	 ecx, ecx
  001bc	7e 51		 jle	 SHORT $LN4@zip64local@5

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001be	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  001c1	03 45 d8	 add	 eax, DWORD PTR _i$80204[ebp]
  001c4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c7	83 f9 50	 cmp	 ecx, 80			; 00000050H
  001ca	75 41		 jne	 SHORT $LN3@zip64local@5
  001cc	8b 55 dc	 mov	 edx, DWORD PTR _buf$[ebp]
  001cf	03 55 d8	 add	 edx, DWORD PTR _i$80204[ebp]
  001d2	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001d6	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001d9	75 32		 jne	 SHORT $LN3@zip64local@5
  001db	8b 4d dc	 mov	 ecx, DWORD PTR _buf$[ebp]
  001de	03 4d d8	 add	 ecx, DWORD PTR _i$80204[ebp]
  001e1	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  001e5	83 fa 05	 cmp	 edx, 5
  001e8	75 23		 jne	 SHORT $LN3@zip64local@5
  001ea	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  001ed	03 45 d8	 add	 eax, DWORD PTR _i$80204[ebp]
  001f0	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  001f4	83 f9 06	 cmp	 ecx, 6
  001f7	75 14		 jne	 SHORT $LN3@zip64local@5

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  001f9	8b 45 d8	 mov	 eax, DWORD PTR _i$80204[ebp]
  001fc	99		 cdq
  001fd	03 45 d0	 add	 eax, DWORD PTR _uReadPos$80203[ebp]
  00200	8b 4d d4	 mov	 ecx, DWORD PTR _uReadPos$80203[ebp+4]
  00203	13 ca		 adc	 ecx, edx
  00205	89 45 f0	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00208	89 4d f4	 mov	 DWORD PTR _uPosFound$[ebp+4], ecx

; 526  :         break;

  0020b	eb 02		 jmp	 SHORT $LN4@zip64local@5
$LN3@zip64local@5:

; 527  :       }

  0020d	eb 9f		 jmp	 SHORT $LN5@zip64local@5
$LN4@zip64local@5:

; 528  : 
; 529  :       if (uPosFound!=0)

  0020f	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00212	0b 55 f4	 or	 edx, DWORD PTR _uPosFound$[ebp+4]
  00215	74 02		 je	 SHORT $LN2@zip64local@5

; 530  :         break;

  00217	eb 05		 jmp	 SHORT $LN10@zip64local@5
$LN2@zip64local@5:

; 531  :   }

  00219	e9 88 fe ff ff	 jmp	 $LN11@zip64local@5
$LN10@zip64local@5:

; 532  :   TRYFREE(buf);

  0021e	83 7d dc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00222	74 0c		 je	 SHORT $LN1@zip64local@5
  00224	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _free
  0022d	83 c4 04	 add	 esp, 4
$LN1@zip64local@5:

; 533  :   return uPosFound;

  00230	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00233	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
$LN15@zip64local@5:

; 534  : }

  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
_zip64local_SearchCentralDir ENDP
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp
;	COMDAT _zip64local_getLong64
_TEXT	SEGMENT
_err$ = -16						; size = 4
_i$ = -12						; size = 4
_x$ = -8						; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _zip64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 433  :   x = (ZPOS64_T)i;

  00024	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00027	99		 cdq
  00028	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0002b	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 434  : 
; 435  :   if (err==ZIP_OK)

  0002e	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00032	75 17		 jne	 SHORT $LN9@zip64local@6

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00034	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _zip64local_getByte
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN9@zip64local@6:

; 437  :   x += ((ZPOS64_T)i)<<8;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	99		 cdq
  0004f	b1 08		 mov	 cl, 8
  00051	e8 00 00 00 00	 call	 __allshl
  00056	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  0005c	13 ca		 adc	 ecx, edx
  0005e	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00061	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 438  : 
; 439  :   if (err==ZIP_OK)

  00064	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00068	75 17		 jne	 SHORT $LN8@zip64local@6

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0006a	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _zip64local_getByte
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN8@zip64local@6:

; 441  :   x += ((ZPOS64_T)i)<<16;

  00081	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00084	99		 cdq
  00085	b1 10		 mov	 cl, 16			; 00000010H
  00087	e8 00 00 00 00	 call	 __allshl
  0008c	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00092	13 ca		 adc	 ecx, edx
  00094	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00097	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 442  : 
; 443  :   if (err==ZIP_OK)

  0009a	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0009e	75 17		 jne	 SHORT $LN7@zip64local@6

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000a0	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  000a3	52		 push	 edx
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _zip64local_getByte
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN7@zip64local@6:

; 445  :   x += ((ZPOS64_T)i)<<24;

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	99		 cdq
  000bb	b1 18		 mov	 cl, 24			; 00000018H
  000bd	e8 00 00 00 00	 call	 __allshl
  000c2	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  000c8	13 ca		 adc	 ecx, edx
  000ca	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000cd	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 446  : 
; 447  :   if (err==ZIP_OK)

  000d0	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  000d4	75 17		 jne	 SHORT $LN6@zip64local@6

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d6	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  000d9	52		 push	 edx
  000da	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 _zip64local_getByte
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ea	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN6@zip64local@6:

; 449  :   x += ((ZPOS64_T)i)<<32;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000f0	99		 cdq
  000f1	b1 20		 mov	 cl, 32			; 00000020H
  000f3	e8 00 00 00 00	 call	 __allshl
  000f8	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  000fe	13 ca		 adc	 ecx, edx
  00100	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00103	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 450  : 
; 451  :   if (err==ZIP_OK)

  00106	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0010a	75 17		 jne	 SHORT $LN5@zip64local@6

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0010c	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  0010f	52		 push	 edx
  00110	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 _zip64local_getByte
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00120	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN5@zip64local@6:

; 453  :   x += ((ZPOS64_T)i)<<40;

  00123	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00126	99		 cdq
  00127	b1 28		 mov	 cl, 40			; 00000028H
  00129	e8 00 00 00 00	 call	 __allshl
  0012e	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00134	13 ca		 adc	 ecx, edx
  00136	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00139	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 454  : 
; 455  :   if (err==ZIP_OK)

  0013c	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00140	75 17		 jne	 SHORT $LN4@zip64local@6

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00142	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  00145	52		 push	 edx
  00146	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00149	50		 push	 eax
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 _zip64local_getByte
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
  00156	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zip64local@6:

; 457  :   x += ((ZPOS64_T)i)<<48;

  00159	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0015c	99		 cdq
  0015d	b1 30		 mov	 cl, 48			; 00000030H
  0015f	e8 00 00 00 00	 call	 __allshl
  00164	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  0016a	13 ca		 adc	 ecx, edx
  0016c	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0016f	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 458  : 
; 459  :   if (err==ZIP_OK)

  00172	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00176	75 17		 jne	 SHORT $LN3@zip64local@6

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00178	8d 55 f4	 lea	 edx, DWORD PTR _i$[ebp]
  0017b	52		 push	 edx
  0017c	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _zip64local_getByte
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018c	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zip64local@6:

; 461  :   x += ((ZPOS64_T)i)<<56;

  0018f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00192	99		 cdq
  00193	b1 38		 mov	 cl, 56			; 00000038H
  00195	e8 00 00 00 00	 call	 __allshl
  0019a	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  0019d	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  001a0	13 ca		 adc	 ecx, edx
  001a2	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  001a5	89 4d fc	 mov	 DWORD PTR _x$[ebp+4], ecx

; 462  : 
; 463  :   if (err==ZIP_OK)

  001a8	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001ac	75 10		 jne	 SHORT $LN2@zip64local@6

; 464  :     *pX = x;

  001ae	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  001b1	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001b4	89 02		 mov	 DWORD PTR [edx], eax
  001b6	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp+4]
  001b9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 465  :   else

  001bc	eb 10		 jmp	 SHORT $LN1@zip64local@6
$LN2@zip64local@6:

; 466  :     *pX = 0;

  001be	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  001c1	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  001c7	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN1@zip64local@6:

; 467  : 
; 468  :   return err;

  001ce	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]

; 469  : }

  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
_zip64local_getLong64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64local_getLong
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getLong PROC				; COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 397  :     uLong x ;
; 398  :     int i = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _zip64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 402  :     x = (uLong)i;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 403  : 
; 404  :     if (err==ZIP_OK)

  0002a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0002e	75 17		 jne	 SHORT $LN5@zip64local@7

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _zip64local_getByte
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN5@zip64local@7:

; 406  :     x += ((uLong)i)<<8;

  00047	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0004a	c1 e1 08	 shl	 ecx, 8
  0004d	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00050	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 407  : 
; 408  :     if (err==ZIP_OK)

  00053	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00057	75 17		 jne	 SHORT $LN4@zip64local@7

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00059	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _zip64local_getByte
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zip64local@7:

; 410  :     x += ((uLong)i)<<16;

  00070	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00073	c1 e2 10	 shl	 edx, 16			; 00000010H
  00076	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  00079	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 411  : 
; 412  :     if (err==ZIP_OK)

  0007c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00080	75 17		 jne	 SHORT $LN3@zip64local@7

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00082	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _zip64local_getByte
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zip64local@7:

; 414  :     x += ((uLong)i)<<24;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	c1 e0 18	 shl	 eax, 24			; 00000018H
  0009f	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000a2	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 415  : 
; 416  :     if (err==ZIP_OK)

  000a5	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a9	75 0a		 jne	 SHORT $LN2@zip64local@7

; 417  :         *pX = x;

  000ab	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000b1	89 11		 mov	 DWORD PTR [ecx], edx

; 418  :     else

  000b3	eb 09		 jmp	 SHORT $LN1@zip64local@7
$LN2@zip64local@7:

; 419  :         *pX = 0;

  000b5	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000b8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@zip64local@7:

; 420  :     return err;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 421  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_zip64local_getLong ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _zip64local_getShort
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 375  :     uLong x ;
; 376  :     int i = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _zip64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 380  :     x = (uLong)i;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  0002a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0002e	75 17		 jne	 SHORT $LN3@zip64local@8

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _zip64local_getByte
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zip64local@8:

; 384  :     x += ((uLong)i)<<8;

  00047	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0004a	c1 e1 08	 shl	 ecx, 8
  0004d	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00050	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 385  : 
; 386  :     if (err==ZIP_OK)

  00053	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@zip64local@8

; 387  :         *pX = x;

  00059	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0005f	89 02		 mov	 DWORD PTR [edx], eax

; 388  :     else

  00061	eb 09		 jmp	 SHORT $LN1@zip64local@8
$LN2@zip64local@8:

; 389  :         *pX = 0;

  00063	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  00066	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@zip64local@8:

; 390  :     return err;

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 391  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_zip64local_getShort ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
_i$79996 = -20						; size = 4
_to_copy$79997 = -16					; size = 4
_copy_this$79995 = -12					; size = 4
_ldi$ = -8						; size = 4
_from_copy$ = -4					; size = 4
_ll$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _ll$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN12@add_data_i

; 231  :         return ZIP_INTERNALERROR;

  0000c	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00011	e9 0f 01 00 00	 jmp	 $LN13@add_data_i
$LN12@add_data_i:

; 232  : 
; 233  :     if (ll->last_block == NULL)

  00016	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00019	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001d	75 28		 jne	 SHORT $LN11@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  0001f	e8 00 00 00 00	 call	 _allocate_new_datablock
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  00027	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002a	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  0002d	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	89 0a		 mov	 DWORD PTR [edx], ecx

; 236  :         if (ll->first_block == NULL)

  00035	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00038	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0003b	75 0a		 jne	 SHORT $LN11@add_data_i

; 237  :             return ZIP_INTERNALERROR;

  0003d	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00042	e9 de 00 00 00	 jmp	 $LN13@add_data_i
$LN11@add_data_i:

; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;

  00047	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	89 4d f8	 mov	 DWORD PTR _ldi$[ebp], ecx

; 241  :     from_copy = (unsigned char*)buf;

  00050	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00053	89 55 fc	 mov	 DWORD PTR _from_copy$[ebp], edx
$LN9@add_data_i:

; 242  : 
; 243  :     while (len>0)

  00056	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0005a	0f 86 c3 00 00
	00		 jbe	 $LN8@add_data_i

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  00060	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00063	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00067	75 2d		 jne	 SHORT $LN7@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  00069	e8 00 00 00 00	 call	 _allocate_new_datablock
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00071	89 01		 mov	 DWORD PTR [ecx], eax

; 252  :             if (ldi->next_datablock == NULL)

  00073	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  00076	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00079	75 0a		 jne	 SHORT $LN6@add_data_i

; 253  :                 return ZIP_INTERNALERROR;

  0007b	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00080	e9 a0 00 00 00	 jmp	 $LN13@add_data_i
$LN6@add_data_i:

; 254  :             ldi = ldi->next_datablock ;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d f8	 mov	 DWORD PTR _ldi$[ebp], ecx

; 255  :             ll->last_block = ldi;

  0008d	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00090	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00093	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  00096	8b 4d f8	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00099	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0009c	3b 55 10	 cmp	 edx, DWORD PTR _len$[ebp]
  0009f	73 0b		 jae	 SHORT $LN5@add_data_i

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a7	89 4d f4	 mov	 DWORD PTR _copy_this$79995[ebp], ecx

; 260  :         else

  000aa	eb 06		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 261  :             copy_this = (uInt)len;

  000ac	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  000af	89 55 f4	 mov	 DWORD PTR _copy_this$79995[ebp], edx
$LN4@add_data_i:

; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b8	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  000bb	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  000bf	89 45 f0	 mov	 DWORD PTR _to_copy$79997[ebp], eax

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  000c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$79996[ebp], 0
  000c9	eb 09		 jmp	 SHORT $LN3@add_data_i
$LN2@add_data_i:
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _i$79996[ebp]
  000ce	83 c1 01	 add	 ecx, 1
  000d1	89 4d ec	 mov	 DWORD PTR _i$79996[ebp], ecx
$LN3@add_data_i:
  000d4	8b 55 ec	 mov	 edx, DWORD PTR _i$79996[ebp]
  000d7	3b 55 f4	 cmp	 edx, DWORD PTR _copy_this$79995[ebp]
  000da	73 12		 jae	 SHORT $LN1@add_data_i

; 266  :             *(to_copy+i)=*(from_copy+i);

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _to_copy$79997[ebp]
  000df	03 45 ec	 add	 eax, DWORD PTR _i$79996[ebp]
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _from_copy$[ebp]
  000e5	03 4d ec	 add	 ecx, DWORD PTR _i$79996[ebp]
  000e8	8a 11		 mov	 dl, BYTE PTR [ecx]
  000ea	88 10		 mov	 BYTE PTR [eax], dl
  000ec	eb dd		 jmp	 SHORT $LN2@add_data_i
$LN1@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000f1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f4	03 4d f4	 add	 ecx, DWORD PTR _copy_this$79995[ebp]
  000f7	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  000fa	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 269  :         ldi->avail_in_this_block -= copy_this;

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00100	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00103	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$79995[ebp]
  00106	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  00109	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 270  :         from_copy += copy_this ;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _from_copy$[ebp]
  0010f	03 45 f4	 add	 eax, DWORD PTR _copy_this$79995[ebp]
  00112	89 45 fc	 mov	 DWORD PTR _from_copy$[ebp], eax

; 271  :         len -= copy_this;

  00115	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00118	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$79995[ebp]
  0011b	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 272  :     }

  0011e	e9 33 ff ff ff	 jmp	 $LN9@add_data_i
$LN8@add_data_i:

; 273  :     return ZIP_OK;

  00123	33 c0		 xor	 eax, eax
$LN13@add_data_i:

; 274  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
_add_data_in_datablock ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _free_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_free_linkedlist PROC					; COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  :     free_datablock(ll->first_block);

  00003	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	51		 push	 ecx
  00009	e8 00 00 00 00	 call	 _free_datablock
  0000e	83 c4 04	 add	 esp, 4

; 221  :     ll->first_block = ll->last_block = NULL;

  00011	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00014	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  0001b	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 222  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_free_linkedlist ENDP
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _init_keys
_TEXT	SEGMENT
_passwd$ = 8						; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_init_keys PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     *(pkeys+0) = 305419896L;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00006	c7 00 78 56 34
	12		 mov	 DWORD PTR [eax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0000f	c7 41 04 89 67
	45 23		 mov	 DWORD PTR [ecx+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00019	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [edx+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  00020	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00023	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00026	85 c9		 test	 ecx, ecx
  00028	74 22		 je	 SHORT $LN3@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  0002a	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  0002d	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00030	50		 push	 eax
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _update_keys
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :         passwd++;

  00041	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 08	 mov	 DWORD PTR _passwd$[ebp], eax

; 73   :     }

  0004a	eb d4		 jmp	 SHORT $LN2@init_keys
$LN3@init_keys:

; 74   : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_init_keys ENDP
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir64
_TEXT	SEGMENT
tv86 = -88						; size = 4
tv253 = -84						; size = 8
tv229 = -76						; size = 8
_uReadSize$80242 = -68					; size = 4
_uReadPos$80243 = -64					; size = 8
_i$80244 = -56						; size = 4
_buf$ = -52						; size = 4
_uMaxBack$ = -48					; size = 8
_uL$ = -36						; size = 4
_relativeOffset$ = -32					; size = 8
_uBackRead$ = -24					; size = 8
_uPosFound$ = -16					; size = 8
_uSizeFile$ = -8					; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 d0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  0000d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 548  :   ZPOS64_T uPosFound=0;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0
  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp+4], 0

; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00022	6a 02		 push	 2
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN25@zip64local@9

; 553  :     return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	33 d2		 xor	 edx, edx
  00040	e9 16 03 00 00	 jmp	 $LN26@zip64local@9
$LN25@zip64local@9:

; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00045	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _call_ztell64
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f8	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  00058	89 55 fc	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  0005e	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00061	72 16		 jb	 SHORT $LN24@zip64local@9
  00063	77 08		 ja	 SHORT $LN30@zip64local@9
  00065	8b 55 d0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00068	3b 55 f8	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  0006b	76 0c		 jbe	 SHORT $LN24@zip64local@9
$LN30@zip64local@9:

; 558  :     uMaxBack = uSizeFile;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00070	89 45 d0	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	89 4d d4	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN24@zip64local@9:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00079	68 04 04 00 00	 push	 1028			; 00000404H
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	83 c4 04	 add	 esp, 4
  00086	89 45 cc	 mov	 DWORD PTR _buf$[ebp], eax

; 561  :   if (buf==NULL)

  00089	83 7d cc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0008d	75 09		 jne	 SHORT $LN23@zip64local@9

; 562  :     return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	33 d2		 xor	 edx, edx
  00093	e9 c3 02 00 00	 jmp	 $LN26@zip64local@9
$LN23@zip64local@9:

; 563  : 
; 564  :   uBackRead = 4;

  00098	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  0009f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN22@zip64local@9:

; 565  :   while (uBackRead<uMaxBack)

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000a9	3b 55 d4	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000ac	0f 87 6c 01 00
	00		 ja	 $LN21@zip64local@9
  000b2	72 0c		 jb	 SHORT $LN31@zip64local@9
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000b7	3b 45 d0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000ba	0f 83 5e 01 00
	00		 jae	 $LN21@zip64local@9
$LN31@zip64local@9:

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000c3	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000c9	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000cc	83 d2 00	 adc	 edx, 0
  000cf	89 4d b4	 mov	 DWORD PTR tv229[ebp], ecx
  000d2	89 55 b8	 mov	 DWORD PTR tv229[ebp+4], edx
  000d5	8b 45 b8	 mov	 eax, DWORD PTR tv229[ebp+4]
  000d8	3b 45 d4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000db	72 18		 jb	 SHORT $LN20@zip64local@9
  000dd	77 08		 ja	 SHORT $LN32@zip64local@9
  000df	8b 4d b4	 mov	 ecx, DWORD PTR tv229[ebp]
  000e2	3b 4d d0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000e5	76 0e		 jbe	 SHORT $LN20@zip64local@9
$LN32@zip64local@9:

; 571  :       uBackRead = uMaxBack;

  000e7	8b 55 d0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000ea	89 55 e8	 mov	 DWORD PTR _uBackRead$[ebp], edx
  000ed	8b 45 d4	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f0	89 45 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], eax

; 572  :     else

  000f3	eb 15		 jmp	 SHORT $LN19@zip64local@9
$LN20@zip64local@9:

; 573  :       uBackRead+=BUFREADCOMMENT;

  000f5	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000f8	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00101	83 d2 00	 adc	 edx, 0
  00104	89 4d e8	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  00107	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN19@zip64local@9:

; 574  :     uReadPos = uSizeFile-uBackRead ;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  0010d	2b 45 e8	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00113	1b 4d ec	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  00116	89 45 c0	 mov	 DWORD PTR _uReadPos$80243[ebp], eax
  00119	89 4d c4	 mov	 DWORD PTR _uReadPos$80243[ebp+4], ecx

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  0011c	8b 55 f8	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0011f	2b 55 c0	 sub	 edx, DWORD PTR _uReadPos$80243[ebp]
  00122	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  00125	1b 45 c4	 sbb	 eax, DWORD PTR _uReadPos$80243[ebp+4]
  00128	89 55 ac	 mov	 DWORD PTR tv253[ebp], edx
  0012b	89 45 b0	 mov	 DWORD PTR tv253[ebp+4], eax
  0012e	83 7d b0 00	 cmp	 DWORD PTR tv253[ebp+4], 0
  00132	72 14		 jb	 SHORT $LN28@zip64local@9
  00134	77 09		 ja	 SHORT $LN33@zip64local@9
  00136	81 7d ac 04 04
	00 00		 cmp	 DWORD PTR tv253[ebp], 1028 ; 00000404H
  0013d	76 09		 jbe	 SHORT $LN28@zip64local@9
$LN33@zip64local@9:
  0013f	c7 45 a8 04 04
	00 00		 mov	 DWORD PTR tv86[ebp], 1028 ; 00000404H
  00146	eb 0f		 jmp	 SHORT $LN29@zip64local@9
$LN28@zip64local@9:
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  0014b	2b 4d c0	 sub	 ecx, DWORD PTR _uReadPos$80243[ebp]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp+4]
  00151	1b 55 c4	 sbb	 edx, DWORD PTR _uReadPos$80243[ebp+4]
  00154	89 4d a8	 mov	 DWORD PTR tv86[ebp], ecx
$LN29@zip64local@9:
  00157	8b 45 a8	 mov	 eax, DWORD PTR tv86[ebp]
  0015a	89 45 bc	 mov	 DWORD PTR _uReadSize$80242[ebp], eax

; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015d	6a 00		 push	 0
  0015f	8b 4d c4	 mov	 ecx, DWORD PTR _uReadPos$80243[ebp+4]
  00162	51		 push	 ecx
  00163	8b 55 c0	 mov	 edx, DWORD PTR _uReadPos$80243[ebp]
  00166	52		 push	 edx
  00167	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 _call_zseek64
  00174	83 c4 14	 add	 esp, 20			; 00000014H
  00177	85 c0		 test	 eax, eax
  00179	74 05		 je	 SHORT $LN18@zip64local@9

; 579  :       break;

  0017b	e9 9e 00 00 00	 jmp	 $LN21@zip64local@9
$LN18@zip64local@9:

; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00180	8b 55 bc	 mov	 edx, DWORD PTR _uReadSize$80242[ebp]
  00183	52		 push	 edx
  00184	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  00187	50		 push	 eax
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0018b	51		 push	 ecx
  0018c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0018f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00192	50		 push	 eax
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00196	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00199	ff d2		 call	 edx
  0019b	83 c4 10	 add	 esp, 16			; 00000010H
  0019e	3b 45 bc	 cmp	 eax, DWORD PTR _uReadSize$80242[ebp]
  001a1	74 02		 je	 SHORT $LN17@zip64local@9

; 582  :       break;

  001a3	eb 79		 jmp	 SHORT $LN21@zip64local@9
$LN17@zip64local@9:

; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  001a5	8b 45 bc	 mov	 eax, DWORD PTR _uReadSize$80242[ebp]
  001a8	83 e8 03	 sub	 eax, 3
  001ab	89 45 c8	 mov	 DWORD PTR _i$80244[ebp], eax
$LN16@zip64local@9:
  001ae	8b 4d c8	 mov	 ecx, DWORD PTR _i$80244[ebp]
  001b1	8b 55 c8	 mov	 edx, DWORD PTR _i$80244[ebp]
  001b4	83 ea 01	 sub	 edx, 1
  001b7	89 55 c8	 mov	 DWORD PTR _i$80244[ebp], edx
  001ba	85 c9		 test	 ecx, ecx
  001bc	7e 51		 jle	 SHORT $LN15@zip64local@9

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  001be	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  001c1	03 45 c8	 add	 eax, DWORD PTR _i$80244[ebp]
  001c4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c7	83 f9 50	 cmp	 ecx, 80			; 00000050H
  001ca	75 41		 jne	 SHORT $LN14@zip64local@9
  001cc	8b 55 cc	 mov	 edx, DWORD PTR _buf$[ebp]
  001cf	03 55 c8	 add	 edx, DWORD PTR _i$80244[ebp]
  001d2	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001d6	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001d9	75 32		 jne	 SHORT $LN14@zip64local@9
  001db	8b 4d cc	 mov	 ecx, DWORD PTR _buf$[ebp]
  001de	03 4d c8	 add	 ecx, DWORD PTR _i$80244[ebp]
  001e1	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  001e5	83 fa 06	 cmp	 edx, 6
  001e8	75 23		 jne	 SHORT $LN14@zip64local@9
  001ea	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  001ed	03 45 c8	 add	 eax, DWORD PTR _i$80244[ebp]
  001f0	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  001f4	83 f9 07	 cmp	 ecx, 7
  001f7	75 14		 jne	 SHORT $LN14@zip64local@9

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  001f9	8b 45 c8	 mov	 eax, DWORD PTR _i$80244[ebp]
  001fc	99		 cdq
  001fd	03 45 c0	 add	 eax, DWORD PTR _uReadPos$80243[ebp]
  00200	8b 4d c4	 mov	 ecx, DWORD PTR _uReadPos$80243[ebp+4]
  00203	13 ca		 adc	 ecx, edx
  00205	89 45 f0	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00208	89 4d f4	 mov	 DWORD PTR _uPosFound$[ebp+4], ecx

; 590  :         break;

  0020b	eb 02		 jmp	 SHORT $LN15@zip64local@9
$LN14@zip64local@9:

; 591  :       }
; 592  :     }

  0020d	eb 9f		 jmp	 SHORT $LN16@zip64local@9
$LN15@zip64local@9:

; 593  : 
; 594  :       if (uPosFound!=0)

  0020f	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00212	0b 55 f4	 or	 edx, DWORD PTR _uPosFound$[ebp+4]
  00215	74 02		 je	 SHORT $LN13@zip64local@9

; 595  :         break;

  00217	eb 05		 jmp	 SHORT $LN21@zip64local@9
$LN13@zip64local@9:

; 596  :   }

  00219	e9 88 fe ff ff	 jmp	 $LN22@zip64local@9
$LN21@zip64local@9:

; 597  : 
; 598  :   TRYFREE(buf);

  0021e	83 7d cc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00222	74 0c		 je	 SHORT $LN12@zip64local@9
  00224	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _free
  0022d	83 c4 04	 add	 esp, 4
$LN12@zip64local@9:

; 599  :   if (uPosFound == 0)

  00230	8b 4d f0	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  00233	0b 4d f4	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  00236	75 09		 jne	 SHORT $LN11@zip64local@9

; 600  :     return 0;

  00238	33 c0		 xor	 eax, eax
  0023a	33 d2		 xor	 edx, edx
  0023c	e9 1a 01 00 00	 jmp	 $LN26@zip64local@9
$LN11@zip64local@9:

; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00241	6a 00		 push	 0
  00243	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  00246	52		 push	 edx
  00247	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0024a	50		 push	 eax
  0024b	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0024e	51		 push	 ecx
  0024f	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00252	52		 push	 edx
  00253	e8 00 00 00 00	 call	 _call_zseek64
  00258	83 c4 14	 add	 esp, 20			; 00000014H
  0025b	85 c0		 test	 eax, eax
  0025d	74 09		 je	 SHORT $LN10@zip64local@9

; 604  :     return 0;

  0025f	33 c0		 xor	 eax, eax
  00261	33 d2		 xor	 edx, edx
  00263	e9 f3 00 00 00	 jmp	 $LN26@zip64local@9
$LN10@zip64local@9:

; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00268	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  0026b	50		 push	 eax
  0026c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0026f	51		 push	 ecx
  00270	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 _zip64local_getLong
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	85 c0		 test	 eax, eax
  0027e	74 09		 je	 SHORT $LN9@zip64local@9

; 608  :     return 0;

  00280	33 c0		 xor	 eax, eax
  00282	33 d2		 xor	 edx, edx
  00284	e9 d2 00 00 00	 jmp	 $LN26@zip64local@9
$LN9@zip64local@9:

; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00289	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  0028c	50		 push	 eax
  0028d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00290	51		 push	 ecx
  00291	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 _zip64local_getLong
  0029a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029d	85 c0		 test	 eax, eax
  0029f	74 09		 je	 SHORT $LN8@zip64local@9

; 612  :     return 0;

  002a1	33 c0		 xor	 eax, eax
  002a3	33 d2		 xor	 edx, edx
  002a5	e9 b1 00 00 00	 jmp	 $LN26@zip64local@9
$LN8@zip64local@9:

; 613  :   if (uL != 0)

  002aa	83 7d dc 00	 cmp	 DWORD PTR _uL$[ebp], 0
  002ae	74 09		 je	 SHORT $LN7@zip64local@9

; 614  :     return 0;

  002b0	33 c0		 xor	 eax, eax
  002b2	33 d2		 xor	 edx, edx
  002b4	e9 a2 00 00 00	 jmp	 $LN26@zip64local@9
$LN7@zip64local@9:

; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  002b9	8d 45 e0	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  002c0	51		 push	 ecx
  002c1	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002c4	52		 push	 edx
  002c5	e8 00 00 00 00	 call	 _zip64local_getLong64
  002ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  002cd	85 c0		 test	 eax, eax
  002cf	74 09		 je	 SHORT $LN6@zip64local@9

; 618  :     return 0;

  002d1	33 c0		 xor	 eax, eax
  002d3	33 d2		 xor	 edx, edx
  002d5	e9 81 00 00 00	 jmp	 $LN26@zip64local@9
$LN6@zip64local@9:

; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  002da	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  002dd	50		 push	 eax
  002de	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  002e1	51		 push	 ecx
  002e2	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002e5	52		 push	 edx
  002e6	e8 00 00 00 00	 call	 _zip64local_getLong
  002eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ee	85 c0		 test	 eax, eax
  002f0	74 06		 je	 SHORT $LN5@zip64local@9

; 622  :     return 0;

  002f2	33 c0		 xor	 eax, eax
  002f4	33 d2		 xor	 edx, edx
  002f6	eb 63		 jmp	 SHORT $LN26@zip64local@9
$LN5@zip64local@9:

; 623  :   if (uL != 1)

  002f8	83 7d dc 01	 cmp	 DWORD PTR _uL$[ebp], 1
  002fc	74 06		 je	 SHORT $LN4@zip64local@9

; 624  :     return 0;

  002fe	33 c0		 xor	 eax, eax
  00300	33 d2		 xor	 edx, edx
  00302	eb 57		 jmp	 SHORT $LN26@zip64local@9
$LN4@zip64local@9:

; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00304	6a 00		 push	 0
  00306	8b 45 e4	 mov	 eax, DWORD PTR _relativeOffset$[ebp+4]
  00309	50		 push	 eax
  0030a	8b 4d e0	 mov	 ecx, DWORD PTR _relativeOffset$[ebp]
  0030d	51		 push	 ecx
  0030e	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00311	52		 push	 edx
  00312	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 _call_zseek64
  0031b	83 c4 14	 add	 esp, 20			; 00000014H
  0031e	85 c0		 test	 eax, eax
  00320	74 06		 je	 SHORT $LN3@zip64local@9

; 628  :     return 0;

  00322	33 c0		 xor	 eax, eax
  00324	33 d2		 xor	 edx, edx
  00326	eb 33		 jmp	 SHORT $LN26@zip64local@9
$LN3@zip64local@9:

; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00328	8d 4d dc	 lea	 ecx, DWORD PTR _uL$[ebp]
  0032b	51		 push	 ecx
  0032c	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0032f	52		 push	 edx
  00330	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 _zip64local_getLong
  00339	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033c	85 c0		 test	 eax, eax
  0033e	74 06		 je	 SHORT $LN2@zip64local@9

; 632  :     return 0;

  00340	33 c0		 xor	 eax, eax
  00342	33 d2		 xor	 edx, edx
  00344	eb 15		 jmp	 SHORT $LN26@zip64local@9
$LN2@zip64local@9:

; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  00346	81 7d dc 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  0034d	74 06		 je	 SHORT $LN1@zip64local@9

; 635  :     return 0;

  0034f	33 c0		 xor	 eax, eax
  00351	33 d2		 xor	 edx, edx
  00353	eb 06		 jmp	 SHORT $LN26@zip64local@9
$LN1@zip64local@9:

; 636  : 
; 637  :   return relativeOffset;

  00355	8b 45 e0	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00358	8b 55 e4	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
$LN26@zip64local@9:

; 638  : }

  0035b	8b e5		 mov	 esp, ebp
  0035d	5d		 pop	 ebp
  0035e	c3		 ret	 0
_zip64local_SearchCentralDir64 ENDP
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -24						; size = 10
_t$ = -12						; size = 4
_c$ = -8						; size = 4
_n$ = -4						; size = 4
_passwd$ = 8						; size = 4
_buf$ = 12						; size = 4
_bufSize$ = 16						; size = 4
_pkeys$ = 20						; size = 4
_pcrc_32_tab$ = 24					; size = 4
_crcForCrypting$ = 28					; size = 4
_crypthead PROC						; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)

  00006	83 7d 10 0c	 cmp	 DWORD PTR _bufSize$[ebp], 12 ; 0000000cH
  0000a	7d 07		 jge	 SHORT $LN8@crypthead

; 104  :       return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	e9 b1 01 00 00	 jmp	 $LN9@crypthead
$LN8@crypthead:

; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00020	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  00027	75 1b		 jne	 SHORT $LN7@crypthead

; 111  :     {
; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 __time64
  00030	83 c4 04	 add	 esp, 4
  00033	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  00038	83 f2 00	 xor	 edx, 0
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _srand
  00041	83 c4 04	 add	 esp, 4
$LN7@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00044	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _init_keys
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0005f	eb 09		 jmp	 SHORT $LN6@crypthead
$LN5@crypthead:
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00064	83 c1 01	 add	 ecx, 1
  00067	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN6@crypthead:
  0006a	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  0006e	7d 46		 jge	 SHORT $LN4@crypthead

; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00070	e8 00 00 00 00	 call	 _rand
  00075	c1 f8 07	 sar	 eax, 7
  00078	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0007d	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00080	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00083	52		 push	 edx
  00084	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _decrypt_byte
  0008d	83 c4 08	 add	 esp, 8
  00090	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00096	51		 push	 ecx
  00097	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0009a	52		 push	 edx
  0009b	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _update_keys
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _t$[ebp]
  000aa	33 4d f8	 xor	 ecx, DWORD PTR _c$[ebp]
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  000b0	88 4c 15 e8	 mov	 BYTE PTR _header$[ebp+edx], cl

; 119  :     }

  000b4	eb ab		 jmp	 SHORT $LN5@crypthead
$LN4@crypthead:

; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  000b6	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _init_keys
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $LN3@crypthead
$LN2@crypthead:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN3@crypthead:
  000dc	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  000e0	7d 41		 jge	 SHORT $LN1@crypthead

; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000e2	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _decrypt_byte
  000ef	83 c4 08	 add	 esp, 8
  000f2	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000f8	0f b6 4c 05 e8	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  000fd	51		 push	 ecx
  000fe	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00101	52		 push	 edx
  00102	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _update_keys
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00111	0f b6 54 0d e8	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  00116	33 55 f4	 xor	 edx, DWORD PTR _t$[ebp]
  00119	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0011c	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  0011f	88 10		 mov	 BYTE PTR [eax], dl

; 125  :     }

  00121	eb b0		 jmp	 SHORT $LN2@crypthead
$LN1@crypthead:

; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  00123	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00126	51		 push	 ecx
  00127	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 _decrypt_byte
  00130	83 c4 08	 add	 esp, 8
  00133	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00136	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  00139	c1 e8 10	 shr	 eax, 16			; 00000010H
  0013c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00141	50		 push	 eax
  00142	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00145	51		 push	 ecx
  00146	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 _update_keys
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00152	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  00155	c1 e8 10	 shr	 eax, 16			; 00000010H
  00158	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0015d	33 45 f4	 xor	 eax, DWORD PTR _t$[ebp]
  00160	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00163	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  00166	88 01		 mov	 BYTE PTR [ecx], al
  00168	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  0016b	83 c2 01	 add	 edx, 1
  0016e	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00171	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  00174	50		 push	 eax
  00175	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 _decrypt_byte
  0017e	83 c4 08	 add	 esp, 8
  00181	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00184	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  00187	c1 ea 18	 shr	 edx, 24			; 00000018H
  0018a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00190	52		 push	 edx
  00191	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  00194	50		 push	 eax
  00195	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00198	51		 push	 ecx
  00199	e8 00 00 00 00	 call	 _update_keys
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  001a4	c1 ea 18	 shr	 edx, 24			; 00000018H
  001a7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001ad	33 55 f4	 xor	 edx, DWORD PTR _t$[ebp]
  001b0	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001b3	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  001b6	88 10		 mov	 BYTE PTR [eax], dl
  001b8	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001bb	83 c1 01	 add	 ecx, 1
  001be	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 128  :     return n;

  001c1	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
$LN9@crypthead:

; 129  : }

  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
_crypthead ENDP
PUBLIC	_LoadCentralDirectoryRecord
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\zip.c
;	COMDAT _LoadCentralDirectoryRecord
_TEXT	SEGMENT
tv567 = -144						; size = 8
tv459 = -136						; size = 8
_read_this$80333 = -128					; size = 8
_buf_read$80327 = -116					; size = 4
_size_central_dir_to_read$80325 = -112			; size = 8
_buf_size$80326 = -100					; size = 4
_sizeEndOfCentralDirectory$80290 = -96			; size = 8
_central_pos$ = -88					; size = 8
_err$ = -80						; size = 4
_number_disk_with_CD$ = -76				; size = 4
_number_entry_CD$ = -72					; size = 8
_size_central_dir$ = -64				; size = 8
_hasZIP64Record$ = -52					; size = 4
_byte_before_the_zipfile$ = -48				; size = 8
_offset_central_dir$ = -40				; size = 8
_uL$ = -28						; size = 4
_number_entry$ = -24					; size = 8
_VersionMadeBy$ = -16					; size = 4
_number_disk$ = -12					; size = 4
_VersionNeeded$ = -8					; size = 4
_size_comment$ = -4					; size = 4
_pziinit$ = 8						; size = 4
_LoadCentralDirectoryRecord PROC			; COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 642  :   int err=ZIP_OK;

  00009	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;

  00010	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _hasZIP64Record$[ebp], 0

; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00017	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir64
  00027	83 c4 08	 add	 esp, 8
  0002a	89 45 a8	 mov	 DWORD PTR _central_pos$[ebp], eax
  0002d	89 55 ac	 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 666  :   if(central_pos > 0)

  00030	83 7d ac 00	 cmp	 DWORD PTR _central_pos$[ebp+4], 0
  00034	77 06		 ja	 SHORT $LN48@LoadCentra
  00036	83 7d a8 00	 cmp	 DWORD PTR _central_pos$[ebp], 0
  0003a	76 09		 jbe	 SHORT $LN45@LoadCentra
$LN48@LoadCentra:

; 667  :   {
; 668  :     hasZIP64Record = 1;

  0003c	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _hasZIP64Record$[ebp], 1
  00043	eb 21		 jmp	 SHORT $LN44@LoadCentra
$LN45@LoadCentra:

; 669  :   }
; 670  :   else if(central_pos == 0)

  00045	8b 45 a8	 mov	 eax, DWORD PTR _central_pos$[ebp]
  00048	0b 45 ac	 or	 eax, DWORD PTR _central_pos$[ebp+4]
  0004b	75 19		 jne	 SHORT $LN44@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00050	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir
  0005d	83 c4 08	 add	 esp, 8
  00060	89 45 a8	 mov	 DWORD PTR _central_pos$[ebp], eax
  00063	89 55 ac	 mov	 DWORD PTR _central_pos$[ebp+4], edx
$LN44@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)

  00066	83 7d cc 00	 cmp	 DWORD PTR _hasZIP64Record$[ebp], 0
  0006a	0f 84 ab 01 00
	00		 je	 $LN42@LoadCentra

; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00070	6a 00		 push	 0
  00072	8b 4d ac	 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  00075	51		 push	 ecx
  00076	8b 55 a8	 mov	 edx, DWORD PTR _central_pos$[ebp]
  00079	52		 push	 edx
  0007a	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0007d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00080	51		 push	 ecx
  00081	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _call_zseek64
  0008a	83 c4 14	 add	 esp, 20			; 00000014H
  0008d	85 c0		 test	 eax, eax
  0008f	74 07		 je	 SHORT $LN41@LoadCentra

; 684  :       err=ZIP_ERRNO;

  00091	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN41@LoadCentra:

; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00098	8d 45 e4	 lea	 eax, DWORD PTR _uL$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0009f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000a2	52		 push	 edx
  000a3	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _zip64local_getLong
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  000af	85 c0		 test	 eax, eax
  000b1	74 07		 je	 SHORT $LN40@LoadCentra

; 688  :       err=ZIP_ERRNO;

  000b3	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN40@LoadCentra:

; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  000ba	8d 4d a0	 lea	 ecx, DWORD PTR _sizeEndOfCentralDirectory$80290[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  000c1	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000c4	50		 push	 eax
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _zip64local_getLong64
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	85 c0		 test	 eax, eax
  000d3	74 07		 je	 SHORT $LN39@LoadCentra

; 692  :       err=ZIP_ERRNO;

  000d5	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN39@LoadCentra:

; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  000dc	8d 55 f0	 lea	 edx, DWORD PTR _VersionMadeBy$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  000e3	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000e6	51		 push	 ecx
  000e7	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  000ea	52		 push	 edx
  000eb	e8 00 00 00 00	 call	 _zip64local_getShort
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f3	85 c0		 test	 eax, eax
  000f5	74 07		 je	 SHORT $LN38@LoadCentra

; 696  :       err=ZIP_ERRNO;

  000f7	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN38@LoadCentra:

; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  000fe	8d 45 f8	 lea	 eax, DWORD PTR _VersionNeeded$[ebp]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00105	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00108	52		 push	 edx
  00109	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _zip64local_getShort
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	85 c0		 test	 eax, eax
  00117	74 07		 je	 SHORT $LN37@LoadCentra

; 700  :       err=ZIP_ERRNO;

  00119	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN37@LoadCentra:

; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00120	8d 4d f4	 lea	 ecx, DWORD PTR _number_disk$[ebp]
  00123	51		 push	 ecx
  00124	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00127	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0012a	50		 push	 eax
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 _zip64local_getLong
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH
  00137	85 c0		 test	 eax, eax
  00139	74 07		 je	 SHORT $LN36@LoadCentra

; 704  :       err=ZIP_ERRNO;

  0013b	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN36@LoadCentra:

; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00142	8d 55 b4	 lea	 edx, DWORD PTR _number_disk_with_CD$[ebp]
  00145	52		 push	 edx
  00146	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00149	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0014c	51		 push	 ecx
  0014d	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 _zip64local_getLong
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	85 c0		 test	 eax, eax
  0015b	74 07		 je	 SHORT $LN35@LoadCentra

; 708  :       err=ZIP_ERRNO;

  0015d	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN35@LoadCentra:

; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  00164	8d 45 e8	 lea	 eax, DWORD PTR _number_entry$[ebp]
  00167	50		 push	 eax
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0016b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0016e	52		 push	 edx
  0016f	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _zip64local_getLong64
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017b	85 c0		 test	 eax, eax
  0017d	74 07		 je	 SHORT $LN34@LoadCentra

; 712  :       err=ZIP_ERRNO;

  0017f	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN34@LoadCentra:

; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  00186	8d 4d b8	 lea	 ecx, DWORD PTR _number_entry_CD$[ebp]
  00189	51		 push	 ecx
  0018a	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0018d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00190	50		 push	 eax
  00191	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 _zip64local_getLong64
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019d	85 c0		 test	 eax, eax
  0019f	74 07		 je	 SHORT $LN33@LoadCentra

; 716  :       err=ZIP_ERRNO;

  001a1	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN33@LoadCentra:

; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  001a8	8b 55 b8	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  001ab	3b 55 e8	 cmp	 edx, DWORD PTR _number_entry$[ebp]
  001ae	75 14		 jne	 SHORT $LN31@LoadCentra
  001b0	8b 45 bc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  001b3	3b 45 ec	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  001b6	75 0c		 jne	 SHORT $LN31@LoadCentra
  001b8	83 7d b4 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  001bc	75 06		 jne	 SHORT $LN31@LoadCentra
  001be	83 7d f4 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  001c2	74 07		 je	 SHORT $LN32@LoadCentra
$LN31@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  001c4	c7 45 b0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN32@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  001cb	8d 4d c0	 lea	 ecx, DWORD PTR _size_central_dir$[ebp]
  001ce	51		 push	 ecx
  001cf	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  001d2	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _zip64local_getLong64
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e2	85 c0		 test	 eax, eax
  001e4	74 07		 je	 SHORT $LN30@LoadCentra

; 723  :       err=ZIP_ERRNO;

  001e6	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN30@LoadCentra:

; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  001ed	8d 55 d8	 lea	 edx, DWORD PTR _offset_central_dir$[ebp]
  001f0	52		 push	 edx
  001f1	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  001f4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001f7	51		 push	 ecx
  001f8	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  001fb	52		 push	 edx
  001fc	e8 00 00 00 00	 call	 _zip64local_getLong64
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
  00204	85 c0		 test	 eax, eax
  00206	74 07		 je	 SHORT $LN29@LoadCentra

; 728  :       err=ZIP_ERRNO;

  00208	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN29@LoadCentra:

; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  0020f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _size_comment$[ebp], 0

; 733  :   }
; 734  :   else

  00216	e9 c7 01 00 00	 jmp	 $LN28@LoadCentra
$LN42@LoadCentra:

; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0021b	6a 00		 push	 0
  0021d	8b 45 ac	 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  00220	50		 push	 eax
  00221	8b 4d a8	 mov	 ecx, DWORD PTR _central_pos$[ebp]
  00224	51		 push	 ecx
  00225	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00228	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0022b	50		 push	 eax
  0022c	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 _call_zseek64
  00235	83 c4 14	 add	 esp, 20			; 00000014H
  00238	85 c0		 test	 eax, eax
  0023a	74 07		 je	 SHORT $LN27@LoadCentra

; 738  :       err=ZIP_ERRNO;

  0023c	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN27@LoadCentra:

; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00243	8d 55 e4	 lea	 edx, DWORD PTR _uL$[ebp]
  00246	52		 push	 edx
  00247	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0024a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0024d	51		 push	 ecx
  0024e	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00251	52		 push	 edx
  00252	e8 00 00 00 00	 call	 _zip64local_getLong
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025a	85 c0		 test	 eax, eax
  0025c	74 07		 je	 SHORT $LN26@LoadCentra

; 742  :       err=ZIP_ERRNO;

  0025e	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@LoadCentra:

; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00265	8d 45 f4	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00268	50		 push	 eax
  00269	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0026c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0026f	52		 push	 edx
  00270	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 _zip64local_getShort
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	85 c0		 test	 eax, eax
  0027e	74 07		 je	 SHORT $LN25@LoadCentra

; 746  :       err=ZIP_ERRNO;

  00280	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN25@LoadCentra:

; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00287	8d 4d b4	 lea	 ecx, DWORD PTR _number_disk_with_CD$[ebp]
  0028a	51		 push	 ecx
  0028b	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0028e	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00291	50		 push	 eax
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00295	51		 push	 ecx
  00296	e8 00 00 00 00	 call	 _zip64local_getShort
  0029b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029e	85 c0		 test	 eax, eax
  002a0	74 07		 je	 SHORT $LN24@LoadCentra

; 750  :       err=ZIP_ERRNO;

  002a2	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@LoadCentra:

; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;

  002a9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _number_entry$[ebp], 0
  002b0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _number_entry$[ebp+4], 0

; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  002b7	8d 55 e4	 lea	 edx, DWORD PTR _uL$[ebp]
  002ba	52		 push	 edx
  002bb	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  002be	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002c1	51		 push	 ecx
  002c2	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  002c5	52		 push	 edx
  002c6	e8 00 00 00 00	 call	 _zip64local_getShort
  002cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ce	85 c0		 test	 eax, eax
  002d0	74 09		 je	 SHORT $LN23@LoadCentra

; 755  :       err=ZIP_ERRNO;

  002d2	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 756  :     else

  002d9	eb 0b		 jmp	 SHORT $LN22@LoadCentra
$LN23@LoadCentra:

; 757  :       number_entry = uL;

  002db	8b 45 e4	 mov	 eax, DWORD PTR _uL$[ebp]
  002de	33 c9		 xor	 ecx, ecx
  002e0	89 45 e8	 mov	 DWORD PTR _number_entry$[ebp], eax
  002e3	89 4d ec	 mov	 DWORD PTR _number_entry$[ebp+4], ecx
$LN22@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;

  002e6	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _number_entry_CD$[ebp], 0
  002ed	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _number_entry_CD$[ebp+4], 0

; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  002f4	8d 55 e4	 lea	 edx, DWORD PTR _uL$[ebp]
  002f7	52		 push	 edx
  002f8	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  002fb	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002fe	51		 push	 ecx
  002ff	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00302	52		 push	 edx
  00303	e8 00 00 00 00	 call	 _zip64local_getShort
  00308	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030b	85 c0		 test	 eax, eax
  0030d	74 09		 je	 SHORT $LN21@LoadCentra

; 762  :       err=ZIP_ERRNO;

  0030f	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 763  :     else

  00316	eb 0b		 jmp	 SHORT $LN20@LoadCentra
$LN21@LoadCentra:

; 764  :       number_entry_CD = uL;

  00318	8b 45 e4	 mov	 eax, DWORD PTR _uL$[ebp]
  0031b	33 c9		 xor	 ecx, ecx
  0031d	89 45 b8	 mov	 DWORD PTR _number_entry_CD$[ebp], eax
  00320	89 4d bc	 mov	 DWORD PTR _number_entry_CD$[ebp+4], ecx
$LN20@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00323	8b 55 b8	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  00326	3b 55 e8	 cmp	 edx, DWORD PTR _number_entry$[ebp]
  00329	75 14		 jne	 SHORT $LN18@LoadCentra
  0032b	8b 45 bc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  0032e	3b 45 ec	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  00331	75 0c		 jne	 SHORT $LN18@LoadCentra
  00333	83 7d b4 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  00337	75 06		 jne	 SHORT $LN18@LoadCentra
  00339	83 7d f4 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  0033d	74 07		 je	 SHORT $LN19@LoadCentra
$LN18@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  0033f	c7 45 b0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN19@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;

  00346	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _size_central_dir$[ebp], 0
  0034d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _size_central_dir$[ebp+4], 0

; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00354	8d 4d e4	 lea	 ecx, DWORD PTR _uL$[ebp]
  00357	51		 push	 ecx
  00358	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0035b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0035e	50		 push	 eax
  0035f	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00362	51		 push	 ecx
  00363	e8 00 00 00 00	 call	 _zip64local_getLong
  00368	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036b	85 c0		 test	 eax, eax
  0036d	74 09		 je	 SHORT $LN17@LoadCentra

; 772  :       err=ZIP_ERRNO;

  0036f	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 773  :     else

  00376	eb 0b		 jmp	 SHORT $LN16@LoadCentra
$LN17@LoadCentra:

; 774  :       size_central_dir = uL;

  00378	8b 55 e4	 mov	 edx, DWORD PTR _uL$[ebp]
  0037b	33 c0		 xor	 eax, eax
  0037d	89 55 c0	 mov	 DWORD PTR _size_central_dir$[ebp], edx
  00380	89 45 c4	 mov	 DWORD PTR _size_central_dir$[ebp+4], eax
$LN16@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;

  00383	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _offset_central_dir$[ebp], 0
  0038a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _offset_central_dir$[ebp+4], 0

; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00391	8d 4d e4	 lea	 ecx, DWORD PTR _uL$[ebp]
  00394	51		 push	 ecx
  00395	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00398	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0039b	50		 push	 eax
  0039c	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0039f	51		 push	 ecx
  003a0	e8 00 00 00 00	 call	 _zip64local_getLong
  003a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a8	85 c0		 test	 eax, eax
  003aa	74 09		 je	 SHORT $LN15@LoadCentra

; 779  :       err=ZIP_ERRNO;

  003ac	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 780  :     else

  003b3	eb 0b		 jmp	 SHORT $LN14@LoadCentra
$LN15@LoadCentra:

; 781  :       offset_central_dir = uL;

  003b5	8b 55 e4	 mov	 edx, DWORD PTR _uL$[ebp]
  003b8	33 c0		 xor	 eax, eax
  003ba	89 55 d8	 mov	 DWORD PTR _offset_central_dir$[ebp], edx
  003bd	89 45 dc	 mov	 DWORD PTR _offset_central_dir$[ebp+4], eax
$LN14@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  003c0	8d 4d fc	 lea	 ecx, DWORD PTR _size_comment$[ebp]
  003c3	51		 push	 ecx
  003c4	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  003c7	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  003ca	50		 push	 eax
  003cb	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  003ce	51		 push	 ecx
  003cf	e8 00 00 00 00	 call	 _zip64local_getShort
  003d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d7	85 c0		 test	 eax, eax
  003d9	74 07		 je	 SHORT $LN28@LoadCentra

; 786  :       err=ZIP_ERRNO;

  003db	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN28@LoadCentra:

; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&
; 790  :     (err==ZIP_OK))

  003e2	8b 55 d8	 mov	 edx, DWORD PTR _offset_central_dir$[ebp]
  003e5	03 55 c0	 add	 edx, DWORD PTR _size_central_dir$[ebp]
  003e8	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  003eb	13 45 c4	 adc	 eax, DWORD PTR _size_central_dir$[ebp+4]
  003ee	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv459[ebp], edx
  003f4	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv459[ebp+4], eax
  003fa	8b 4d ac	 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  003fd	3b 8d 7c ff ff
	ff		 cmp	 ecx, DWORD PTR tv459[ebp+4]
  00403	77 1a		 ja	 SHORT $LN12@LoadCentra
  00405	72 0b		 jb	 SHORT $LN49@LoadCentra
  00407	8b 55 a8	 mov	 edx, DWORD PTR _central_pos$[ebp]
  0040a	3b 95 78 ff ff
	ff		 cmp	 edx, DWORD PTR tv459[ebp]
  00410	73 0d		 jae	 SHORT $LN12@LoadCentra
$LN49@LoadCentra:
  00412	83 7d b0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00416	75 07		 jne	 SHORT $LN12@LoadCentra

; 791  :     err=ZIP_BADZIPFILE;

  00418	c7 45 b0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN12@LoadCentra:

; 792  : 
; 793  :   if (err!=ZIP_OK)

  0041f	83 7d b0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00423	74 21		 je	 SHORT $LN11@LoadCentra

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00425	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00428	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0042b	51		 push	 ecx
  0042c	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0042f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00432	50		 push	 eax
  00433	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00436	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00439	ff d2		 call	 edx
  0043b	83 c4 08	 add	 esp, 8

; 796  :     return ZIP_ERRNO;

  0043e	83 c8 ff	 or	 eax, -1
  00441	e9 1b 02 00 00	 jmp	 $LN46@LoadCentra
$LN11@LoadCentra:

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  00446	83 7d fc 00	 cmp	 DWORD PTR _size_comment$[ebp], 0
  0044a	76 5e		 jbe	 SHORT $LN10@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  0044c	8b 45 fc	 mov	 eax, DWORD PTR _size_comment$[ebp]
  0044f	83 c0 01	 add	 eax, 1
  00452	50		 push	 eax
  00453	e8 00 00 00 00	 call	 _malloc
  00458	83 c4 04	 add	 esp, 4
  0045b	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0045e	89 81 00 01 01
	00		 mov	 DWORD PTR [ecx+65792], eax

; 802  :     if (pziinit->globalcomment)

  00464	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00467	83 ba 00 01 01
	00 00		 cmp	 DWORD PTR [edx+65792], 0
  0046e	74 3a		 je	 SHORT $LN10@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  00470	8b 45 fc	 mov	 eax, DWORD PTR _size_comment$[ebp]
  00473	50		 push	 eax
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00477	8b 91 00 01 01
	00		 mov	 edx, DWORD PTR [ecx+65792]
  0047d	52		 push	 edx
  0047e	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00481	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00484	51		 push	 ecx
  00485	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00488	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0048b	50		 push	 eax
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0048f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00492	ff d2		 call	 edx
  00494	83 c4 10	 add	 esp, 16			; 00000010H
  00497	89 45 fc	 mov	 DWORD PTR _size_comment$[ebp], eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  0049a	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0049d	8b 88 00 01 01
	00		 mov	 ecx, DWORD PTR [eax+65792]
  004a3	8b 55 fc	 mov	 edx, DWORD PTR _size_comment$[ebp]
  004a6	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
$LN10@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  004aa	8b 45 d8	 mov	 eax, DWORD PTR _offset_central_dir$[ebp]
  004ad	03 45 c0	 add	 eax, DWORD PTR _size_central_dir$[ebp]
  004b0	8b 4d dc	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp+4]
  004b3	13 4d c4	 adc	 ecx, DWORD PTR _size_central_dir$[ebp+4]
  004b6	8b 55 a8	 mov	 edx, DWORD PTR _central_pos$[ebp]
  004b9	2b d0		 sub	 edx, eax
  004bb	8b 45 ac	 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  004be	1b c1		 sbb	 eax, ecx
  004c0	89 55 d0	 mov	 DWORD PTR _byte_before_the_zipfile$[ebp], edx
  004c3	89 45 d4	 mov	 DWORD PTR _byte_before_the_zipfile$[ebp+4], eax

; 810  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;

  004c6	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  004c9	8b 55 d0	 mov	 edx, DWORD PTR _byte_before_the_zipfile$[ebp]
  004cc	89 91 f0 00 01
	00		 mov	 DWORD PTR [ecx+65776], edx
  004d2	8b 45 d4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  004d5	89 81 f4 00 01
	00		 mov	 DWORD PTR [ecx+65780], eax

; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;

  004db	8b 4d c0	 mov	 ecx, DWORD PTR _size_central_dir$[ebp]
  004de	89 4d 90	 mov	 DWORD PTR _size_central_dir_to_read$80325[ebp], ecx
  004e1	8b 55 c4	 mov	 edx, DWORD PTR _size_central_dir$[ebp+4]
  004e4	89 55 94	 mov	 DWORD PTR _size_central_dir_to_read$80325[ebp+4], edx

; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;

  004e7	c7 45 9c f0 0f
	00 00		 mov	 DWORD PTR _buf_size$80326[ebp], 4080 ; 00000ff0H

; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  004ee	8b 45 9c	 mov	 eax, DWORD PTR _buf_size$80326[ebp]
  004f1	50		 push	 eax
  004f2	e8 00 00 00 00	 call	 _malloc
  004f7	83 c4 04	 add	 esp, 4
  004fa	89 45 8c	 mov	 DWORD PTR _buf_read$80327[ebp], eax

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  004fd	6a 00		 push	 0
  004ff	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  00502	03 4d d0	 add	 ecx, DWORD PTR _byte_before_the_zipfile$[ebp]
  00505	8b 55 dc	 mov	 edx, DWORD PTR _offset_central_dir$[ebp+4]
  00508	13 55 d4	 adc	 edx, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  0050b	52		 push	 edx
  0050c	51		 push	 ecx
  0050d	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00510	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00513	51		 push	 ecx
  00514	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00517	52		 push	 edx
  00518	e8 00 00 00 00	 call	 _call_zseek64
  0051d	83 c4 14	 add	 esp, 20			; 00000014H
  00520	85 c0		 test	 eax, eax
  00522	74 07		 je	 SHORT $LN7@LoadCentra

; 817  :       err=ZIP_ERRNO;

  00524	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN7@LoadCentra:

; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  0052b	83 7d 94 00	 cmp	 DWORD PTR _size_central_dir_to_read$80325[ebp+4], 0
  0052f	77 0a		 ja	 SHORT $LN50@LoadCentra
  00531	83 7d 90 00	 cmp	 DWORD PTR _size_central_dir_to_read$80325[ebp], 0
  00535	0f 86 b9 00 00
	00		 jbe	 $LN6@LoadCentra
$LN50@LoadCentra:
  0053b	83 7d b0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0053f	0f 85 af 00 00
	00		 jne	 $LN6@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  00545	c7 45 80 f0 0f
	00 00		 mov	 DWORD PTR _read_this$80333[ebp], 4080 ; 00000ff0H
  0054c	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _read_this$80333[ebp+4], 0

; 822  :       if (read_this > size_central_dir_to_read)

  00553	8b 45 84	 mov	 eax, DWORD PTR _read_this$80333[ebp+4]
  00556	3b 45 94	 cmp	 eax, DWORD PTR _size_central_dir_to_read$80325[ebp+4]
  00559	72 16		 jb	 SHORT $LN5@LoadCentra
  0055b	77 08		 ja	 SHORT $LN51@LoadCentra
  0055d	8b 4d 80	 mov	 ecx, DWORD PTR _read_this$80333[ebp]
  00560	3b 4d 90	 cmp	 ecx, DWORD PTR _size_central_dir_to_read$80325[ebp]
  00563	76 0c		 jbe	 SHORT $LN5@LoadCentra
$LN51@LoadCentra:

; 823  :         read_this = size_central_dir_to_read;

  00565	8b 55 90	 mov	 edx, DWORD PTR _size_central_dir_to_read$80325[ebp]
  00568	89 55 80	 mov	 DWORD PTR _read_this$80333[ebp], edx
  0056b	8b 45 94	 mov	 eax, DWORD PTR _size_central_dir_to_read$80325[ebp+4]
  0056e	89 45 84	 mov	 DWORD PTR _read_this$80333[ebp+4], eax
$LN5@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  00571	8b 4d 80	 mov	 ecx, DWORD PTR _read_this$80333[ebp]
  00574	51		 push	 ecx
  00575	8b 55 8c	 mov	 edx, DWORD PTR _buf_read$80327[ebp]
  00578	52		 push	 edx
  00579	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  0057c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0057f	51		 push	 ecx
  00580	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  00583	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00586	50		 push	 eax
  00587	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0058a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0058d	ff d2		 call	 edx
  0058f	83 c4 10	 add	 esp, 16			; 00000010H
  00592	33 c9		 xor	 ecx, ecx
  00594	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv567[ebp], eax
  0059a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv567[ebp+4], ecx
  005a0	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv567[ebp]
  005a6	3b 55 80	 cmp	 edx, DWORD PTR _read_this$80333[ebp]
  005a9	75 0b		 jne	 SHORT $LN52@LoadCentra
  005ab	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv567[ebp+4]
  005b1	3b 45 84	 cmp	 eax, DWORD PTR _read_this$80333[ebp+4]
  005b4	74 07		 je	 SHORT $LN4@LoadCentra
$LN52@LoadCentra:

; 826  :         err=ZIP_ERRNO;

  005b6	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN4@LoadCentra:

; 827  : 
; 828  :       if (err==ZIP_OK)

  005bd	83 7d b0 00	 cmp	 DWORD PTR _err$[ebp], 0
  005c1	75 1a		 jne	 SHORT $LN3@LoadCentra

; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  005c3	8b 4d 80	 mov	 ecx, DWORD PTR _read_this$80333[ebp]
  005c6	51		 push	 ecx
  005c7	8b 55 8c	 mov	 edx, DWORD PTR _buf_read$80327[ebp]
  005ca	52		 push	 edx
  005cb	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  005ce	83 c0 30	 add	 eax, 48			; 00000030H
  005d1	50		 push	 eax
  005d2	e8 00 00 00 00	 call	 _add_data_in_datablock
  005d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  005da	89 45 b0	 mov	 DWORD PTR _err$[ebp], eax
$LN3@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  005dd	8b 4d 90	 mov	 ecx, DWORD PTR _size_central_dir_to_read$80325[ebp]
  005e0	2b 4d 80	 sub	 ecx, DWORD PTR _read_this$80333[ebp]
  005e3	8b 55 94	 mov	 edx, DWORD PTR _size_central_dir_to_read$80325[ebp+4]
  005e6	1b 55 84	 sbb	 edx, DWORD PTR _read_this$80333[ebp+4]
  005e9	89 4d 90	 mov	 DWORD PTR _size_central_dir_to_read$80325[ebp], ecx
  005ec	89 55 94	 mov	 DWORD PTR _size_central_dir_to_read$80325[ebp+4], edx

; 832  :     }

  005ef	e9 37 ff ff ff	 jmp	 $LN7@LoadCentra
$LN6@LoadCentra:

; 833  :     TRYFREE(buf_read);

  005f4	83 7d 8c 00	 cmp	 DWORD PTR _buf_read$80327[ebp], 0
  005f8	74 0c		 je	 SHORT $LN2@LoadCentra
  005fa	8b 45 8c	 mov	 eax, DWORD PTR _buf_read$80327[ebp]
  005fd	50		 push	 eax
  005fe	e8 00 00 00 00	 call	 _free
  00603	83 c4 04	 add	 esp, 4
$LN2@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  00606	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  00609	8b 55 d0	 mov	 edx, DWORD PTR _byte_before_the_zipfile$[ebp]
  0060c	89 91 e8 00 01
	00		 mov	 DWORD PTR [ecx+65768], edx
  00612	8b 45 d4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  00615	89 81 ec 00 01
	00		 mov	 DWORD PTR [ecx+65772], eax

; 836  :   pziinit->number_entry = number_entry_CD;

  0061b	8b 4d 08	 mov	 ecx, DWORD PTR _pziinit$[ebp]
  0061e	8b 55 b8	 mov	 edx, DWORD PTR _number_entry_CD$[ebp]
  00621	89 91 f8 00 01
	00		 mov	 DWORD PTR [ecx+65784], edx
  00627	8b 45 bc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  0062a	89 81 fc 00 01
	00		 mov	 DWORD PTR [ecx+65788], eax

; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00630	6a 00		 push	 0
  00632	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  00635	03 4d d0	 add	 ecx, DWORD PTR _byte_before_the_zipfile$[ebp]
  00638	8b 55 dc	 mov	 edx, DWORD PTR _offset_central_dir$[ebp+4]
  0063b	13 55 d4	 adc	 edx, DWORD PTR _byte_before_the_zipfile$[ebp+4]
  0063e	52		 push	 edx
  0063f	51		 push	 ecx
  00640	8b 45 08	 mov	 eax, DWORD PTR _pziinit$[ebp]
  00643	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00646	51		 push	 ecx
  00647	8b 55 08	 mov	 edx, DWORD PTR _pziinit$[ebp]
  0064a	52		 push	 edx
  0064b	e8 00 00 00 00	 call	 _call_zseek64
  00650	83 c4 14	 add	 esp, 20			; 00000014H
  00653	85 c0		 test	 eax, eax
  00655	74 07		 je	 SHORT $LN1@LoadCentra

; 839  :     err=ZIP_ERRNO;

  00657	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN1@LoadCentra:

; 840  : 
; 841  :   return err;

  0065e	8b 45 b0	 mov	 eax, DWORD PTR _err$[ebp]
$LN46@LoadCentra:

; 842  : }

  00661	8b e5		 mov	 esp, ebp
  00663	5d		 pop	 ebp
  00664	c3		 ret	 0
_LoadCentralDirectoryRecord ENDP
PUBLIC	_zipOpen3@16
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp
;	COMDAT _zipOpen3@16
_TEXT	SEGMENT
_ziinit$ = -65808					; size = 65800
_zi$ = -8						; size = 4
_err$ = -4						; size = 4
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc64_32_def$ = 20				; size = 4
_zipOpen3@16 PROC					; COMDAT

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 01 01 00	 mov	 eax, 65808		; 00010110H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	56		 push	 esi
  0000e	57		 push	 edi

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;

  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;

  00016	c7 85 18 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+40], 0

; 856  :     ziinit.z_filefunc.ztell32_file = NULL;

  00020	c7 85 14 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+36], 0

; 857  :     if (pzlib_filefunc64_32_def==NULL)

  0002a	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc64_32_def$[ebp], 0
  0002e	75 11		 jne	 SHORT $LN11@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00030	8d 85 f0 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  0003c	83 c4 04	 add	 esp, 4

; 859  :     else

  0003f	eb 10		 jmp	 SHORT $LN10@zipOpen3
$LN11@zipOpen3:

; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00041	8b 75 14	 mov	 esi, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00044	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00049	8d bd f0 fe fe
	ff		 lea	 edi, DWORD PTR _ziinit$[ebp]
  0004f	f3 a5		 rep movsd
$LN10@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,
; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));

  00051	33 c9		 xor	 ecx, ecx
  00053	83 7d 0c 00	 cmp	 DWORD PTR _append$[ebp], 0
  00057	0f 94 c1	 sete	 cl
  0005a	8d 0c 8d 07 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+7]
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  00065	52		 push	 edx
  00066	8d 85 f0 fe fe
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _call_zopen64
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	89 85 1c ff fe
	ff		 mov	 DWORD PTR _ziinit$[ebp+44], eax

; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  0007b	83 bd 1c ff fe
	ff 00		 cmp	 DWORD PTR _ziinit$[ebp+44], 0
  00082	75 07		 jne	 SHORT $LN9@zipOpen3

; 869  :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	e9 26 01 00 00	 jmp	 $LN12@zipOpen3
$LN9@zipOpen3:

; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  0008b	83 7d 0c 01	 cmp	 DWORD PTR _append$[ebp], 1
  0008f	75 1c		 jne	 SHORT $LN8@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  00091	6a 02		 push	 2
  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	8b 8d 1c ff fe
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+44]
  0009d	51		 push	 ecx
  0009e	8d 95 f0 fe fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _call_zseek64
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000ad	8b 85 1c ff fe
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+44]
  000b3	50		 push	 eax
  000b4	8d 8d f0 fe fe
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _call_ztell64
  000c0	83 c4 08	 add	 esp, 8
  000c3	89 45 d8	 mov	 DWORD PTR _ziinit$[ebp+65768], eax
  000c6	89 55 dc	 mov	 DWORD PTR _ziinit$[ebp+65772], edx

; 875  :     ziinit.in_opened_file_inzip = 0;

  000c9	c7 85 28 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+56], 0

; 876  :     ziinit.ci.stream_initialised = 0;

  000d3	c7 85 68 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+120], 0

; 877  :     ziinit.number_entry = 0;

  000dd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65784], 0
  000e4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65788], 0

; 878  :     ziinit.add_position_when_writing_offset = 0;

  000eb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65776], 0
  000f2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65780], 0

; 879  :     init_linkedlist(&(ziinit.central_dir));

  000f9	8d 95 20 ff fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp+48]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _init_linkedlist
  00105	83 c4 04	 add	 esp, 4

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  00108	68 08 01 01 00	 push	 65800			; 00010108H
  0010d	e8 00 00 00 00	 call	 _malloc
  00112	83 c4 04	 add	 esp, 4
  00115	89 45 f8	 mov	 DWORD PTR _zi$[ebp], eax

; 884  :     if (zi==NULL)

  00118	83 7d f8 00	 cmp	 DWORD PTR _zi$[ebp], 0
  0011c	75 1b		 jne	 SHORT $LN7@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  0011e	8b 85 1c ff fe
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+44]
  00124	50		 push	 eax
  00125	8b 8d 0c ff fe
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  0012b	51		 push	 ecx
  0012c	ff 95 04 ff fe
	ff		 call	 DWORD PTR _ziinit$[ebp+20]
  00132	83 c4 08	 add	 esp, 8

; 887  :         return NULL;

  00135	33 c0		 xor	 eax, eax
  00137	eb 78		 jmp	 SHORT $LN12@zipOpen3
$LN7@zipOpen3:

; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00139	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+65792], 0

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  00140	83 7d 0c 02	 cmp	 DWORD PTR _append$[ebp], 2
  00144	75 12		 jne	 SHORT $LN6@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  00146	8d 95 f0 fe fe
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _LoadCentralDirectoryRecord
  00152	83 c4 04	 add	 esp, 4
  00155	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN6@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  00158	83 7d 10 00	 cmp	 DWORD PTR _globalcomment$[ebp], 0
  0015c	74 08		 je	 SHORT $LN5@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  0015e	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  00161	8b 4d f0	 mov	 ecx, DWORD PTR _ziinit$[ebp+65792]
  00164	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  00166	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0016a	74 2a		 je	 SHORT $LN4@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  0016c	83 7d f0 00	 cmp	 DWORD PTR _ziinit$[ebp+65792], 0
  00170	74 0c		 je	 SHORT $LN3@zipOpen3
  00172	8b 55 f0	 mov	 edx, DWORD PTR _ziinit$[ebp+65792]
  00175	52		 push	 edx
  00176	e8 00 00 00 00	 call	 _free
  0017b	83 c4 04	 add	 esp, 4
$LN3@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  0017e	83 7d f8 00	 cmp	 DWORD PTR _zi$[ebp], 0
  00182	74 0c		 je	 SHORT $LN2@zipOpen3
  00184	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 _free
  0018d	83 c4 04	 add	 esp, 4
$LN2@zipOpen3:

; 911  :         return NULL;

  00190	33 c0		 xor	 eax, eax
  00192	eb 1d		 jmp	 SHORT $LN12@zipOpen3

; 912  :     }
; 913  :     else

  00194	eb 1b		 jmp	 SHORT $LN12@zipOpen3
$LN4@zipOpen3:

; 914  :     {
; 915  :         *zi = ziinit;

  00196	68 08 01 01 00	 push	 65800			; 00010108H
  0019b	8d 8d f0 fe fe
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  001a1	51		 push	 ecx
  001a2	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 _memcpy
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  :         return (zipFile)zi;

  001ae	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
$LN12@zipOpen3:

; 917  :     }
; 918  : }

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 10 00	 ret	 16			; 00000010H
_zipOpen3@16 ENDP
PUBLIC	_zipCloseFileInZipRaw64@16
; Function compile flags: /Odtp
;	COMDAT _zipCloseFileInZipRaw64@16
_TEXT	SEGMENT
tv580 = -64						; size = 4
tv514 = -60						; size = 4
tv477 = -56						; size = 4
tv433 = -52						; size = 4
_cur_pos_inzip$80925 = -48				; size = 8
_p$80914 = -40						; size = 4
_tmp_err$80896 = -36					; size = 4
_uTotalOutBefore$80885 = -32				; size = 4
_invalidValue$ = -28					; size = 4
_zi$ = -24						; size = 4
_err$ = -20						; size = 4
_compressed_size$ = -16					; size = 8
_datasize$ = -4						; size = 2
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_crc32$ = 20						; size = 4
_zipCloseFileInZipRaw64@16 PROC				; COMDAT

; 1515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 1516 :     zip64_internal* zi;
; 1517 :     ZPOS64_T compressed_size;
; 1518 :     uLong invalidValue = 0xffffffff;

  00006	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _invalidValue$[ebp], -1

; 1519 :     short datasize = 0;

  0000d	33 c0		 xor	 eax, eax
  0000f	66 89 45 fc	 mov	 WORD PTR _datasize$[ebp], ax

; 1520 :     int err=ZIP_OK;

  00013	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1521 : 
; 1522 :     if (file == NULL)

  0001a	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0001e	75 0a		 jne	 SHORT $LN45@zipCloseFi

; 1523 :         return ZIP_PARAMERROR;

  00020	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00025	e9 d1 06 00 00	 jmp	 $LN46@zipCloseFi
$LN45@zipCloseFi:

; 1524 :     zi = (zip64_internal*)file;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0002d	89 4d e8	 mov	 DWORD PTR _zi$[ebp], ecx

; 1525 : 
; 1526 :     if (zi->in_opened_file_inzip == 0)

  00030	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00033	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00037	75 0a		 jne	 SHORT $LN44@zipCloseFi

; 1527 :         return ZIP_PARAMERROR;

  00039	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003e	e9 b8 06 00 00	 jmp	 $LN46@zipCloseFi
$LN44@zipCloseFi:

; 1528 :     zi->ci.stream.avail_in = 0;

  00043	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00046	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1529 : 
; 1530 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0004d	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00050	83 b9 9c 00 00
	00 08		 cmp	 DWORD PTR [ecx+156], 8
  00057	75 7c		 jne	 SHORT $LN38@zipCloseFi
  00059	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0005c	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  00063	75 70		 jne	 SHORT $LN38@zipCloseFi
$LN42@zipCloseFi:

; 1531 :                 {
; 1532 :                         while (err==ZIP_OK)

  00065	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00069	75 6a		 jne	 SHORT $LN38@zipCloseFi

; 1533 :                         {
; 1534 :                                 uLong uTotalOutBefore;
; 1535 :                                 if (zi->ci.stream.avail_out == 0)

  0006b	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  0006e	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00072	75 30		 jne	 SHORT $LN40@zipCloseFi

; 1536 :                                 {
; 1537 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00074	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  0007d	83 c4 04	 add	 esp, 4
  00080	83 f8 ff	 cmp	 eax, -1
  00083	75 07		 jne	 SHORT $LN39@zipCloseFi

; 1538 :                                                 err = ZIP_ERRNO;

  00085	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN39@zipCloseFi:

; 1539 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  0008c	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0008f	c7 42 50 00 00
	01 00		 mov	 DWORD PTR [edx+80], 65536 ; 00010000H

; 1540 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00096	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00099	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  0009e	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000a1	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN40@zipCloseFi:

; 1541 :                                 }
; 1542 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  000a4	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  000a7	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000aa	89 45 e0	 mov	 DWORD PTR _uTotalOutBefore$80885[ebp], eax

; 1543 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  000ad	6a 04		 push	 4
  000af	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b2	83 c1 40	 add	 ecx, 64			; 00000040H
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _deflate@8
  000bb	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1544 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000be	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  000c1	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000c4	2b 45 e0	 sub	 eax, DWORD PTR _uTotalOutBefore$80885[ebp]
  000c7	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000ca	03 41 7c	 add	 eax, DWORD PTR [ecx+124]
  000cd	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  000d0	89 42 7c	 mov	 DWORD PTR [edx+124], eax

; 1545 :                         }

  000d3	eb 90		 jmp	 SHORT $LN42@zipCloseFi
$LN38@zipCloseFi:

; 1546 :                 }
; 1547 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1548 :     {
; 1549 : #ifdef HAVE_BZIP2
; 1550 :       err = BZ_FINISH_OK;
; 1551 :       while (err==BZ_FINISH_OK)
; 1552 :       {
; 1553 :         uLong uTotalOutBefore;
; 1554 :         if (zi->ci.bstream.avail_out == 0)
; 1555 :         {
; 1556 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1557 :             err = ZIP_ERRNO;
; 1558 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1559 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1560 :         }
; 1561 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1562 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1563 :         if(err == BZ_STREAM_END)
; 1564 :           err = Z_STREAM_END;
; 1565 : 
; 1566 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1567 :       }
; 1568 : 
; 1569 :       if(err == BZ_FINISH_OK)
; 1570 :         err = ZIP_OK;
; 1571 : #endif
; 1572 :     }
; 1573 : 
; 1574 :     if (err==Z_STREAM_END)

  000d5	83 7d ec 01	 cmp	 DWORD PTR _err$[ebp], 1
  000d9	75 07		 jne	 SHORT $LN36@zipCloseFi

; 1575 :         err=ZIP_OK; /* this is normal */

  000db	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0
$LN36@zipCloseFi:

; 1576 : 
; 1577 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000e2	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  000e5	83 7a 7c 00	 cmp	 DWORD PTR [edx+124], 0
  000e9	76 1e		 jbe	 SHORT $LN35@zipCloseFi
  000eb	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ef	75 18		 jne	 SHORT $LN35@zipCloseFi

; 1578 :                 {
; 1579 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  000fa	83 c4 04	 add	 esp, 4
  000fd	83 f8 ff	 cmp	 eax, -1
  00100	75 07		 jne	 SHORT $LN35@zipCloseFi

; 1580 :             err = ZIP_ERRNO;

  00102	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN35@zipCloseFi:

; 1581 :                 }
; 1582 : 
; 1583 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00109	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0010c	83 b9 9c 00 00
	00 08		 cmp	 DWORD PTR [ecx+156], 8
  00113	75 31		 jne	 SHORT $LN33@zipCloseFi
  00115	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00118	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  0011f	75 25		 jne	 SHORT $LN33@zipCloseFi

; 1584 :     {
; 1585 :         int tmp_err = deflateEnd(&zi->ci.stream);

  00121	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00124	83 c0 40	 add	 eax, 64			; 00000040H
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _deflateEnd@4
  0012d	89 45 dc	 mov	 DWORD PTR _tmp_err$80896[ebp], eax

; 1586 :         if (err == ZIP_OK)

  00130	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00134	75 06		 jne	 SHORT $LN32@zipCloseFi

; 1587 :             err = tmp_err;

  00136	8b 4d dc	 mov	 ecx, DWORD PTR _tmp_err$80896[ebp]
  00139	89 4d ec	 mov	 DWORD PTR _err$[ebp], ecx
$LN32@zipCloseFi:

; 1588 :         zi->ci.stream_initialised = 0;

  0013c	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0013f	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
$LN33@zipCloseFi:

; 1589 :     }
; 1590 : #ifdef HAVE_BZIP2
; 1591 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1592 :     {
; 1593 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1594 :                         if (err==ZIP_OK)
; 1595 :                                 err = tmperr;
; 1596 :                         zi->ci.stream_initialised = 0;
; 1597 :     }
; 1598 : #endif
; 1599 : 
; 1600 :     if (!zi->ci.raw)

  00146	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00149	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00150	75 21		 jne	 SHORT $LN31@zipCloseFi

; 1601 :     {
; 1602 :         crc32 = (uLong)zi->ci.crc32;

  00152	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00155	8b 91 a8 00 01
	00		 mov	 edx, DWORD PTR [ecx+65704]
  0015b	89 55 14	 mov	 DWORD PTR _crc32$[ebp], edx

; 1603 :         uncompressed_size = zi->ci.totalUncompressedData;

  0015e	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00161	8b 88 c8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65736]
  00167	89 4d 0c	 mov	 DWORD PTR _uncompressed_size$[ebp], ecx
  0016a	8b 90 cc 00 01
	00		 mov	 edx, DWORD PTR [eax+65740]
  00170	89 55 10	 mov	 DWORD PTR _uncompressed_size$[ebp+4], edx
$LN31@zipCloseFi:

; 1604 :     }
; 1605 :     compressed_size = zi->ci.totalCompressedData;

  00173	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00176	8b 88 c0 00 01
	00		 mov	 ecx, DWORD PTR [eax+65728]
  0017c	89 4d f0	 mov	 DWORD PTR _compressed_size$[ebp], ecx
  0017f	8b 90 c4 00 01
	00		 mov	 edx, DWORD PTR [eax+65732]
  00185	89 55 f4	 mov	 DWORD PTR _compressed_size$[ebp+4], edx

; 1606 : 
; 1607 : #    ifndef NOCRYPT
; 1608 :     compressed_size += zi->ci.crypt_header_size;

  00188	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  0018b	8b 80 e0 00 01
	00		 mov	 eax, DWORD PTR [eax+65760]
  00191	99		 cdq
  00192	03 45 f0	 add	 eax, DWORD PTR _compressed_size$[ebp]
  00195	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$[ebp+4]
  00198	13 ca		 adc	 ecx, edx
  0019a	89 45 f0	 mov	 DWORD PTR _compressed_size$[ebp], eax
  0019d	89 4d f4	 mov	 DWORD PTR _compressed_size$[ebp+4], ecx

; 1609 : #    endif
; 1610 : 
; 1611 :     // update Current Item crc and sizes,
; 1612 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  001a0	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  001a4	77 34		 ja	 SHORT $LN29@zipCloseFi
  001a6	72 06		 jb	 SHORT $LN48@zipCloseFi
  001a8	83 7d f0 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  001ac	73 2c		 jae	 SHORT $LN29@zipCloseFi
$LN48@zipCloseFi:
  001ae	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  001b2	77 26		 ja	 SHORT $LN29@zipCloseFi
  001b4	72 06		 jb	 SHORT $LN49@zipCloseFi
  001b6	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  001ba	73 1e		 jae	 SHORT $LN29@zipCloseFi
$LN49@zipCloseFi:
  001bc	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  001bf	89 55 cc	 mov	 DWORD PTR tv433[ebp], edx
  001c2	8b 45 cc	 mov	 eax, DWORD PTR tv433[ebp]
  001c5	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  001cc	77 0c		 ja	 SHORT $LN29@zipCloseFi
  001ce	8b 4d cc	 mov	 ecx, DWORD PTR tv433[ebp]
  001d1	83 b9 80 00 00
	00 ff		 cmp	 DWORD PTR [ecx+128], -1
  001d8	72 36		 jb	 SHORT $LN30@zipCloseFi
$LN29@zipCloseFi:

; 1613 :     {
; 1614 :       /*version Made by*/
; 1615 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  001da	6a 02		 push	 2
  001dc	6a 00		 push	 0
  001de	6a 2d		 push	 45			; 0000002dH
  001e0	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  001e3	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  001e9	83 c0 04	 add	 eax, 4
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001f2	83 c4 10	 add	 esp, 16			; 00000010H

; 1616 :       /*version needed*/
; 1617 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  001f5	6a 02		 push	 2
  001f7	6a 00		 push	 0
  001f9	6a 2d		 push	 45			; 0000002dH
  001fb	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001fe	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00204	83 c2 06	 add	 edx, 6
  00207	52		 push	 edx
  00208	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0020d	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@zipCloseFi:

; 1618 : 
; 1619 :     }
; 1620 : 
; 1621 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00210	6a 04		 push	 4
  00212	8b 45 14	 mov	 eax, DWORD PTR _crc32$[ebp]
  00215	33 c9		 xor	 ecx, ecx
  00217	51		 push	 ecx
  00218	50		 push	 eax
  00219	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0021c	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00222	83 c0 10	 add	 eax, 16			; 00000010H
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0022b	83 c4 10	 add	 esp, 16			; 00000010H

; 1622 : 
; 1623 : 
; 1624 :     if(compressed_size >= 0xffffffff)

  0022e	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  00232	77 06		 ja	 SHORT $LN51@zipCloseFi
  00234	83 7d f0 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  00238	72 20		 jb	 SHORT $LN28@zipCloseFi
$LN51@zipCloseFi:

; 1625 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  0023a	6a 04		 push	 4
  0023c	8b 4d e4	 mov	 ecx, DWORD PTR _invalidValue$[ebp]
  0023f	33 d2		 xor	 edx, edx
  00241	52		 push	 edx
  00242	51		 push	 ecx
  00243	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00246	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0024c	83 c1 14	 add	 ecx, 20			; 00000014H
  0024f	51		 push	 ecx
  00250	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00255	83 c4 10	 add	 esp, 16			; 00000010H

; 1626 :     else

  00258	eb 1f		 jmp	 SHORT $LN27@zipCloseFi
$LN28@zipCloseFi:

; 1627 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  0025a	6a 04		 push	 4
  0025c	8b 55 f4	 mov	 edx, DWORD PTR _compressed_size$[ebp+4]
  0025f	52		 push	 edx
  00260	8b 45 f0	 mov	 eax, DWORD PTR _compressed_size$[ebp]
  00263	50		 push	 eax
  00264	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00267	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0026d	83 c2 14	 add	 edx, 20			; 00000014H
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00276	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@zipCloseFi:

; 1628 : 
; 1629 :     /// set internal file attributes field
; 1630 :     if (zi->ci.stream.data_type == Z_ASCII)

  00279	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  0027c	83 78 6c 01	 cmp	 DWORD PTR [eax+108], 1
  00280	75 1b		 jne	 SHORT $LN26@zipCloseFi

; 1631 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  00282	6a 02		 push	 2
  00284	6a 00		 push	 0
  00286	6a 01		 push	 1
  00288	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0028b	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00291	83 c2 24	 add	 edx, 36			; 00000024H
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0029a	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@zipCloseFi:

; 1632 : 
; 1633 :     if(uncompressed_size >= 0xffffffff)

  0029d	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  002a1	77 06		 ja	 SHORT $LN52@zipCloseFi
  002a3	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  002a7	72 20		 jb	 SHORT $LN25@zipCloseFi
$LN52@zipCloseFi:

; 1634 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  002a9	6a 04		 push	 4
  002ab	8b 45 e4	 mov	 eax, DWORD PTR _invalidValue$[ebp]
  002ae	33 c9		 xor	 ecx, ecx
  002b0	51		 push	 ecx
  002b1	50		 push	 eax
  002b2	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  002b5	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  002bb	83 c0 18	 add	 eax, 24			; 00000018H
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002c4	83 c4 10	 add	 esp, 16			; 00000010H

; 1635 :     else

  002c7	eb 1f		 jmp	 SHORT $LN24@zipCloseFi
$LN25@zipCloseFi:

; 1636 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  002c9	6a 04		 push	 4
  002cb	8b 4d 10	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp+4]
  002ce	51		 push	 ecx
  002cf	8b 55 0c	 mov	 edx, DWORD PTR _uncompressed_size$[ebp]
  002d2	52		 push	 edx
  002d3	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  002d6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002dc	83 c1 18	 add	 ecx, 24			; 00000018H
  002df	51		 push	 ecx
  002e0	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002e5	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@zipCloseFi:

; 1637 : 
; 1638 :     // Add ZIP64 extra info field for uncompressed size
; 1639 :     if(uncompressed_size >= 0xffffffff)

  002e8	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  002ec	77 06		 ja	 SHORT $LN53@zipCloseFi
  002ee	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  002f2	72 0b		 jb	 SHORT $LN23@zipCloseFi
$LN53@zipCloseFi:

; 1640 :       datasize += 8;

  002f4	0f bf 55 fc	 movsx	 edx, WORD PTR _datasize$[ebp]
  002f8	83 c2 08	 add	 edx, 8
  002fb	66 89 55 fc	 mov	 WORD PTR _datasize$[ebp], dx
$LN23@zipCloseFi:

; 1641 : 
; 1642 :     // Add ZIP64 extra info field for compressed size
; 1643 :     if(compressed_size >= 0xffffffff)

  002ff	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  00303	77 06		 ja	 SHORT $LN54@zipCloseFi
  00305	83 7d f0 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  00309	72 0b		 jb	 SHORT $LN22@zipCloseFi
$LN54@zipCloseFi:

; 1644 :       datasize += 8;

  0030b	0f bf 45 fc	 movsx	 eax, WORD PTR _datasize$[ebp]
  0030f	83 c0 08	 add	 eax, 8
  00312	66 89 45 fc	 mov	 WORD PTR _datasize$[ebp], ax
$LN22@zipCloseFi:

; 1645 : 
; 1646 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1647 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00316	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00319	89 4d c8	 mov	 DWORD PTR tv477[ebp], ecx
  0031c	8b 55 c8	 mov	 edx, DWORD PTR tv477[ebp]
  0031f	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00326	77 0c		 ja	 SHORT $LN55@zipCloseFi
  00328	8b 45 c8	 mov	 eax, DWORD PTR tv477[ebp]
  0032b	83 b8 80 00 00
	00 ff		 cmp	 DWORD PTR [eax+128], -1
  00332	72 0b		 jb	 SHORT $LN21@zipCloseFi
$LN55@zipCloseFi:

; 1648 :       datasize += 8;

  00334	0f bf 4d fc	 movsx	 ecx, WORD PTR _datasize$[ebp]
  00338	83 c1 08	 add	 ecx, 8
  0033b	66 89 4d fc	 mov	 WORD PTR _datasize$[ebp], cx
$LN21@zipCloseFi:

; 1649 : 
; 1650 :     if(datasize > 0)

  0033f	0f bf 55 fc	 movsx	 edx, WORD PTR _datasize$[ebp]
  00343	85 d2		 test	 edx, edx
  00345	0f 8e 80 01 00
	00		 jle	 $LN20@zipCloseFi

; 1651 :     {
; 1652 :       char* p = NULL;

  0034b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _p$80914[ebp], 0

; 1653 : 
; 1654 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00352	0f bf 45 fc	 movsx	 eax, WORD PTR _datasize$[ebp]
  00356	83 c0 04	 add	 eax, 4
  00359	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0035c	3b 81 94 00 00
	00		 cmp	 eax, DWORD PTR [ecx+148]
  00362	76 0a		 jbe	 SHORT $LN19@zipCloseFi

; 1655 :       {
; 1656 :         // we can not write more data to the buffer that we have room for.
; 1657 :         return ZIP_BADZIPFILE;

  00364	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00369	e9 8d 03 00 00	 jmp	 $LN46@zipCloseFi
$LN19@zipCloseFi:

; 1658 :       }
; 1659 : 
; 1660 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  0036e	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00371	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00377	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0037a	03 81 90 00 00
	00		 add	 eax, DWORD PTR [ecx+144]
  00380	89 45 d8	 mov	 DWORD PTR _p$80914[ebp], eax

; 1661 : 
; 1662 :       // Add Extra Information Header for 'ZIP64 information'
; 1663 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00383	6a 02		 push	 2
  00385	6a 00		 push	 0
  00387	6a 01		 push	 1
  00389	8b 55 d8	 mov	 edx, DWORD PTR _p$80914[ebp]
  0038c	52		 push	 edx
  0038d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00392	83 c4 10	 add	 esp, 16			; 00000010H

; 1664 :       p += 2;

  00395	8b 45 d8	 mov	 eax, DWORD PTR _p$80914[ebp]
  00398	83 c0 02	 add	 eax, 2
  0039b	89 45 d8	 mov	 DWORD PTR _p$80914[ebp], eax

; 1665 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  0039e	6a 02		 push	 2
  003a0	0f bf 45 fc	 movsx	 eax, WORD PTR _datasize$[ebp]
  003a4	99		 cdq
  003a5	52		 push	 edx
  003a6	50		 push	 eax
  003a7	8b 4d d8	 mov	 ecx, DWORD PTR _p$80914[ebp]
  003aa	51		 push	 ecx
  003ab	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003b0	83 c4 10	 add	 esp, 16			; 00000010H

; 1666 :       p += 2;

  003b3	8b 55 d8	 mov	 edx, DWORD PTR _p$80914[ebp]
  003b6	83 c2 02	 add	 edx, 2
  003b9	89 55 d8	 mov	 DWORD PTR _p$80914[ebp], edx

; 1667 : 
; 1668 :       if(uncompressed_size >= 0xffffffff)

  003bc	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  003c0	77 06		 ja	 SHORT $LN56@zipCloseFi
  003c2	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  003c6	72 1f		 jb	 SHORT $LN18@zipCloseFi
$LN56@zipCloseFi:

; 1669 :       {
; 1670 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  003c8	6a 08		 push	 8
  003ca	8b 45 10	 mov	 eax, DWORD PTR _uncompressed_size$[ebp+4]
  003cd	50		 push	 eax
  003ce	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
  003d1	51		 push	 ecx
  003d2	8b 55 d8	 mov	 edx, DWORD PTR _p$80914[ebp]
  003d5	52		 push	 edx
  003d6	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003db	83 c4 10	 add	 esp, 16			; 00000010H

; 1671 :         p += 8;

  003de	8b 45 d8	 mov	 eax, DWORD PTR _p$80914[ebp]
  003e1	83 c0 08	 add	 eax, 8
  003e4	89 45 d8	 mov	 DWORD PTR _p$80914[ebp], eax
$LN18@zipCloseFi:

; 1672 :       }
; 1673 : 
; 1674 :       if(compressed_size >= 0xffffffff)

  003e7	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  003eb	77 06		 ja	 SHORT $LN57@zipCloseFi
  003ed	83 7d f0 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  003f1	72 1f		 jb	 SHORT $LN17@zipCloseFi
$LN57@zipCloseFi:

; 1675 :       {
; 1676 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  003f3	6a 08		 push	 8
  003f5	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$[ebp+4]
  003f8	51		 push	 ecx
  003f9	8b 55 f0	 mov	 edx, DWORD PTR _compressed_size$[ebp]
  003fc	52		 push	 edx
  003fd	8b 45 d8	 mov	 eax, DWORD PTR _p$80914[ebp]
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00406	83 c4 10	 add	 esp, 16			; 00000010H

; 1677 :         p += 8;

  00409	8b 4d d8	 mov	 ecx, DWORD PTR _p$80914[ebp]
  0040c	83 c1 08	 add	 ecx, 8
  0040f	89 4d d8	 mov	 DWORD PTR _p$80914[ebp], ecx
$LN17@zipCloseFi:

; 1678 :       }
; 1679 : 
; 1680 :       if(zi->ci.pos_local_header >= 0xffffffff)

  00412	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00415	89 55 c4	 mov	 DWORD PTR tv514[ebp], edx
  00418	8b 45 c4	 mov	 eax, DWORD PTR tv514[ebp]
  0041b	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00422	77 0c		 ja	 SHORT $LN58@zipCloseFi
  00424	8b 4d c4	 mov	 ecx, DWORD PTR tv514[ebp]
  00427	83 b9 80 00 00
	00 ff		 cmp	 DWORD PTR [ecx+128], -1
  0042e	72 28		 jb	 SHORT $LN16@zipCloseFi
$LN58@zipCloseFi:

; 1681 :       {
; 1682 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  00430	6a 08		 push	 8
  00432	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00435	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0043b	50		 push	 eax
  0043c	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  00442	51		 push	 ecx
  00443	8b 55 d8	 mov	 edx, DWORD PTR _p$80914[ebp]
  00446	52		 push	 edx
  00447	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0044c	83 c4 10	 add	 esp, 16			; 00000010H

; 1683 :         p += 8;

  0044f	8b 45 d8	 mov	 eax, DWORD PTR _p$80914[ebp]
  00452	83 c0 08	 add	 eax, 8
  00455	89 45 d8	 mov	 DWORD PTR _p$80914[ebp], eax
$LN16@zipCloseFi:

; 1684 :       }
; 1685 : 
; 1686 :       // Update how much extra free space we got in the memory buffer
; 1687 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1688 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1689 :       zi->ci.size_centralExtraFree -= datasize + 4;

  00458	0f bf 4d fc	 movsx	 ecx, WORD PTR _datasize$[ebp]
  0045c	83 c1 04	 add	 ecx, 4
  0045f	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00462	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00468	2b c1		 sub	 eax, ecx
  0046a	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0046d	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 1690 :       zi->ci.size_centralheader += datasize + 4;

  00473	0f bf 55 fc	 movsx	 edx, WORD PTR _datasize$[ebp]
  00477	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  0047a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00480	8d 54 0a 04	 lea	 edx, DWORD PTR [edx+ecx+4]
  00484	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00487	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 1691 : 
; 1692 :       // Update the extra info size field
; 1693 :       zi->ci.size_centralExtra += datasize + 4;

  0048d	0f bf 4d fc	 movsx	 ecx, WORD PTR _datasize$[ebp]
  00491	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00494	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0049a	8d 4c 01 04	 lea	 ecx, DWORD PTR [ecx+eax+4]
  0049e	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  004a1	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 1694 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  004a7	6a 02		 push	 2
  004a9	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  004ac	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  004b2	33 d2		 xor	 edx, edx
  004b4	52		 push	 edx
  004b5	51		 push	 ecx
  004b6	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  004b9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  004bf	83 c1 1e	 add	 ecx, 30			; 0000001eH
  004c2	51		 push	 ecx
  004c3	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  004c8	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@zipCloseFi:

; 1695 :     }
; 1696 : 
; 1697 :     if (err==ZIP_OK)

  004cb	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  004cf	75 26		 jne	 SHORT $LN15@zipCloseFi

; 1698 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  004d1	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  004d4	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  004da	50		 push	 eax
  004db	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  004de	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  004e4	52		 push	 edx
  004e5	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  004e8	83 c0 30	 add	 eax, 48			; 00000030H
  004eb	50		 push	 eax
  004ec	e8 00 00 00 00	 call	 _add_data_in_datablock
  004f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f4	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN15@zipCloseFi:

; 1699 : 
; 1700 :     free(zi->ci.central_header);

  004f7	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  004fa	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00500	52		 push	 edx
  00501	e8 00 00 00 00	 call	 _free
  00506	83 c4 04	 add	 esp, 4

; 1701 : 
; 1702 :     if (err==ZIP_OK)

  00509	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0050d	0f 85 b7 01 00
	00		 jne	 $LN14@zipCloseFi

; 1703 :     {
; 1704 :         // Update the LocalFileHeader with the new values.
; 1705 : 
; 1706 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00513	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00516	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00519	51		 push	 ecx
  0051a	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0051d	52		 push	 edx
  0051e	e8 00 00 00 00	 call	 _call_ztell64
  00523	83 c4 08	 add	 esp, 8
  00526	89 45 d0	 mov	 DWORD PTR _cur_pos_inzip$80925[ebp], eax
  00529	89 55 d4	 mov	 DWORD PTR _cur_pos_inzip$80925[ebp+4], edx

; 1707 : 
; 1708 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0052c	6a 00		 push	 0
  0052e	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00531	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00537	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0053a	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  00540	83 d2 00	 adc	 edx, 0
  00543	52		 push	 edx
  00544	51		 push	 ecx
  00545	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00548	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0054b	51		 push	 ecx
  0054c	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0054f	52		 push	 edx
  00550	e8 00 00 00 00	 call	 _call_zseek64
  00555	83 c4 14	 add	 esp, 20			; 00000014H
  00558	85 c0		 test	 eax, eax
  0055a	74 07		 je	 SHORT $LN13@zipCloseFi

; 1709 :             err = ZIP_ERRNO;

  0055c	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@zipCloseFi:

; 1710 : 
; 1711 :         if (err==ZIP_OK)

  00563	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00567	75 1f		 jne	 SHORT $LN12@zipCloseFi

; 1712 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  00569	6a 04		 push	 4
  0056b	8b 45 14	 mov	 eax, DWORD PTR _crc32$[ebp]
  0056e	33 c9		 xor	 ecx, ecx
  00570	51		 push	 ecx
  00571	50		 push	 eax
  00572	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00575	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00578	50		 push	 eax
  00579	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0057c	51		 push	 ecx
  0057d	e8 00 00 00 00	 call	 _zip64local_putValue
  00582	83 c4 14	 add	 esp, 20			; 00000014H
  00585	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN12@zipCloseFi:

; 1713 : 
; 1714 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  00588	83 7d 10 00	 cmp	 DWORD PTR _uncompressed_size$[ebp+4], 0
  0058c	77 18		 ja	 SHORT $LN10@zipCloseFi
  0058e	72 06		 jb	 SHORT $LN59@zipCloseFi
  00590	83 7d 0c ff	 cmp	 DWORD PTR _uncompressed_size$[ebp], -1
  00594	73 10		 jae	 SHORT $LN10@zipCloseFi
$LN59@zipCloseFi:
  00596	83 7d f4 00	 cmp	 DWORD PTR _compressed_size$[ebp+4], 0
  0059a	77 0a		 ja	 SHORT $LN10@zipCloseFi
  0059c	83 7d f0 ff	 cmp	 DWORD PTR _compressed_size$[ebp], -1
  005a0	0f 82 b0 00 00
	00		 jb	 $LN11@zipCloseFi
$LN10@zipCloseFi:

; 1715 :         {
; 1716 :           if(zi->ci.pos_zip64extrainfo > 0)

  005a6	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  005a9	89 55 c0	 mov	 DWORD PTR tv580[ebp], edx
  005ac	8b 45 c0	 mov	 eax, DWORD PTR tv580[ebp]
  005af	83 b8 bc 00 01
	00 00		 cmp	 DWORD PTR [eax+65724], 0
  005b6	77 10		 ja	 SHORT $LN61@zipCloseFi
  005b8	8b 4d c0	 mov	 ecx, DWORD PTR tv580[ebp]
  005bb	83 b9 b8 00 01
	00 00		 cmp	 DWORD PTR [ecx+65720], 0
  005c2	0f 86 85 00 00
	00		 jbe	 $LN9@zipCloseFi
$LN61@zipCloseFi:

; 1717 :           {
; 1718 :             // Update the size in the ZIP64 extended field.
; 1719 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  005c8	6a 00		 push	 0
  005ca	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  005cd	8b 82 b8 00 01
	00		 mov	 eax, DWORD PTR [edx+65720]
  005d3	83 c0 04	 add	 eax, 4
  005d6	8b 8a bc 00 01
	00		 mov	 ecx, DWORD PTR [edx+65724]
  005dc	83 d1 00	 adc	 ecx, 0
  005df	51		 push	 ecx
  005e0	50		 push	 eax
  005e1	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  005e4	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  005e7	50		 push	 eax
  005e8	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  005eb	51		 push	 ecx
  005ec	e8 00 00 00 00	 call	 _call_zseek64
  005f1	83 c4 14	 add	 esp, 20			; 00000014H
  005f4	85 c0		 test	 eax, eax
  005f6	74 07		 je	 SHORT $LN8@zipCloseFi

; 1720 :               err = ZIP_ERRNO;

  005f8	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@zipCloseFi:

; 1721 : 
; 1722 :             if (err==ZIP_OK) /* compressed size, unknown */

  005ff	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00603	75 20		 jne	 SHORT $LN7@zipCloseFi

; 1723 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  00605	6a 08		 push	 8
  00607	8b 55 10	 mov	 edx, DWORD PTR _uncompressed_size$[ebp+4]
  0060a	52		 push	 edx
  0060b	8b 45 0c	 mov	 eax, DWORD PTR _uncompressed_size$[ebp]
  0060e	50		 push	 eax
  0060f	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00612	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00615	52		 push	 edx
  00616	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00619	50		 push	 eax
  0061a	e8 00 00 00 00	 call	 _zip64local_putValue
  0061f	83 c4 14	 add	 esp, 20			; 00000014H
  00622	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN7@zipCloseFi:

; 1724 : 
; 1725 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  00625	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00629	75 20		 jne	 SHORT $LN6@zipCloseFi

; 1726 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  0062b	6a 08		 push	 8
  0062d	8b 4d f4	 mov	 ecx, DWORD PTR _compressed_size$[ebp+4]
  00630	51		 push	 ecx
  00631	8b 55 f0	 mov	 edx, DWORD PTR _compressed_size$[ebp]
  00634	52		 push	 edx
  00635	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00638	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0063b	51		 push	 ecx
  0063c	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  0063f	52		 push	 edx
  00640	e8 00 00 00 00	 call	 _zip64local_putValue
  00645	83 c4 14	 add	 esp, 20			; 00000014H
  00648	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN6@zipCloseFi:

; 1727 :           }
; 1728 :           else

  0064b	eb 07		 jmp	 SHORT $LN5@zipCloseFi
$LN9@zipCloseFi:

; 1729 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  0064d	c7 45 ec 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN5@zipCloseFi:

; 1730 :         }
; 1731 :         else

  00654	eb 4c		 jmp	 SHORT $LN4@zipCloseFi
$LN11@zipCloseFi:

; 1732 :         {
; 1733 :           if (err==ZIP_OK) /* compressed size, unknown */

  00656	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0065a	75 20		 jne	 SHORT $LN3@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  0065c	6a 04		 push	 4
  0065e	8b 45 f4	 mov	 eax, DWORD PTR _compressed_size$[ebp+4]
  00661	50		 push	 eax
  00662	8b 4d f0	 mov	 ecx, DWORD PTR _compressed_size$[ebp]
  00665	51		 push	 ecx
  00666	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  00669	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0066c	50		 push	 eax
  0066d	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00670	51		 push	 ecx
  00671	e8 00 00 00 00	 call	 _zip64local_putValue
  00676	83 c4 14	 add	 esp, 20			; 00000014H
  00679	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zipCloseFi:

; 1735 : 
; 1736 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  0067c	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00680	75 20		 jne	 SHORT $LN4@zipCloseFi

; 1737 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  00682	6a 04		 push	 4
  00684	8b 55 10	 mov	 edx, DWORD PTR _uncompressed_size$[ebp+4]
  00687	52		 push	 edx
  00688	8b 45 0c	 mov	 eax, DWORD PTR _uncompressed_size$[ebp]
  0068b	50		 push	 eax
  0068c	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0068f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00692	52		 push	 edx
  00693	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 _zip64local_putValue
  0069c	83 c4 14	 add	 esp, 20			; 00000014H
  0069f	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zipCloseFi:

; 1738 :         }
; 1739 : 
; 1740 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  006a2	6a 00		 push	 0
  006a4	8b 4d d4	 mov	 ecx, DWORD PTR _cur_pos_inzip$80925[ebp+4]
  006a7	51		 push	 ecx
  006a8	8b 55 d0	 mov	 edx, DWORD PTR _cur_pos_inzip$80925[ebp]
  006ab	52		 push	 edx
  006ac	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  006af	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  006b2	51		 push	 ecx
  006b3	8b 55 e8	 mov	 edx, DWORD PTR _zi$[ebp]
  006b6	52		 push	 edx
  006b7	e8 00 00 00 00	 call	 _call_zseek64
  006bc	83 c4 14	 add	 esp, 20			; 00000014H
  006bf	85 c0		 test	 eax, eax
  006c1	74 07		 je	 SHORT $LN14@zipCloseFi

; 1741 :             err = ZIP_ERRNO;

  006c3	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@zipCloseFi:

; 1742 :     }
; 1743 : 
; 1744 :     zi->number_entry ++;

  006ca	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  006cd	8b 88 f8 00 01
	00		 mov	 ecx, DWORD PTR [eax+65784]
  006d3	83 c1 01	 add	 ecx, 1
  006d6	8b 90 fc 00 01
	00		 mov	 edx, DWORD PTR [eax+65788]
  006dc	83 d2 00	 adc	 edx, 0
  006df	8b 45 e8	 mov	 eax, DWORD PTR _zi$[ebp]
  006e2	89 88 f8 00 01
	00		 mov	 DWORD PTR [eax+65784], ecx
  006e8	89 90 fc 00 01
	00		 mov	 DWORD PTR [eax+65788], edx

; 1745 :     zi->in_opened_file_inzip = 0;

  006ee	8b 4d e8	 mov	 ecx, DWORD PTR _zi$[ebp]
  006f1	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 1746 : 
; 1747 :     return err;

  006f8	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]
$LN46@zipCloseFi:

; 1748 : }

  006fb	8b e5		 mov	 esp, ebp
  006fd	5d		 pop	 ebp
  006fe	c2 10 00	 ret	 16			; 00000010H
_zipCloseFileInZipRaw64@16 ENDP
_TEXT	ENDS
PUBLIC	_zipCloseFileInZipRaw@12
; Function compile flags: /Odtp
;	COMDAT _zipCloseFileInZipRaw@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw@12 PROC				; COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1511 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00003	8b 45 10	 mov	 eax, DWORD PTR _crc32$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
  0000a	33 d2		 xor	 edx, edx
  0000c	52		 push	 edx
  0000d	51		 push	 ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw64@16

; 1512 : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
_zipCloseFileInZipRaw@12 ENDP
_TEXT	ENDS
PUBLIC	_zipWriteInFileInZip@12
; Function compile flags: /Odtp
;	COMDAT _zipWriteInFileInZip@12
_TEXT	SEGMENT
_i$80850 = -24						; size = 4
_copy_this$80849 = -20					; size = 4
_bBreak$80846 = -16					; size = 4
_uTotalOutBefore$80844 = -12				; size = 4
_zi$ = -8						; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip@12 PROC				; COMDAT

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 1404 :     zip64_internal* zi;
; 1405 :     int err=ZIP_OK;

  00007	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1406 : 
; 1407 :     if (file == NULL)

  0000e	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00012	75 0a		 jne	 SHORT $LN15@zipWriteIn

; 1408 :         return ZIP_PARAMERROR;

  00014	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00019	e9 d5 01 00 00	 jmp	 $LN16@zipWriteIn
$LN15@zipWriteIn:

; 1409 :     zi = (zip64_internal*)file;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _zi$[ebp], eax

; 1410 : 
; 1411 :     if (zi->in_opened_file_inzip == 0)

  00024	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00027	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0002b	75 0a		 jne	 SHORT $LN14@zipWriteIn

; 1412 :         return ZIP_PARAMERROR;

  0002d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00032	e9 bc 01 00 00	 jmp	 $LN16@zipWriteIn
$LN14@zipWriteIn:

; 1413 : 
; 1414 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00037	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00042	8b 91 a8 00 01
	00		 mov	 edx, DWORD PTR [ecx+65704]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _crc32@12
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00051	89 81 a8 00 01
	00		 mov	 DWORD PTR [ecx+65704], eax

; 1415 : 
; 1416 : #ifdef HAVE_BZIP2
; 1417 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1418 :     {
; 1419 :       zi->ci.bstream.next_in = (void*)buf;
; 1420 :       zi->ci.bstream.avail_in = len;
; 1421 :       err = BZ_RUN_OK;
; 1422 : 
; 1423 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1424 :       {
; 1425 :         if (zi->ci.bstream.avail_out == 0)
; 1426 :         {
; 1427 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1428 :             err = ZIP_ERRNO;
; 1429 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1430 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1431 :         }
; 1432 : 
; 1433 : 
; 1434 :         if(err != BZ_RUN_OK)
; 1435 :           break;
; 1436 : 
; 1437 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1438 :         {
; 1439 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1440 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1441 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1442 : 
; 1443 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1444 :         }
; 1445 :       }
; 1446 : 
; 1447 :       if(err == BZ_RUN_OK)
; 1448 :         err = ZIP_OK;
; 1449 :     }
; 1450 :     else
; 1451 : #endif
; 1452 :     {
; 1453 :       zi->ci.stream.next_in = (Bytef*)buf;

  00057	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  0005a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0005d	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1454 :       zi->ci.stream.avail_in = len;

  00060	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00063	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00066	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN13@zipWriteIn:

; 1455 : 
; 1456 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00069	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006d	0f 85 7d 01 00
	00		 jne	 $LN12@zipWriteIn
  00073	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00076	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0007a	0f 86 70 01 00
	00		 jbe	 $LN12@zipWriteIn

; 1457 :       {
; 1458 :           if (zi->ci.stream.avail_out == 0)

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00083	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00087	75 31		 jne	 SHORT $LN11@zipWriteIn

; 1459 :           {
; 1460 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00089	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00092	83 c4 04	 add	 esp, 4
  00095	83 f8 ff	 cmp	 eax, -1
  00098	75 07		 jne	 SHORT $LN10@zipWriteIn

; 1461 :                   err = ZIP_ERRNO;

  0009a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@zipWriteIn:

; 1462 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  000a4	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1463 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000ae	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  000b4	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  000b7	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
$LN11@zipWriteIn:

; 1464 :           }
; 1465 : 
; 1466 : 
; 1467 :           if(err != ZIP_OK)

  000ba	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000be	74 05		 je	 SHORT $LN9@zipWriteIn

; 1468 :               break;

  000c0	e9 2b 01 00 00	 jmp	 $LN12@zipWriteIn
$LN9@zipWriteIn:

; 1469 : 
; 1470 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000c5	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  000c8	83 b8 9c 00 00
	00 08		 cmp	 DWORD PTR [eax+156], 8
  000cf	75 5b		 jne	 SHORT $LN8@zipWriteIn
  000d1	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000d4	83 b9 a0 00 00
	00 00		 cmp	 DWORD PTR [ecx+160], 0
  000db	75 4f		 jne	 SHORT $LN8@zipWriteIn

; 1471 :           {
; 1472 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  000dd	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  000e0	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000e3	89 45 f4	 mov	 DWORD PTR _uTotalOutBefore$80844[ebp], eax

; 1473 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  000e6	6a 00		 push	 0
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000eb	83 c1 40	 add	 ecx, 64			; 00000040H
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 _deflate@8
  000f4	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1474 :               if(uTotalOutBefore > zi->ci.stream.total_out)

  000f7	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  000fa	8b 45 f4	 mov	 eax, DWORD PTR _uTotalOutBefore$80844[ebp]
  000fd	3b 42 54	 cmp	 eax, DWORD PTR [edx+84]
  00100	76 10		 jbe	 SHORT $LN7@zipWriteIn

; 1475 :               {
; 1476 :                 int bBreak = 0;

  00102	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bBreak$80846[ebp], 0

; 1477 :                 bBreak++;

  00109	8b 4d f0	 mov	 ecx, DWORD PTR _bBreak$80846[ebp]
  0010c	83 c1 01	 add	 ecx, 1
  0010f	89 4d f0	 mov	 DWORD PTR _bBreak$80846[ebp], ecx
$LN7@zipWriteIn:

; 1478 :               }
; 1479 : 
; 1480 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00112	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00115	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00118	2b 45 f4	 sub	 eax, DWORD PTR _uTotalOutBefore$80844[ebp]
  0011b	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0011e	03 41 7c	 add	 eax, DWORD PTR [ecx+124]
  00121	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00124	89 42 7c	 mov	 DWORD PTR [edx+124], eax

; 1481 :           }
; 1482 :           else

  00127	e9 bf 00 00 00	 jmp	 $LN6@zipWriteIn
$LN8@zipWriteIn:

; 1483 :           {
; 1484 :               uInt copy_this,i;
; 1485 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  0012c	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00132	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00135	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  00138	73 0b		 jae	 SHORT $LN5@zipWriteIn

; 1486 :                   copy_this = zi->ci.stream.avail_in;

  0013a	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  0013d	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00140	89 4d ec	 mov	 DWORD PTR _copy_this$80849[ebp], ecx

; 1487 :               else

  00143	eb 09		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1488 :                   copy_this = zi->ci.stream.avail_out;

  00145	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00148	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0014b	89 45 ec	 mov	 DWORD PTR _copy_this$80849[ebp], eax
$LN4@zipWriteIn:

; 1489 : 
; 1490 :               for (i = 0; i < copy_this; i++)

  0014e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$80850[ebp], 0
  00155	eb 09		 jmp	 SHORT $LN3@zipWriteIn
$LN2@zipWriteIn:
  00157	8b 4d e8	 mov	 ecx, DWORD PTR _i$80850[ebp]
  0015a	83 c1 01	 add	 ecx, 1
  0015d	89 4d e8	 mov	 DWORD PTR _i$80850[ebp], ecx
$LN3@zipWriteIn:
  00160	8b 55 e8	 mov	 edx, DWORD PTR _i$80850[ebp]
  00163	3b 55 ec	 cmp	 edx, DWORD PTR _copy_this$80849[ebp]
  00166	73 1a		 jae	 SHORT $LN1@zipWriteIn

; 1491 :                   *(((char*)zi->ci.stream.next_out)+i) =
; 1492 :                       *(((const char*)zi->ci.stream.next_in)+i);

  00168	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  0016b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0016e	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00171	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00174	8b 55 e8	 mov	 edx, DWORD PTR _i$80850[ebp]
  00177	8b 75 e8	 mov	 esi, DWORD PTR _i$80850[ebp]
  0017a	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  0017d	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00180	eb d5		 jmp	 SHORT $LN2@zipWriteIn
$LN1@zipWriteIn:

; 1493 :               {
; 1494 :                   zi->ci.stream.avail_in -= copy_this;

  00182	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00185	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00188	2b 45 ec	 sub	 eax, DWORD PTR _copy_this$80849[ebp]
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0018e	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1495 :                   zi->ci.stream.avail_out-= copy_this;

  00191	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00194	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00197	2b 45 ec	 sub	 eax, DWORD PTR _copy_this$80849[ebp]
  0019a	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0019d	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1496 :                   zi->ci.stream.next_in+= copy_this;

  001a0	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001a3	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  001a6	03 45 ec	 add	 eax, DWORD PTR _copy_this$80849[ebp]
  001a9	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001ac	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 1497 :                   zi->ci.stream.next_out+= copy_this;

  001af	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001b2	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  001b5	03 45 ec	 add	 eax, DWORD PTR _copy_this$80849[ebp]
  001b8	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001bb	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 1498 :                   zi->ci.stream.total_in+= copy_this;

  001be	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001c1	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  001c4	03 45 ec	 add	 eax, DWORD PTR _copy_this$80849[ebp]
  001c7	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001ca	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1499 :                   zi->ci.stream.total_out+= copy_this;

  001cd	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001d0	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001d3	03 45 ec	 add	 eax, DWORD PTR _copy_this$80849[ebp]
  001d6	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001d9	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1500 :                   zi->ci.pos_in_buffered_data += copy_this;

  001dc	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  001df	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  001e2	03 45 ec	 add	 eax, DWORD PTR _copy_this$80849[ebp]
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001e8	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$LN6@zipWriteIn:

; 1501 :               }
; 1502 :           }
; 1503 :       }// while(...)

  001eb	e9 79 fe ff ff	 jmp	 $LN13@zipWriteIn
$LN12@zipWriteIn:

; 1504 :     }
; 1505 : 
; 1506 :     return err;

  001f0	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN16@zipWriteIn:

; 1507 : }

  001f3	5e		 pop	 esi
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 0c 00	 ret	 12			; 0000000cH
_zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen64@8
; Function compile flags: /Odtp
;	COMDAT _zipOpen64@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen64@8 PROC					; COMDAT

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 0c	 mov	 eax, DWORD PTR _append$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _zipOpen3@16

; 956  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_zipOpen64@8 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen@8
; Function compile flags: /Odtp
;	COMDAT _zipOpen@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen@8 PROC						; COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 0c	 mov	 eax, DWORD PTR _append$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _zipOpen3@16

; 951  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_zipOpen@8 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen2_64@16
; Function compile flags: /Odtp
;	COMDAT _zipOpen2_64@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$80402 = -44		; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2_64@16 PROC					; COMDAT

; 933  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 934  :     if (pzlib_filefunc_def != NULL)

  00008	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  0000c	74 34		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000e	8b 75 14	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	8d 7d d4	 lea	 edi, DWORD PTR _zlib_filefunc64_32_def_fill$80402[ebp]
  00019	f3 a5		 rep movsd

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$80402[ebp+36], 0

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$80402[ebp+40], 0

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00029	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$80402[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00034	52		 push	 edx
  00035	8b 45 08	 mov	 eax, DWORD PTR _pathname$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _zipOpen3@16
  0003e	eb 15		 jmp	 SHORT $LN3@zipOpen2_6

; 941  :     }
; 942  :     else

  00040	eb 13		 jmp	 SHORT $LN3@zipOpen2_6
$LN2@zipOpen2_6:

; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00042	6a 00		 push	 0
  00044	8b 4d 10	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR _pathname$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _zipOpen3@16
$LN3@zipOpen2_6:

; 944  : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 10 00	 ret	 16			; 00000010H
_zipOpen2_64@16 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen2@16
; Function compile flags: /Odtp
;	COMDAT _zipOpen2@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$80388 = -44		; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc32_def$ = 20				; size = 4
_zipOpen2@16 PROC					; COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 922  :     if (pzlib_filefunc32_def != NULL)

  00006	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc32_def$[ebp], 0
  0000a	74 29		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000c	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$80388[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32
  00019	83 c4 08	 add	 esp, 8

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  0001c	8d 55 d4	 lea	 edx, DWORD PTR _zlib_filefunc64_32_def_fill$80388[ebp]
  0001f	52		 push	 edx
  00020	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _append$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 _zipOpen3@16
  00031	eb 15		 jmp	 SHORT $LN3@zipOpen2

; 927  :     }
; 928  :     else

  00033	eb 13		 jmp	 SHORT $LN3@zipOpen2
$LN2@zipOpen2:

; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00035	6a 00		 push	 0
  00037	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _append$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _zipOpen3@16
$LN3@zipOpen2:

; 930  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 10 00	 ret	 16			; 00000010H
_zipOpen2@16 ENDP
PUBLIC	_zipCloseFileInZip@4
; Function compile flags: /Odtp
;	COMDAT _zipCloseFileInZip@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip@4 PROC				; COMDAT

; 1751 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1752 :     return zipCloseFileInZipRaw (file,0,0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw@12

; 1753 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
_zipCloseFileInZip@4 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip4_64@76
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip4_64@76
_TEXT	SEGMENT
tv529 = -40						; size = 4
_bufHead$80604 = -36					; size = 12
_sizeHead$80605 = -24					; size = 4
_zi$ = -20						; size = 4
_size_filename$ = -16					; size = 4
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_size_comment$ = -4					; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zip64$ = 80						; size = 4
_zipOpenNewFileInZip4_64@76 PROC			; COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     (crcForCrypting);
; 1071 :     if (password != NULL)
; 1072 :         return ZIP_PARAMERROR;
; 1073 : #    endif
; 1074 : 
; 1075 :     if (file == NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN41@zipOpenNew

; 1076 :         return ZIP_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 27 07 00 00	 jmp	 $LN42@zipOpenNew
$LN41@zipOpenNew:

; 1077 : 
; 1078 : #ifdef HAVE_BZIP2
; 1079 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1080 :       return ZIP_PARAMERROR;
; 1081 : #else
; 1082 :     if ((method!=0) && (method!=Z_DEFLATED))

  0001d	83 7d 28 00	 cmp	 DWORD PTR _method$[ebp], 0
  00021	74 10		 je	 SHORT $LN40@zipOpenNew
  00023	83 7d 28 08	 cmp	 DWORD PTR _method$[ebp], 8
  00027	74 0a		 je	 SHORT $LN40@zipOpenNew

; 1083 :       return ZIP_PARAMERROR;

  00029	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002e	e9 11 07 00 00	 jmp	 $LN42@zipOpenNew
$LN40@zipOpenNew:

; 1084 : #endif
; 1085 : 
; 1086 :     zi = (zip64_internal*)file;

  00033	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00036	89 45 ec	 mov	 DWORD PTR _zi$[ebp], eax

; 1087 : 
; 1088 :     if (zi->in_opened_file_inzip == 1)

  00039	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0003c	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  00040	75 1a		 jne	 SHORT $LN39@zipOpenNew

; 1089 :     {
; 1090 :         err = zipCloseFileInZip (file);

  00042	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  0004b	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1091 :         if (err != ZIP_OK)

  0004e	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00052	74 08		 je	 SHORT $LN39@zipOpenNew

; 1092 :             return err;

  00054	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
  00057	e9 e8 06 00 00	 jmp	 $LN42@zipOpenNew
$LN39@zipOpenNew:

; 1093 :     }
; 1094 : 
; 1095 :     if (filename==NULL)

  0005c	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00060	75 07		 jne	 SHORT $LN37@zipOpenNew

; 1096 :         filename="-";

  00062	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
$LN37@zipOpenNew:

; 1097 : 
; 1098 :     if (comment==NULL)

  00069	83 7d 24 00	 cmp	 DWORD PTR _comment$[ebp], 0
  0006d	75 09		 jne	 SHORT $LN36@zipOpenNew

; 1099 :         size_comment = 0;

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _size_comment$[ebp], 0

; 1100 :     else

  00076	eb 0f		 jmp	 SHORT $LN35@zipOpenNew
$LN36@zipOpenNew:

; 1101 :         size_comment = (uInt)strlen(comment);

  00078	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _strlen
  00081	83 c4 04	 add	 esp, 4
  00084	89 45 fc	 mov	 DWORD PTR _size_comment$[ebp], eax
$LN35@zipOpenNew:

; 1102 : 
; 1103 :     size_filename = (uInt)strlen(filename);

  00087	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _strlen
  00090	83 c4 04	 add	 esp, 4
  00093	89 45 f0	 mov	 DWORD PTR _size_filename$[ebp], eax

; 1104 : 
; 1105 :     if (zipfi == NULL)

  00096	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  0009a	75 0f		 jne	 SHORT $LN34@zipOpenNew

; 1106 :         zi->ci.dosDate = 0;

  0009c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0009f	c7 82 a4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65700], 0

; 1107 :     else

  000a9	eb 2f		 jmp	 SHORT $LN33@zipOpenNew
$LN34@zipOpenNew:

; 1108 :     {
; 1109 :         if (zipfi->dosDate != 0)

  000ab	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  000ae	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000b2	74 11		 je	 SHORT $LN32@zipOpenNew

; 1110 :             zi->ci.dosDate = zipfi->dosDate;

  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b7	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  000ba	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000bd	89 81 a4 00 01
	00		 mov	 DWORD PTR [ecx+65700], eax

; 1111 :         else

  000c3	eb 15		 jmp	 SHORT $LN33@zipOpenNew
$LN32@zipOpenNew:

; 1112 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _zip64local_TmzDateToDosDate
  000ce	83 c4 04	 add	 esp, 4
  000d1	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  000d4	89 82 a4 00 01
	00		 mov	 DWORD PTR [edx+65700], eax
$LN33@zipOpenNew:

; 1113 :     }
; 1114 : 
; 1115 :     zi->ci.flag = flagBase;

  000da	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  000dd	8b 4d 4c	 mov	 ecx, DWORD PTR _flagBase$[ebp]
  000e0	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx

; 1116 :     if ((level==8) || (level==9))

  000e6	83 7d 2c 08	 cmp	 DWORD PTR _level$[ebp], 8
  000ea	74 06		 je	 SHORT $LN29@zipOpenNew
  000ec	83 7d 2c 09	 cmp	 DWORD PTR _level$[ebp], 9
  000f0	75 15		 jne	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1117 :       zi->ci.flag |= 2;

  000f2	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  000f5	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  000fb	83 c8 02	 or	 eax, 2
  000fe	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00101	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN30@zipOpenNew:

; 1118 :     if (level==2)

  00107	83 7d 2c 02	 cmp	 DWORD PTR _level$[ebp], 2
  0010b	75 15		 jne	 SHORT $LN28@zipOpenNew

; 1119 :       zi->ci.flag |= 4;

  0010d	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00110	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00116	83 c8 04	 or	 eax, 4
  00119	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0011c	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN28@zipOpenNew:

; 1120 :     if (level==1)

  00122	83 7d 2c 01	 cmp	 DWORD PTR _level$[ebp], 1
  00126	75 15		 jne	 SHORT $LN27@zipOpenNew

; 1121 :       zi->ci.flag |= 6;

  00128	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0012b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00131	83 c8 06	 or	 eax, 6
  00134	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00137	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN27@zipOpenNew:

; 1122 :     if (password != NULL)

  0013d	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  00141	74 15		 je	 SHORT $LN26@zipOpenNew

; 1123 :       zi->ci.flag |= 1;

  00143	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00146	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0014c	83 c8 01	 or	 eax, 1
  0014f	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00152	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
$LN26@zipOpenNew:

; 1124 : 
; 1125 :     zi->ci.crc32 = 0;

  00158	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0015b	c7 82 a8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65704], 0

; 1126 :     zi->ci.method = method;

  00165	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00168	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  0016b	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 1127 :     zi->ci.encrypt = 0;

  00171	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00174	c7 82 ac 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65708], 0

; 1128 :     zi->ci.stream_initialised = 0;

  0017e	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00181	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0

; 1129 :     zi->ci.pos_in_buffered_data = 0;

  00188	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0018b	c7 41 7c 00 00
	00 00		 mov	 DWORD PTR [ecx+124], 0

; 1130 :     zi->ci.raw = raw;

  00192	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00195	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  00198	89 82 a0 00 00
	00		 mov	 DWORD PTR [edx+160], eax

; 1131 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  0019e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a1	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001a4	52		 push	 edx
  001a5	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 _call_ztell64
  001ae	83 c4 08	 add	 esp, 8
  001b1	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001b4	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  001ba	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 1132 : 
; 1133 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  001c0	8b 55 20	 mov	 edx, DWORD PTR _size_extrafield_global$[ebp]
  001c3	8b 45 f0	 mov	 eax, DWORD PTR _size_filename$[ebp]
  001c6	8d 4c 10 2e	 lea	 ecx, DWORD PTR [eax+edx+46]
  001ca	03 4d fc	 add	 ecx, DWORD PTR _size_comment$[ebp]
  001cd	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001d0	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 1134 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  001d6	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001d9	c7 80 94 00 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+148], 32	; 00000020H

; 1135 : 
; 1136 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  001e3	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001e6	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  001ec	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001ef	03 90 94 00 00
	00		 add	 edx, DWORD PTR [eax+148]
  001f5	52		 push	 edx
  001f6	e8 00 00 00 00	 call	 _malloc
  001fb	83 c4 04	 add	 esp, 4
  001fe	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00201	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 1137 : 
; 1138 :     zi->ci.size_centralExtra = size_extrafield_global;

  00207	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0020a	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  0020d	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 1139 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  00213	6a 04		 push	 4
  00215	6a 00		 push	 0
  00217	68 50 4b 01 02	 push	 33639248		; 02014b50H
  0021c	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0021f	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00225	52		 push	 edx
  00226	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0022b	83 c4 10	 add	 esp, 16			; 00000010H

; 1140 :     /* version info */
; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  0022e	6a 02		 push	 2
  00230	8b 45 48	 mov	 eax, DWORD PTR _versionMadeBy$[ebp]
  00233	33 c9		 xor	 ecx, ecx
  00235	51		 push	 ecx
  00236	50		 push	 eax
  00237	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0023a	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00240	83 c0 04	 add	 eax, 4
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00249	83 c4 10	 add	 esp, 16			; 00000010H

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  0024c	6a 02		 push	 2
  0024e	6a 00		 push	 0
  00250	6a 14		 push	 20			; 00000014H
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00255	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0025b	83 c2 06	 add	 edx, 6
  0025e	52		 push	 edx
  0025f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00264	83 c4 10	 add	 esp, 16			; 00000010H

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  00267	6a 02		 push	 2
  00269	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0026c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00272	33 d2		 xor	 edx, edx
  00274	52		 push	 edx
  00275	51		 push	 ecx
  00276	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00279	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0027f	83 c1 08	 add	 ecx, 8
  00282	51		 push	 ecx
  00283	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00288	83 c4 10	 add	 esp, 16			; 00000010H

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  0028b	6a 02		 push	 2
  0028d	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00290	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00296	33 c9		 xor	 ecx, ecx
  00298	51		 push	 ecx
  00299	50		 push	 eax
  0029a	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0029d	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  002a3	83 c0 0a	 add	 eax, 10			; 0000000aH
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002ac	83 c4 10	 add	 esp, 16			; 00000010H

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  002af	6a 04		 push	 4
  002b1	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  002b4	8b 91 a4 00 01
	00		 mov	 edx, DWORD PTR [ecx+65700]
  002ba	33 c0		 xor	 eax, eax
  002bc	50		 push	 eax
  002bd	52		 push	 edx
  002be	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  002c1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  002c7	83 c2 0c	 add	 edx, 12			; 0000000cH
  002ca	52		 push	 edx
  002cb	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002d0	83 c4 10	 add	 esp, 16			; 00000010H

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  002d3	6a 04		 push	 4
  002d5	6a 00		 push	 0
  002d7	6a 00		 push	 0
  002d9	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  002dc	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002e2	83 c1 10	 add	 ecx, 16			; 00000010H
  002e5	51		 push	 ecx
  002e6	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002eb	83 c4 10	 add	 esp, 16			; 00000010H

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  002ee	6a 04		 push	 4
  002f0	6a 00		 push	 0
  002f2	6a 00		 push	 0
  002f4	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  002f7	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  002fd	83 c0 14	 add	 eax, 20			; 00000014H
  00300	50		 push	 eax
  00301	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00306	83 c4 10	 add	 esp, 16			; 00000010H

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00309	6a 04		 push	 4
  0030b	6a 00		 push	 0
  0030d	6a 00		 push	 0
  0030f	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00312	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00318	83 c2 18	 add	 edx, 24			; 00000018H
  0031b	52		 push	 edx
  0031c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00321	83 c4 10	 add	 esp, 16			; 00000010H

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00324	6a 02		 push	 2
  00326	8b 45 f0	 mov	 eax, DWORD PTR _size_filename$[ebp]
  00329	33 c9		 xor	 ecx, ecx
  0032b	51		 push	 ecx
  0032c	50		 push	 eax
  0032d	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00330	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00336	83 c0 1c	 add	 eax, 28			; 0000001cH
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0033f	83 c4 10	 add	 esp, 16			; 00000010H

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  00342	6a 02		 push	 2
  00344	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00347	33 d2		 xor	 edx, edx
  00349	52		 push	 edx
  0034a	51		 push	 ecx
  0034b	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0034e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00354	83 c1 1e	 add	 ecx, 30			; 0000001eH
  00357	51		 push	 ecx
  00358	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0035d	83 c4 10	 add	 esp, 16			; 00000010H

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00360	6a 02		 push	 2
  00362	8b 55 fc	 mov	 edx, DWORD PTR _size_comment$[ebp]
  00365	33 c0		 xor	 eax, eax
  00367	50		 push	 eax
  00368	52		 push	 edx
  00369	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0036c	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00372	83 c2 20	 add	 edx, 32			; 00000020H
  00375	52		 push	 edx
  00376	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0037b	83 c4 10	 add	 esp, 16			; 00000010H

; 1152 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0037e	6a 02		 push	 2
  00380	6a 00		 push	 0
  00382	6a 00		 push	 0
  00384	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00387	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0038d	83 c1 22	 add	 ecx, 34			; 00000022H
  00390	51		 push	 ecx
  00391	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 1153 : 
; 1154 :     if (zipfi==NULL)

  00399	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  0039d	75 1d		 jne	 SHORT $LN25@zipOpenNew

; 1155 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  0039f	6a 02		 push	 2
  003a1	6a 00		 push	 0
  003a3	6a 00		 push	 0
  003a5	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  003a8	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  003ae	83 c0 24	 add	 eax, 36			; 00000024H
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003b7	83 c4 10	 add	 esp, 16			; 00000010H

; 1156 :     else

  003ba	eb 21		 jmp	 SHORT $LN24@zipOpenNew
$LN25@zipOpenNew:

; 1157 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  003bc	6a 02		 push	 2
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  003c1	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  003c4	33 c0		 xor	 eax, eax
  003c6	50		 push	 eax
  003c7	52		 push	 edx
  003c8	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  003cb	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  003d1	83 c2 24	 add	 edx, 36			; 00000024H
  003d4	52		 push	 edx
  003d5	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003da	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@zipOpenNew:

; 1158 : 
; 1159 :     if (zipfi==NULL)

  003dd	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  003e1	75 1d		 jne	 SHORT $LN23@zipOpenNew

; 1160 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  003e3	6a 04		 push	 4
  003e5	6a 00		 push	 0
  003e7	6a 00		 push	 0
  003e9	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  003ec	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003f2	83 c1 26	 add	 ecx, 38			; 00000026H
  003f5	51		 push	 ecx
  003f6	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003fb	83 c4 10	 add	 esp, 16			; 00000010H

; 1161 :     else

  003fe	eb 21		 jmp	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1162 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  00400	6a 04		 push	 4
  00402	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00405	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00408	33 c9		 xor	 ecx, ecx
  0040a	51		 push	 ecx
  0040b	50		 push	 eax
  0040c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0040f	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00415	83 c0 26	 add	 eax, 38			; 00000026H
  00418	50		 push	 eax
  00419	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0041e	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@zipOpenNew:

; 1163 : 
; 1164 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00421	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00424	89 4d d8	 mov	 DWORD PTR tv529[ebp], ecx
  00427	8b 55 d8	 mov	 edx, DWORD PTR tv529[ebp]
  0042a	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00431	77 0c		 ja	 SHORT $LN44@zipOpenNew
  00433	8b 45 d8	 mov	 eax, DWORD PTR tv529[ebp]
  00436	83 b8 80 00 00
	00 ff		 cmp	 DWORD PTR [eax+128], -1
  0043d	72 1d		 jb	 SHORT $LN21@zipOpenNew
$LN44@zipOpenNew:

; 1165 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  0043f	6a 04		 push	 4
  00441	6a 00		 push	 0
  00443	6a ff		 push	 -1
  00445	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00448	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0044e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00451	52		 push	 edx
  00452	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00457	83 c4 10	 add	 esp, 16			; 00000010H

; 1166 :     else

  0045a	eb 33		 jmp	 SHORT $LN20@zipOpenNew
$LN21@zipOpenNew:

; 1167 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  0045c	6a 04		 push	 4
  0045e	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00461	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00467	33 d2		 xor	 edx, edx
  00469	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0046c	2b 88 f0 00 01
	00		 sub	 ecx, DWORD PTR [eax+65776]
  00472	1b 90 f4 00 01
	00		 sbb	 edx, DWORD PTR [eax+65780]
  00478	52		 push	 edx
  00479	51		 push	 ecx
  0047a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0047d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00483	83 c2 2a	 add	 edx, 42			; 0000002aH
  00486	52		 push	 edx
  00487	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@zipOpenNew:

; 1168 : 
; 1169 :     for (i=0;i<size_filename;i++)

  0048f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00496	eb 09		 jmp	 SHORT $LN19@zipOpenNew
$LN18@zipOpenNew:
  00498	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0049b	83 c0 01	 add	 eax, 1
  0049e	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN19@zipOpenNew:
  004a1	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  004a4	3b 4d f0	 cmp	 ecx, DWORD PTR _size_filename$[ebp]
  004a7	73 1a		 jae	 SHORT $LN17@zipOpenNew

; 1170 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  004a9	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  004ac	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  004b2	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  004b5	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  004b8	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  004bb	8a 09		 mov	 cl, BYTE PTR [ecx]
  004bd	88 4c 10 2e	 mov	 BYTE PTR [eax+edx+46], cl
  004c1	eb d5		 jmp	 SHORT $LN18@zipOpenNew
$LN17@zipOpenNew:

; 1171 : 
; 1172 :     for (i=0;i<size_extrafield_global;i++)

  004c3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004ca	eb 09		 jmp	 SHORT $LN16@zipOpenNew
$LN15@zipOpenNew:
  004cc	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  004cf	83 c2 01	 add	 edx, 1
  004d2	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN16@zipOpenNew:
  004d5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  004d8	3b 45 20	 cmp	 eax, DWORD PTR _size_extrafield_global$[ebp]
  004db	73 20		 jae	 SHORT $LN14@zipOpenNew

; 1173 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 1174 :               *(((const char*)extrafield_global)+i);

  004dd	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  004e0	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  004e6	8b 45 f0	 mov	 eax, DWORD PTR _size_filename$[ebp]
  004e9	8d 4c 02 2e	 lea	 ecx, DWORD PTR [edx+eax+46]
  004ed	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  004f0	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  004f3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  004f6	8a 12		 mov	 dl, BYTE PTR [edx]
  004f8	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004fb	eb cf		 jmp	 SHORT $LN15@zipOpenNew
$LN14@zipOpenNew:

; 1175 : 
; 1176 :     for (i=0;i<size_comment;i++)

  004fd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00504	eb 09		 jmp	 SHORT $LN13@zipOpenNew
$LN12@zipOpenNew:
  00506	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00509	83 c0 01	 add	 eax, 1
  0050c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@zipOpenNew:
  0050f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00512	3b 4d fc	 cmp	 ecx, DWORD PTR _size_comment$[ebp]
  00515	73 23		 jae	 SHORT $LN11@zipOpenNew

; 1177 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1178 :               size_extrafield_global+i) = *(comment+i);

  00517	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0051a	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00520	8b 4d f0	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  00523	8d 54 08 2e	 lea	 edx, DWORD PTR [eax+ecx+46]
  00527	03 55 20	 add	 edx, DWORD PTR _size_extrafield_global$[ebp]
  0052a	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0052d	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00530	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00533	8a 00		 mov	 al, BYTE PTR [eax]
  00535	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00538	eb cc		 jmp	 SHORT $LN12@zipOpenNew
$LN11@zipOpenNew:

; 1179 :     if (zi->ci.central_header == NULL)

  0053a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0053d	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [ecx+136], 0
  00544	75 0a		 jne	 SHORT $LN10@zipOpenNew

; 1180 :         return ZIP_INTERNALERROR;

  00546	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  0054b	e9 f4 01 00 00	 jmp	 $LN42@zipOpenNew
$LN10@zipOpenNew:

; 1181 : 
; 1182 :     zi->ci.zip64 = zip64;

  00550	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00553	8b 45 50	 mov	 eax, DWORD PTR _zip64$[ebp]
  00556	89 82 b0 00 01
	00		 mov	 DWORD PTR [edx+65712], eax

; 1183 :     zi->ci.totalCompressedData = 0;

  0055c	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0055f	c7 81 c0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [ecx+65728], 0
  00569	c7 81 c4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [ecx+65732], 0

; 1184 :     zi->ci.totalUncompressedData = 0;

  00573	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00576	c7 82 c8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65736], 0
  00580	c7 82 cc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65740], 0

; 1185 :     zi->ci.pos_zip64extrainfo = 0;

  0058a	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0058d	c7 80 b8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65720], 0
  00597	c7 80 bc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [eax+65724], 0

; 1186 : 
; 1187 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  005a1	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  005a4	51		 push	 ecx
  005a5	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  005a8	52		 push	 edx
  005a9	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  005ac	50		 push	 eax
  005ad	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  005b0	51		 push	 ecx
  005b1	e8 00 00 00 00	 call	 _Write_LocalFileHeader
  005b6	83 c4 10	 add	 esp, 16			; 00000010H
  005b9	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1188 : 
; 1189 : #ifdef HAVE_BZIP2
; 1190 :     zi->ci.bstream.avail_in = (uInt)0;
; 1191 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1192 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1193 :     zi->ci.bstream.total_in_hi32 = 0;
; 1194 :     zi->ci.bstream.total_in_lo32 = 0;
; 1195 :     zi->ci.bstream.total_out_hi32 = 0;
; 1196 :     zi->ci.bstream.total_out_lo32 = 0;
; 1197 : #endif
; 1198 : 
; 1199 :     zi->ci.stream.avail_in = (uInt)0;

  005bc	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  005bf	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 1200 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  005c6	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  005c9	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1201 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  005d0	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  005d3	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  005d9	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  005dc	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 1202 :     zi->ci.stream.total_in = 0;

  005df	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  005e2	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 1203 :     zi->ci.stream.total_out = 0;

  005e9	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  005ec	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 1204 :     zi->ci.stream.data_type = Z_BINARY;

  005f3	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  005f6	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 1205 : 
; 1206 : #ifdef HAVE_BZIP2
; 1207 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1208 : #else
; 1209 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  005fd	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00601	0f 85 88 00 00
	00		 jne	 $LN9@zipOpenNew
  00607	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0060a	83 b8 9c 00 00
	00 08		 cmp	 DWORD PTR [eax+156], 8
  00611	75 7c		 jne	 SHORT $LN9@zipOpenNew
  00613	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00616	83 b9 a0 00 00
	00 00		 cmp	 DWORD PTR [ecx+160], 0
  0061d	75 70		 jne	 SHORT $LN9@zipOpenNew

; 1210 : #endif
; 1211 :     {
; 1212 :         if(zi->ci.method == Z_DEFLATED)

  0061f	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00622	83 ba 9c 00 00
	00 08		 cmp	 DWORD PTR [edx+156], 8
  00629	75 64		 jne	 SHORT $LN9@zipOpenNew

; 1213 :         {
; 1214 :           zi->ci.stream.zalloc = (alloc_func)0;

  0062b	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0062e	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 1215 :           zi->ci.stream.zfree = (free_func)0;

  00635	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00638	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0

; 1216 :           zi->ci.stream.opaque = (voidpf)0;

  0063f	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00642	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0

; 1217 : 
; 1218 :           if (windowBits>0)

  00649	83 7d 34 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  0064d	7e 08		 jle	 SHORT $LN7@zipOpenNew

; 1219 :               windowBits = -windowBits;

  0064f	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00652	f7 d8		 neg	 eax
  00654	89 45 34	 mov	 DWORD PTR _windowBits$[ebp], eax
$LN7@zipOpenNew:

; 1220 : 
; 1221 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  00657	6a 38		 push	 56			; 00000038H
  00659	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  0065e	8b 4d 3c	 mov	 ecx, DWORD PTR _strategy$[ebp]
  00661	51		 push	 ecx
  00662	8b 55 38	 mov	 edx, DWORD PTR _memLevel$[ebp]
  00665	52		 push	 edx
  00666	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00669	50		 push	 eax
  0066a	6a 08		 push	 8
  0066c	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  0066f	51		 push	 ecx
  00670	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00673	83 c2 40	 add	 edx, 64			; 00000040H
  00676	52		 push	 edx
  00677	e8 00 00 00 00	 call	 _deflateInit2_@32
  0067c	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 1222 : 
; 1223 :           if (err==Z_OK)

  0067f	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00683	75 0a		 jne	 SHORT $LN9@zipOpenNew

; 1224 :               zi->ci.stream_initialised = Z_DEFLATED;

  00685	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00688	c7 40 78 08 00
	00 00		 mov	 DWORD PTR [eax+120], 8
$LN9@zipOpenNew:

; 1225 :         }
; 1226 :         else if(zi->ci.method == Z_BZIP2ED)
; 1227 :         {
; 1228 : #ifdef HAVE_BZIP2
; 1229 :             // Init BZip stuff here
; 1230 :           zi->ci.bstream.bzalloc = 0;
; 1231 :           zi->ci.bstream.bzfree = 0;
; 1232 :           zi->ci.bstream.opaque = (voidpf)0;
; 1233 : 
; 1234 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1235 :           if(err == BZ_OK)
; 1236 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1237 : #endif
; 1238 :         }
; 1239 : 
; 1240 :     }
; 1241 : 
; 1242 : #    ifndef NOCRYPT
; 1243 :     zi->ci.crypt_header_size = 0;

  0068f	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00692	c7 82 e0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [edx+65760], 0

; 1244 :     if ((err==Z_OK) && (password != NULL))

  0069c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  006a0	0f 85 8b 00 00
	00		 jne	 $LN3@zipOpenNew
  006a6	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  006aa	0f 84 81 00 00
	00		 je	 $LN3@zipOpenNew

; 1245 :     {
; 1246 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1247 :         unsigned int sizeHead;
; 1248 :         zi->ci.encrypt = 1;

  006b0	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  006b3	c7 80 ac 00 01
	00 01 00 00 00	 mov	 DWORD PTR [eax+65708], 1

; 1249 :         zi->ci.pcrc_32_tab = get_crc_table();

  006bd	e8 00 00 00 00	 call	 _get_crc_table@0
  006c2	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  006c5	89 81 dc 00 01
	00		 mov	 DWORD PTR [ecx+65756], eax

; 1250 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1251 : 
; 1252 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  006cb	8b 55 44	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  006ce	52		 push	 edx
  006cf	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  006d2	8b 88 dc 00 01
	00		 mov	 ecx, DWORD PTR [eax+65756]
  006d8	51		 push	 ecx
  006d9	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  006dc	81 c2 d0 00 01
	00		 add	 edx, 65744		; 000100d0H
  006e2	52		 push	 edx
  006e3	6a 0c		 push	 12			; 0000000cH
  006e5	8d 45 dc	 lea	 eax, DWORD PTR _bufHead$80604[ebp]
  006e8	50		 push	 eax
  006e9	8b 4d 40	 mov	 ecx, DWORD PTR _password$[ebp]
  006ec	51		 push	 ecx
  006ed	e8 00 00 00 00	 call	 _crypthead
  006f2	83 c4 18	 add	 esp, 24			; 00000018H
  006f5	89 45 e8	 mov	 DWORD PTR _sizeHead$80605[ebp], eax

; 1253 :         zi->ci.crypt_header_size = sizeHead;

  006f8	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  006fb	8b 45 e8	 mov	 eax, DWORD PTR _sizeHead$80605[ebp]
  006fe	89 82 e0 00 01
	00		 mov	 DWORD PTR [edx+65760], eax

; 1254 : 
; 1255 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  00704	8b 4d e8	 mov	 ecx, DWORD PTR _sizeHead$80605[ebp]
  00707	51		 push	 ecx
  00708	8d 55 dc	 lea	 edx, DWORD PTR _bufHead$80604[ebp]
  0070b	52		 push	 edx
  0070c	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0070f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00712	51		 push	 ecx
  00713	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00716	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00719	50		 push	 eax
  0071a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0071d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00720	ff d2		 call	 edx
  00722	83 c4 10	 add	 esp, 16			; 00000010H
  00725	3b 45 e8	 cmp	 eax, DWORD PTR _sizeHead$80605[ebp]
  00728	74 07		 je	 SHORT $LN3@zipOpenNew

; 1256 :                 err = ZIP_ERRNO;

  0072a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN3@zipOpenNew:

; 1257 :     }
; 1258 : #    endif
; 1259 : 
; 1260 :     if (err==Z_OK)

  00731	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00735	75 0a		 jne	 SHORT $LN1@zipOpenNew

; 1261 :         zi->in_opened_file_inzip = 1;

  00737	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0073a	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1
$LN1@zipOpenNew:

; 1262 :     return err;

  00741	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
$LN42@zipOpenNew:

; 1263 : }

  00744	8b e5		 mov	 esp, ebp
  00746	5d		 pop	 ebp
  00747	c2 4c 00	 ret	 76			; 0000004cH
_zipOpenNewFileInZip4_64@76 ENDP
PUBLIC	_zipClose@8
; Function compile flags: /Odtp
;	COMDAT _zipClose@8
_TEXT	SEGMENT
tv211 = -52						; size = 4
_Zip64EOCDpos$81056 = -48				; size = 8
_ldi$81047 = -36					; size = 4
_pos$ = -32						; size = 8
_zi$ = -20						; size = 4
_err$ = -16						; size = 4
_size_centraldir$ = -12					; size = 4
_centraldir_pos_inzip$ = -8				; size = 8
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose@8 PROC					; COMDAT

; 1883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 1884 :     zip64_internal* zi;
; 1885 :     int err = 0;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1886 :     uLong size_centraldir = 0;

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _size_centraldir$[ebp], 0

; 1887 :     ZPOS64_T centraldir_pos_inzip;
; 1888 :     ZPOS64_T pos;
; 1889 : 
; 1890 :     if (file == NULL)

  00014	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00018	75 0a		 jne	 SHORT $LN16@zipClose

; 1891 :         return ZIP_PARAMERROR;

  0001a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001f	e9 eb 01 00 00	 jmp	 $LN17@zipClose
$LN16@zipClose:

; 1892 : 
; 1893 :     zi = (zip64_internal*)file;

  00024	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00027	89 45 ec	 mov	 DWORD PTR _zi$[ebp], eax

; 1894 : 
; 1895 :     if (zi->in_opened_file_inzip == 1)

  0002a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0002d	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  00031	75 0c		 jne	 SHORT $LN15@zipClose

; 1896 :     {
; 1897 :         err = zipCloseFileInZip (file);

  00033	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  0003c	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN15@zipClose:

; 1898 :     }
; 1899 : 
; 1900 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1901 :     if (global_comment==NULL)

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00043	75 0c		 jne	 SHORT $LN14@zipClose

; 1902 :         global_comment = zi->globalcomment;

  00045	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00048	8b 88 00 01 01
	00		 mov	 ecx, DWORD PTR [eax+65792]
  0004e	89 4d 0c	 mov	 DWORD PTR _global_comment$[ebp], ecx
$LN14@zipClose:

; 1903 : #endif
; 1904 : 
; 1905 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00051	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00054	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00057	50		 push	 eax
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _call_ztell64
  00061	83 c4 08	 add	 esp, 8
  00064	89 45 f8	 mov	 DWORD PTR _centraldir_pos_inzip$[ebp], eax
  00067	89 55 fc	 mov	 DWORD PTR _centraldir_pos_inzip$[ebp+4], edx

; 1906 : 
; 1907 :     if (err==ZIP_OK)

  0006a	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006e	75 6a		 jne	 SHORT $LN13@zipClose

; 1908 :     {
; 1909 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  00070	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00073	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00076	89 45 dc	 mov	 DWORD PTR _ldi$81047[ebp], eax
$LN12@zipClose:

; 1910 :         while (ldi!=NULL)

  00079	83 7d dc 00	 cmp	 DWORD PTR _ldi$81047[ebp], 0
  0007d	74 5b		 je	 SHORT $LN13@zipClose

; 1911 :         {
; 1912 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  0007f	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00083	75 3f		 jne	 SHORT $LN10@zipClose
  00085	8b 4d dc	 mov	 ecx, DWORD PTR _ldi$81047[ebp]
  00088	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0008c	76 36		 jbe	 SHORT $LN10@zipClose

; 1913 :             {
; 1914 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  0008e	8b 55 dc	 mov	 edx, DWORD PTR _ldi$81047[ebp]
  00091	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00094	50		 push	 eax
  00095	8b 4d dc	 mov	 ecx, DWORD PTR _ldi$81047[ebp]
  00098	83 c1 10	 add	 ecx, 16			; 00000010H
  0009b	51		 push	 ecx
  0009c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0009f	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000a2	50		 push	 eax
  000a3	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000a6	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000a9	52		 push	 edx
  000aa	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  000ad	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b0	ff d1		 call	 ecx
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	8b 55 dc	 mov	 edx, DWORD PTR _ldi$81047[ebp]
  000b8	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000bb	74 07		 je	 SHORT $LN10@zipClose

; 1915 :                     err = ZIP_ERRNO;

  000bd	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@zipClose:

; 1916 :             }
; 1917 : 
; 1918 :             size_centraldir += ldi->filled_in_this_block;

  000c4	8b 45 dc	 mov	 eax, DWORD PTR _ldi$81047[ebp]
  000c7	8b 4d f4	 mov	 ecx, DWORD PTR _size_centraldir$[ebp]
  000ca	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  000cd	89 4d f4	 mov	 DWORD PTR _size_centraldir$[ebp], ecx

; 1919 :             ldi = ldi->next_datablock;

  000d0	8b 55 dc	 mov	 edx, DWORD PTR _ldi$81047[ebp]
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	89 45 dc	 mov	 DWORD PTR _ldi$81047[ebp], eax

; 1920 :         }

  000d8	eb 9f		 jmp	 SHORT $LN12@zipClose
$LN13@zipClose:

; 1921 :     }
; 1922 :     free_linkedlist(&(zi->central_dir));

  000da	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000dd	83 c1 30	 add	 ecx, 48			; 00000030H
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 _free_linkedlist
  000e6	83 c4 04	 add	 esp, 4

; 1923 : 
; 1924 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000e9	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  000ef	2b 82 f0 00 01
	00		 sub	 eax, DWORD PTR [edx+65776]
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  000f8	1b 8a f4 00 01
	00		 sbb	 ecx, DWORD PTR [edx+65780]
  000fe	89 45 e0	 mov	 DWORD PTR _pos$[ebp], eax
  00101	89 4d e4	 mov	 DWORD PTR _pos$[ebp+4], ecx

; 1925 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  00104	83 7d e4 00	 cmp	 DWORD PTR _pos$[ebp+4], 0
  00108	77 29		 ja	 SHORT $LN7@zipClose
  0010a	72 06		 jb	 SHORT $LN19@zipClose
  0010c	83 7d e0 ff	 cmp	 DWORD PTR _pos$[ebp], -1
  00110	73 21		 jae	 SHORT $LN7@zipClose
$LN19@zipClose:
  00112	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00115	89 55 cc	 mov	 DWORD PTR tv211[ebp], edx
  00118	8b 45 cc	 mov	 eax, DWORD PTR tv211[ebp]
  0011b	83 b8 fc 00 01
	00 00		 cmp	 DWORD PTR [eax+65788], 0
  00122	77 0f		 ja	 SHORT $LN7@zipClose
  00124	8b 4d cc	 mov	 ecx, DWORD PTR tv211[ebp]
  00127	81 b9 f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [ecx+65784], 65535 ; 0000ffffH
  00131	76 45		 jbe	 SHORT $LN8@zipClose
$LN7@zipClose:

; 1926 :     {
; 1927 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  00133	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00136	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00139	50		 push	 eax
  0013a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _call_ztell64
  00143	83 c4 08	 add	 esp, 8
  00146	89 45 d0	 mov	 DWORD PTR _Zip64EOCDpos$81056[ebp], eax
  00149	89 55 d4	 mov	 DWORD PTR _Zip64EOCDpos$81056[ebp+4], edx

; 1928 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  0014c	8b 55 fc	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  0014f	52		 push	 edx
  00150	8b 45 f8	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp]
  00153	50		 push	 eax
  00154	8b 4d f4	 mov	 ecx, DWORD PTR _size_centraldir$[ebp]
  00157	51		 push	 ecx
  00158	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0015b	52		 push	 edx
  0015c	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryRecord
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 1929 : 
; 1930 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  00164	8b 45 d4	 mov	 eax, DWORD PTR _Zip64EOCDpos$81056[ebp+4]
  00167	50		 push	 eax
  00168	8b 4d d0	 mov	 ecx, DWORD PTR _Zip64EOCDpos$81056[ebp]
  0016b	51		 push	 ecx
  0016c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryLocator
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@zipClose:

; 1931 :     }
; 1932 : 
; 1933 :     if (err==ZIP_OK)

  00178	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0017c	75 1b		 jne	 SHORT $LN6@zipClose

; 1934 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00181	50		 push	 eax
  00182	8b 4d f8	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  00185	51		 push	 ecx
  00186	8b 55 f4	 mov	 edx, DWORD PTR _size_centraldir$[ebp]
  00189	52		 push	 edx
  0018a	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 _Write_EndOfCentralDirectoryRecord
  00193	83 c4 10	 add	 esp, 16			; 00000010H
  00196	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN6@zipClose:

; 1935 : 
; 1936 :     if(err == ZIP_OK)

  00199	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0019d	75 13		 jne	 SHORT $LN5@zipClose

; 1937 :       err = Write_GlobalComment(zi, global_comment);

  0019f	8b 4d 0c	 mov	 ecx, DWORD PTR _global_comment$[ebp]
  001a2	51		 push	 ecx
  001a3	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001a6	52		 push	 edx
  001a7	e8 00 00 00 00	 call	 _Write_GlobalComment
  001ac	83 c4 08	 add	 esp, 8
  001af	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN5@zipClose:

; 1938 : 
; 1939 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  001b2	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001b5	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001b8	51		 push	 ecx
  001b9	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001bc	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001bf	50		 push	 eax
  001c0	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001c3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001c6	ff d2		 call	 edx
  001c8	83 c4 08	 add	 esp, 8
  001cb	85 c0		 test	 eax, eax
  001cd	74 0d		 je	 SHORT $LN4@zipClose

; 1940 :         if (err == ZIP_OK)

  001cf	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001d3	75 07		 jne	 SHORT $LN4@zipClose

; 1941 :             err = ZIP_ERRNO;

  001d5	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN4@zipClose:

; 1942 : 
; 1943 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1944 :     TRYFREE(zi->globalcomment);

  001dc	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001df	83 b8 00 01 01
	00 00		 cmp	 DWORD PTR [eax+65792], 0
  001e6	74 12		 je	 SHORT $LN2@zipClose
  001e8	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001eb	8b 91 00 01 01
	00		 mov	 edx, DWORD PTR [ecx+65792]
  001f1	52		 push	 edx
  001f2	e8 00 00 00 00	 call	 _free
  001f7	83 c4 04	 add	 esp, 4
$LN2@zipClose:

; 1945 : #endif
; 1946 :     TRYFREE(zi);

  001fa	83 7d ec 00	 cmp	 DWORD PTR _zi$[ebp], 0
  001fe	74 0c		 je	 SHORT $LN1@zipClose
  00200	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 _free
  00209	83 c4 04	 add	 esp, 4
$LN1@zipClose:

; 1947 : 
; 1948 :     return err;

  0020c	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
$LN17@zipClose:

; 1949 : }

  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c2 08 00	 ret	 8
_zipClose@8 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip@40
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip@40
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip@40 PROC				; COMDAT

; 1354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1355 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1356 :                                  extrafield_local, size_extrafield_local,
; 1357 :                                  extrafield_global, size_extrafield_global,
; 1358 :                                  comment, method, level, 0,
; 1359 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1360 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	6a 00		 push	 0
  00015	8b 45 2c	 mov	 eax, DWORD PTR _level$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 24	 mov	 edx, DWORD PTR _comment$[ebp]
  00020	52		 push	 edx
  00021	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 1c	 mov	 ecx, DWORD PTR _extrafield_global$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 14	 mov	 eax, DWORD PTR _extrafield_local$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1361 : }

  00042	5d		 pop	 ebp
  00043	c2 28 00	 ret	 40			; 00000028H
_zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip64@44
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip64@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zip64$ = 48						; size = 4
_zipOpenNewFileInZip64@44 PROC				; COMDAT

; 1341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1342 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1343 :                                  extrafield_local, size_extrafield_local,
; 1344 :                                  extrafield_global, size_extrafield_global,
; 1345 :                                  comment, method, level, 0,
; 1346 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1347 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  00003	8b 45 30	 mov	 eax, DWORD PTR _zip64$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 08		 push	 8
  00013	6a f1		 push	 -15			; fffffff1H
  00015	6a 00		 push	 0
  00017	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00036	52		 push	 edx
  00037	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1348 : }

  00044	5d		 pop	 ebp
  00045	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip64@44 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip2_64@48
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip2_64@48
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zip64$ = 52						; size = 4
_zipOpenNewFileInZip2_64@48 PROC			; COMDAT

; 1328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1329 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1330 :                                  extrafield_local, size_extrafield_local,
; 1331 :                                  extrafield_global, size_extrafield_global,
; 1332 :                                  comment, method, level, raw,
; 1333 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1334 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  00003	8b 45 34	 mov	 eax, DWORD PTR _zip64$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 08		 push	 8
  00013	6a f1		 push	 -15			; fffffff1H
  00015	8b 4d 30	 mov	 ecx, DWORD PTR _raw$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 2c	 mov	 edx, DWORD PTR _level$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 24	 mov	 ecx, DWORD PTR _comment$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 20	 mov	 edx, DWORD PTR _size_extrafield_global$[ebp]
  00028	52		 push	 edx
  00029	8b 45 1c	 mov	 eax, DWORD PTR _extrafield_global$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 18	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 14	 mov	 edx, DWORD PTR _extrafield_local$[ebp]
  00034	52		 push	 edx
  00035	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1335 : }

  00046	5d		 pop	 ebp
  00047	c2 30 00	 ret	 48			; 00000030H
_zipOpenNewFileInZip2_64@48 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip2@44
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip2@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2@44 PROC				; COMDAT

; 1315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1317 :                                  extrafield_local, size_extrafield_local,
; 1318 :                                  extrafield_global, size_extrafield_global,
; 1319 :                                  comment, method, level, raw,
; 1320 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1321 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00036	52		 push	 edx
  00037	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1322 : }

  00044	5d		 pop	 ebp
  00045	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip2@44 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip3_64@68
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip3_64@68
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zip64$ = 72						; size = 4
_zipOpenNewFileInZip3_64@68 PROC			; COMDAT

; 1302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1303 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1304 :                                  extrafield_local, size_extrafield_local,
; 1305 :                                  extrafield_global, size_extrafield_global,
; 1306 :                                  comment, method, level, raw,
; 1307 :                                  windowBits, memLevel, strategy,
; 1308 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);

  00003	8b 45 48	 mov	 eax, DWORD PTR _zip64$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 4d 44	 mov	 ecx, DWORD PTR _crcForCrypting$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 40	 mov	 edx, DWORD PTR _password$[ebp]
  00012	52		 push	 edx
  00013	8b 45 3c	 mov	 eax, DWORD PTR _strategy$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 38	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 34	 mov	 edx, DWORD PTR _windowBits$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  00036	52		 push	 edx
  00037	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00042	52		 push	 edx
  00043	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1309 : }

  00050	5d		 pop	 ebp
  00051	c2 44 00	 ret	 68			; 00000044H
_zipOpenNewFileInZip3_64@68 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip3@64
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip3@64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3@64 PROC				; COMDAT

; 1287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1288 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1289 :                                  extrafield_local, size_extrafield_local,
; 1290 :                                  extrafield_global, size_extrafield_global,
; 1291 :                                  comment, method, level, raw,
; 1292 :                                  windowBits, memLevel, strategy,
; 1293 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	8b 45 44	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 40	 mov	 ecx, DWORD PTR _password$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 3c	 mov	 edx, DWORD PTR _strategy$[ebp]
  00014	52		 push	 edx
  00015	8b 45 38	 mov	 eax, DWORD PTR _memLevel$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 34	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 30	 mov	 edx, DWORD PTR _raw$[ebp]
  00020	52		 push	 edx
  00021	8b 45 2c	 mov	 eax, DWORD PTR _level$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 24	 mov	 edx, DWORD PTR _comment$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 1c	 mov	 ecx, DWORD PTR _extrafield_global$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  00038	52		 push	 edx
  00039	8b 45 14	 mov	 eax, DWORD PTR _extrafield_local$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00044	52		 push	 edx
  00045	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1294 : }

  0004e	5d		 pop	 ebp
  0004f	c2 40 00	 ret	 64			; 00000040H
_zipOpenNewFileInZip3@64 ENDP
END
