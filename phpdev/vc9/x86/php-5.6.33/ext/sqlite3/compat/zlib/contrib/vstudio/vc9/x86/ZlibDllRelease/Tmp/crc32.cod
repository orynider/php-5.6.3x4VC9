; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\crc32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+1
_crc_table DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
	DD	00H
	DD	0191b3141H
	DD	032366282H
	DD	02b2d53c3H
	DD	0646cc504H
	DD	07d77f445H
	DD	0565aa786H
	DD	04f4196c7H
	DD	0c8d98a08H
	DD	0d1c2bb49H
	DD	0faefe88aH
	DD	0e3f4d9cbH
	DD	0acb54f0cH
	DD	0b5ae7e4dH
	DD	09e832d8eH
	DD	087981ccfH
	DD	04ac21251H
	DD	053d92310H
	DD	078f470d3H
	DD	061ef4192H
	DD	02eaed755H
	DD	037b5e614H
	DD	01c98b5d7H
	DD	05838496H
	DD	0821b9859H
	DD	09b00a918H
	DD	0b02dfadbH
	DD	0a936cb9aH
	DD	0e6775d5dH
	DD	0ff6c6c1cH
	DD	0d4413fdfH
	DD	0cd5a0e9eH
	DD	0958424a2H
	DD	08c9f15e3H
	DD	0a7b24620H
	DD	0bea97761H
	DD	0f1e8e1a6H
	DD	0e8f3d0e7H
	DD	0c3de8324H
	DD	0dac5b265H
	DD	05d5daeaaH
	DD	044469febH
	DD	06f6bcc28H
	DD	07670fd69H
	DD	039316baeH
	DD	0202a5aefH
	DD	0b07092cH
	DD	0121c386dH
	DD	0df4636f3H
	DD	0c65d07b2H
	DD	0ed705471H
	DD	0f46b6530H
	DD	0bb2af3f7H
	DD	0a231c2b6H
	DD	0891c9175H
	DD	09007a034H
	DD	0179fbcfbH
	DD	0e848dbaH
	DD	025a9de79H
	DD	03cb2ef38H
	DD	073f379ffH
	DD	06ae848beH
	DD	041c51b7dH
	DD	058de2a3cH
	DD	0f0794f05H
	DD	0e9627e44H
	DD	0c24f2d87H
	DD	0db541cc6H
	DD	094158a01H
	DD	08d0ebb40H
	DD	0a623e883H
	DD	0bf38d9c2H
	DD	038a0c50dH
	DD	021bbf44cH
	DD	0a96a78fH
	DD	0138d96ceH
	DD	05ccc0009H
	DD	045d73148H
	DD	06efa628bH
	DD	077e153caH
	DD	0babb5d54H
	DD	0a3a06c15H
	DD	0888d3fd6H
	DD	091960e97H
	DD	0ded79850H
	DD	0c7cca911H
	DD	0ece1fad2H
	DD	0f5facb93H
	DD	07262d75cH
	DD	06b79e61dH
	DD	04054b5deH
	DD	0594f849fH
	DD	0160e1258H
	DD	0f152319H
	DD	0243870daH
	DD	03d23419bH
	DD	065fd6ba7H
	DD	07ce65ae6H
	DD	057cb0925H
	DD	04ed03864H
	DD	0191aea3H
	DD	0188a9fe2H
	DD	033a7cc21H
	DD	02abcfd60H
	DD	0ad24e1afH
	DD	0b43fd0eeH
	DD	09f12832dH
	DD	08609b26cH
	DD	0c94824abH
	DD	0d05315eaH
	DD	0fb7e4629H
	DD	0e2657768H
	DD	02f3f79f6H
	DD	0362448b7H
	DD	01d091b74H
	DD	04122a35H
	DD	04b53bcf2H
	DD	052488db3H
	DD	07965de70H
	DD	0607eef31H
	DD	0e7e6f3feH
	DD	0fefdc2bfH
	DD	0d5d0917cH
	DD	0cccba03dH
	DD	0838a36faH
	DD	09a9107bbH
	DD	0b1bc5478H
	DD	0a8a76539H
	DD	03b83984bH
	DD	02298a90aH
	DD	09b5fac9H
	DD	010aecb88H
	DD	05fef5d4fH
	DD	046f46c0eH
	DD	06dd93fcdH
	DD	074c20e8cH
	DD	0f35a1243H
	DD	0ea412302H
	DD	0c16c70c1H
	DD	0d8774180H
	DD	09736d747H
	DD	08e2de606H
	DD	0a500b5c5H
	DD	0bc1b8484H
	DD	071418a1aH
	DD	0685abb5bH
	DD	04377e898H
	DD	05a6cd9d9H
	DD	0152d4f1eH
	DD	0c367e5fH
	DD	0271b2d9cH
	DD	03e001cddH
	DD	0b9980012H
	DD	0a0833153H
	DD	08bae6290H
	DD	092b553d1H
	DD	0ddf4c516H
	DD	0c4eff457H
	DD	0efc2a794H
	DD	0f6d996d5H
	DD	0ae07bce9H
	DD	0b71c8da8H
	DD	09c31de6bH
	DD	0852aef2aH
	DD	0ca6b79edH
	DD	0d37048acH
	DD	0f85d1b6fH
	DD	0e1462a2eH
	DD	066de36e1H
	DD	07fc507a0H
	DD	054e85463H
	DD	04df36522H
	DD	02b2f3e5H
	DD	01ba9c2a4H
	DD	030849167H
	DD	0299fa026H
	DD	0e4c5aeb8H
	DD	0fdde9ff9H
	DD	0d6f3cc3aH
	DD	0cfe8fd7bH
	DD	080a96bbcH
	DD	099b25afdH
	DD	0b29f093eH
	DD	0ab84387fH
	DD	02c1c24b0H
	DD	0350715f1H
	DD	01e2a4632H
	DD	07317773H
	DD	04870e1b4H
	DD	0516bd0f5H
	DD	07a468336H
	DD	0635db277H
	DD	0cbfad74eH
	DD	0d2e1e60fH
	DD	0f9ccb5ccH
	DD	0e0d7848dH
	DD	0af96124aH
	DD	0b68d230bH
	DD	09da070c8H
	DD	084bb4189H
	DD	03235d46H
	DD	01a386c07H
	DD	031153fc4H
	DD	0280e0e85H
	DD	0674f9842H
	DD	07e54a903H
	DD	05579fac0H
	DD	04c62cb81H
	DD	08138c51fH
	DD	09823f45eH
	DD	0b30ea79dH
	DD	0aa1596dcH
	DD	0e554001bH
	DD	0fc4f315aH
	DD	0d7626299H
	DD	0ce7953d8H
	DD	049e14f17H
	DD	050fa7e56H
	DD	07bd72d95H
	DD	062cc1cd4H
	DD	02d8d8a13H
	DD	03496bb52H
	DD	01fbbe891H
	DD	06a0d9d0H
	DD	05e7ef3ecH
	DD	04765c2adH
	DD	06c48916eH
	DD	07553a02fH
	DD	03a1236e8H
	DD	0230907a9H
	DD	0824546aH
	DD	0113f652bH
	DD	096a779e4H
	DD	08fbc48a5H
	DD	0a4911b66H
	DD	0bd8a2a27H
	DD	0f2cbbce0H
	DD	0ebd08da1H
	DD	0c0fdde62H
	DD	0d9e6ef23H
	DD	014bce1bdH
	DD	0da7d0fcH
	DD	0268a833fH
	DD	03f91b27eH
	DD	070d024b9H
	DD	069cb15f8H
	DD	042e6463bH
	DD	05bfd777aH
	DD	0dc656bb5H
	DD	0c57e5af4H
	DD	0ee530937H
	DD	0f7483876H
	DD	0b809aeb1H
	DD	0a1129ff0H
	DD	08a3fcc33H
	DD	09324fd72H
	DD	00H
	DD	01c26a37H
	DD	0384d46eH
	DD	0246be59H
	DD	0709a8dcH
	DD	06cbc2ebH
	DD	048d7cb2H
	DD	054f1685H
	DD	0e1351b8H
	DD	0fd13b8fH
	DD	0d9785d6H
	DD	0c55efe1H
	DD	091af964H
	DD	08d89353H
	DD	0a9e2d0aH
	DD	0b5c473dH
	DD	01c26a370H
	DD	01de4c947H
	DD	01fa2771eH
	DD	01e601d29H
	DD	01b2f0bacH
	DD	01aed619bH
	DD	018abdfc2H
	DD	01969b5f5H
	DD	01235f2c8H
	DD	013f798ffH
	DD	011b126a6H
	DD	010734c91H
	DD	0153c5a14H
	DD	014fe3023H
	DD	016b88e7aH
	DD	0177ae44dH
	DD	0384d46e0H
	DD	0398f2cd7H
	DD	03bc9928eH
	DD	03a0bf8b9H
	DD	03f44ee3cH
	DD	03e86840bH
	DD	03cc03a52H
	DD	03d025065H
	DD	0365e1758H
	DD	0379c7d6fH
	DD	035dac336H
	DD	03418a901H
	DD	03157bf84H
	DD	03095d5b3H
	DD	032d36beaH
	DD	0331101ddH
	DD	0246be590H
	DD	025a98fa7H
	DD	027ef31feH
	DD	0262d5bc9H
	DD	023624d4cH
	DD	022a0277bH
	DD	020e69922H
	DD	02124f315H
	DD	02a78b428H
	DD	02bbade1fH
	DD	029fc6046H
	DD	0283e0a71H
	DD	02d711cf4H
	DD	02cb376c3H
	DD	02ef5c89aH
	DD	02f37a2adH
	DD	0709a8dc0H
	DD	07158e7f7H
	DD	0731e59aeH
	DD	072dc3399H
	DD	07793251cH
	DD	076514f2bH
	DD	07417f172H
	DD	075d59b45H
	DD	07e89dc78H
	DD	07f4bb64fH
	DD	07d0d0816H
	DD	07ccf6221H
	DD	0798074a4H
	DD	078421e93H
	DD	07a04a0caH
	DD	07bc6cafdH
	DD	06cbc2eb0H
	DD	06d7e4487H
	DD	06f38fadeH
	DD	06efa90e9H
	DD	06bb5866cH
	DD	06a77ec5bH
	DD	068315202H
	DD	069f33835H
	DD	062af7f08H
	DD	0636d153fH
	DD	0612bab66H
	DD	060e9c151H
	DD	065a6d7d4H
	DD	06464bde3H
	DD	0662203baH
	DD	067e0698dH
	DD	048d7cb20H
	DD	04915a117H
	DD	04b531f4eH
	DD	04a917579H
	DD	04fde63fcH
	DD	04e1c09cbH
	DD	04c5ab792H
	DD	04d98dda5H
	DD	046c49a98H
	DD	04706f0afH
	DD	045404ef6H
	DD	0448224c1H
	DD	041cd3244H
	DD	0400f5873H
	DD	04249e62aH
	DD	0438b8c1dH
	DD	054f16850H
	DD	055330267H
	DD	05775bc3eH
	DD	056b7d609H
	DD	053f8c08cH
	DD	0523aaabbH
	DD	0507c14e2H
	DD	051be7ed5H
	DD	05ae239e8H
	DD	05b2053dfH
	DD	05966ed86H
	DD	058a487b1H
	DD	05deb9134H
	DD	05c29fb03H
	DD	05e6f455aH
	DD	05fad2f6dH
	DD	0e1351b80H
	DD	0e0f771b7H
	DD	0e2b1cfeeH
	DD	0e373a5d9H
	DD	0e63cb35cH
	DD	0e7fed96bH
	DD	0e5b86732H
	DD	0e47a0d05H
	DD	0ef264a38H
	DD	0eee4200fH
	DD	0eca29e56H
	DD	0ed60f461H
	DD	0e82fe2e4H
	DD	0e9ed88d3H
	DD	0ebab368aH
	DD	0ea695cbdH
	DD	0fd13b8f0H
	DD	0fcd1d2c7H
	DD	0fe976c9eH
	DD	0ff5506a9H
	DD	0fa1a102cH
	DD	0fbd87a1bH
	DD	0f99ec442H
	DD	0f85cae75H
	DD	0f300e948H
	DD	0f2c2837fH
	DD	0f0843d26H
	DD	0f1465711H
	DD	0f4094194H
	DD	0f5cb2ba3H
	DD	0f78d95faH
	DD	0f64fffcdH
	DD	0d9785d60H
	DD	0d8ba3757H
	DD	0dafc890eH
	DD	0db3ee339H
	DD	0de71f5bcH
	DD	0dfb39f8bH
	DD	0ddf521d2H
	DD	0dc374be5H
	DD	0d76b0cd8H
	DD	0d6a966efH
	DD	0d4efd8b6H
	DD	0d52db281H
	DD	0d062a404H
	DD	0d1a0ce33H
	DD	0d3e6706aH
	DD	0d2241a5dH
	DD	0c55efe10H
	DD	0c49c9427H
	DD	0c6da2a7eH
	DD	0c7184049H
	DD	0c25756ccH
	DD	0c3953cfbH
	DD	0c1d382a2H
	DD	0c011e895H
	DD	0cb4dafa8H
	DD	0ca8fc59fH
	DD	0c8c97bc6H
	DD	0c90b11f1H
	DD	0cc440774H
	DD	0cd866d43H
	DD	0cfc0d31aH
	DD	0ce02b92dH
	DD	091af9640H
	DD	0906dfc77H
	DD	0922b422eH
	DD	093e92819H
	DD	096a63e9cH
	DD	0976454abH
	DD	09522eaf2H
	DD	094e080c5H
	DD	09fbcc7f8H
	DD	09e7eadcfH
	DD	09c381396H
	DD	09dfa79a1H
	DD	098b56f24H
	DD	099770513H
	DD	09b31bb4aH
	DD	09af3d17dH
	DD	08d893530H
	DD	08c4b5f07H
	DD	08e0de15eH
	DD	08fcf8b69H
	DD	08a809decH
	DD	08b42f7dbH
	DD	089044982H
	DD	088c623b5H
	DD	0839a6488H
	DD	082580ebfH
	DD	0801eb0e6H
	DD	081dcdad1H
	DD	08493cc54H
	DD	08551a663H
	DD	08717183aH
	DD	086d5720dH
	DD	0a9e2d0a0H
	DD	0a820ba97H
	DD	0aa6604ceH
	DD	0aba46ef9H
	DD	0aeeb787cH
	DD	0af29124bH
	DD	0ad6fac12H
	DD	0acadc625H
	DD	0a7f18118H
	DD	0a633eb2fH
	DD	0a4755576H
	DD	0a5b73f41H
	DD	0a0f829c4H
	DD	0a13a43f3H
	DD	0a37cfdaaH
	DD	0a2be979dH
	DD	0b5c473d0H
	DD	0b40619e7H
	DD	0b640a7beH
	DD	0b782cd89H
	DD	0b2cddb0cH
	DD	0b30fb13bH
	DD	0b1490f62H
	DD	0b08b6555H
	DD	0bbd72268H
	DD	0ba15485fH
	DD	0b853f606H
	DD	0b9919c31H
	DD	0bcde8ab4H
	DD	0bd1ce083H
	DD	0bf5a5edaH
	DD	0be9834edH
	DD	00H
	DD	0b8bc6765H
	DD	0aa09c88bH
	DD	012b5afeeH
	DD	08f629757H
	DD	037def032H
	DD	0256b5fdcH
	DD	09dd738b9H
	DD	0c5b428efH
	DD	07d084f8aH
	DD	06fbde064H
	DD	0d7018701H
	DD	04ad6bfb8H
	DD	0f26ad8ddH
	DD	0e0df7733H
	DD	058631056H
	DD	05019579fH
	DD	0e8a530faH
	DD	0fa109f14H
	DD	042acf871H
	DD	0df7bc0c8H
	DD	067c7a7adH
	DD	075720843H
	DD	0cdce6f26H
	DD	095ad7f70H
	DD	02d111815H
	DD	03fa4b7fbH
	DD	08718d09eH
	DD	01acfe827H
	DD	0a2738f42H
	DD	0b0c620acH
	DD	087a47c9H
	DD	0a032af3eH
	DD	0188ec85bH
	DD	0a3b67b5H
	DD	0b28700d0H
	DD	02f503869H
	DD	097ec5f0cH
	DD	08559f0e2H
	DD	03de59787H
	DD	0658687d1H
	DD	0dd3ae0b4H
	DD	0cf8f4f5aH
	DD	07733283fH
	DD	0eae41086H
	DD	0525877e3H
	DD	040edd80dH
	DD	0f851bf68H
	DD	0f02bf8a1H
	DD	048979fc4H
	DD	05a22302aH
	DD	0e29e574fH
	DD	07f496ff6H
	DD	0c7f50893H
	DD	0d540a77dH
	DD	06dfcc018H
	DD	0359fd04eH
	DD	08d23b72bH
	DD	09f9618c5H
	DD	0272a7fa0H
	DD	0bafd4719H
	DD	0241207cH
	DD	010f48f92H
	DD	0a848e8f7H
	DD	09b14583dH
	DD	023a83f58H
	DD	0311d90b6H
	DD	089a1f7d3H
	DD	01476cf6aH
	DD	0accaa80fH
	DD	0be7f07e1H
	DD	06c36084H
	DD	05ea070d2H
	DD	0e61c17b7H
	DD	0f4a9b859H
	DD	04c15df3cH
	DD	0d1c2e785H
	DD	0697e80e0H
	DD	07bcb2f0eH
	DD	0c377486bH
	DD	0cb0d0fa2H
	DD	073b168c7H
	DD	06104c729H
	DD	0d9b8a04cH
	DD	0446f98f5H
	DD	0fcd3ff90H
	DD	0ee66507eH
	DD	056da371bH
	DD	0eb9274dH
	DD	0b6054028H
	DD	0a4b0efc6H
	DD	01c0c88a3H
	DD	081dbb01aH
	DD	03967d77fH
	DD	02bd27891H
	DD	0936e1ff4H
	DD	03b26f703H
	DD	0839a9066H
	DD	0912f3f88H
	DD	0299358edH
	DD	0b4446054H
	DD	0cf80731H
	DD	01e4da8dfH
	DD	0a6f1cfbaH
	DD	0fe92dfecH
	DD	0462eb889H
	DD	0549b1767H
	DD	0ec277002H
	DD	071f048bbH
	DD	0c94c2fdeH
	DD	0dbf98030H
	DD	06345e755H
	DD	06b3fa09cH
	DD	0d383c7f9H
	DD	0c1366817H
	DD	0798a0f72H
	DD	0e45d37cbH
	DD	05ce150aeH
	DD	04e54ff40H
	DD	0f6e89825H
	DD	0ae8b8873H
	DD	01637ef16H
	DD	048240f8H
	DD	0bc3e279dH
	DD	021e91f24H
	DD	099557841H
	DD	08be0d7afH
	DD	0335cb0caH
	DD	0ed59b63bH
	DD	055e5d15eH
	DD	047507eb0H
	DD	0ffec19d5H
	DD	0623b216cH
	DD	0da874609H
	DD	0c832e9e7H
	DD	0708e8e82H
	DD	028ed9ed4H
	DD	09051f9b1H
	DD	082e4565fH
	DD	03a58313aH
	DD	0a78f0983H
	DD	01f336ee6H
	DD	0d86c108H
	DD	0b53aa66dH
	DD	0bd40e1a4H
	DD	05fc86c1H
	DD	01749292fH
	DD	0aff54e4aH
	DD	0322276f3H
	DD	08a9e1196H
	DD	0982bbe78H
	DD	02097d91dH
	DD	078f4c94bH
	DD	0c048ae2eH
	DD	0d2fd01c0H
	DD	06a4166a5H
	DD	0f7965e1cH
	DD	04f2a3979H
	DD	05d9f9697H
	DD	0e523f1f2H
	DD	04d6b1905H
	DD	0f5d77e60H
	DD	0e762d18eH
	DD	05fdeb6ebH
	DD	0c2098e52H
	DD	07ab5e937H
	DD	0680046d9H
	DD	0d0bc21bcH
	DD	088df31eaH
	DD	03063568fH
	DD	022d6f961H
	DD	09a6a9e04H
	DD	07bda6bdH
	DD	0bf01c1d8H
	DD	0adb46e36H
	DD	015080953H
	DD	01d724e9aH
	DD	0a5ce29ffH
	DD	0b77b8611H
	DD	0fc7e174H
	DD	09210d9cdH
	DD	02aacbea8H
	DD	038191146H
	DD	080a57623H
	DD	0d8c66675H
	DD	0607a0110H
	DD	072cfaefeH
	DD	0ca73c99bH
	DD	057a4f122H
	DD	0ef189647H
	DD	0fdad39a9H
	DD	045115eccH
	DD	0764dee06H
	DD	0cef18963H
	DD	0dc44268dH
	DD	064f841e8H
	DD	0f92f7951H
	DD	041931e34H
	DD	05326b1daH
	DD	0eb9ad6bfH
	DD	0b3f9c6e9H
	DD	0b45a18cH
	DD	019f00e62H
	DD	0a14c6907H
	DD	03c9b51beH
	DD	0842736dbH
	DD	096929935H
	DD	02e2efe50H
	DD	02654b999H
	DD	09ee8defcH
	DD	08c5d7112H
	DD	034e11677H
	DD	0a9362eceH
	DD	0118a49abH
	DD	033fe645H
	DD	0bb838120H
	DD	0e3e09176H
	DD	05b5cf613H
	DD	049e959fdH
	DD	0f1553e98H
	DD	06c820621H
	DD	0d43e6144H
	DD	0c68bceaaH
	DD	07e37a9cfH
	DD	0d67f4138H
	DD	06ec3265dH
	DD	07c7689b3H
	DD	0c4caeed6H
	DD	0591dd66fH
	DD	0e1a1b10aH
	DD	0f3141ee4H
	DD	04ba87981H
	DD	013cb69d7H
	DD	0ab770eb2H
	DD	0b9c2a15cH
	DD	017ec639H
	DD	09ca9fe80H
	DD	0241599e5H
	DD	036a0360bH
	DD	08e1c516eH
	DD	0866616a7H
	DD	03eda71c2H
	DD	02c6fde2cH
	DD	094d3b949H
	DD	090481f0H
	DD	0b1b8e695H
	DD	0a30d497bH
	DD	01bb12e1eH
	DD	043d23e48H
	DD	0fb6e592dH
	DD	0e9dbf6c3H
	DD	0516791a6H
	DD	0ccb0a91fH
	DD	0740cce7aH
	DD	066b96194H
	DD	0de0506f1H
	DD	00H
	DD	096300777H
	DD	02c610eeeH
	DD	0ba510999H
	DD	019c46d07H
	DD	08ff46a70H
	DD	035a563e9H
	DD	0a395649eH
	DD	03288db0eH
	DD	0a4b8dc79H
	DD	01ee9d5e0H
	DD	088d9d297H
	DD	02b4cb609H
	DD	0bd7cb17eH
	DD	072db8e7H
	DD	0911dbf90H
	DD	06410b71dH
	DD	0f220b06aH
	DD	04871b9f3H
	DD	0de41be84H
	DD	07dd4da1aH
	DD	0ebe4dd6dH
	DD	051b5d4f4H
	DD	0c785d383H
	DD	056986c13H
	DD	0c0a86b64H
	DD	07af962fdH
	DD	0ecc9658aH
	DD	04f5c0114H
	DD	0d96c0663H
	DD	0633d0ffaH
	DD	0f50d088dH
	DD	0c8206e3bH
	DD	05e10694cH
	DD	0e44160d5H
	DD	0727167a2H
	DD	0d1e4033cH
	DD	047d4044bH
	DD	0fd850dd2H
	DD	06bb50aa5H
	DD	0faa8b535H
	DD	06c98b242H
	DD	0d6c9bbdbH
	DD	040f9bcacH
	DD	0e36cd832H
	DD	0755cdf45H
	DD	0cf0dd6dcH
	DD	0593dd1abH
	DD	0ac30d926H
	DD	03a00de51H
	DD	08051d7c8H
	DD	01661d0bfH
	DD	0b5f4b421H
	DD	023c4b356H
	DD	09995bacfH
	DD	0fa5bdb8H
	DD	09eb80228H
	DD	0888055fH
	DD	0b2d90cc6H
	DD	024e90bb1H
	DD	0877c6f2fH
	DD	0114c6858H
	DD	0ab1d61c1H
	DD	03d2d66b6H
	DD	09041dc76H
	DD	0671db01H
	DD	0bc20d298H
	DD	02a10d5efH
	DD	08985b171H
	DD	01fb5b606H
	DD	0a5e4bf9fH
	DD	033d4b8e8H
	DD	0a2c90778H
	DD	034f9000fH
	DD	08ea80996H
	DD	018980ee1H
	DD	0bb0d6a7fH
	DD	02d3d6d08H
	DD	0976c6491H
	DD	015c63e6H
	DD	0f4516b6bH
	DD	062616c1cH
	DD	0d8306585H
	DD	04e0062f2H
	DD	0ed95066cH
	DD	07ba5011bH
	DD	0c1f40882H
	DD	057c40ff5H
	DD	0c6d9b065H
	DD	050e9b712H
	DD	0eab8be8bH
	DD	07c88b9fcH
	DD	0df1ddd62H
	DD	0492dda15H
	DD	0f37cd38cH
	DD	0654cd4fbH
	DD	05861b24dH
	DD	0ce51b53aH
	DD	07400bca3H
	DD	0e230bbd4H
	DD	041a5df4aH
	DD	0d795d83dH
	DD	06dc4d1a4H
	DD	0fbf4d6d3H
	DD	06ae96943H
	DD	0fcd96e34H
	DD	0468867adH
	DD	0d0b860daH
	DD	0732d0444H
	DD	0e51d0333H
	DD	05f4c0aaaH
	DD	0c97c0dddH
	DD	03c710550H
	DD	0aa410227H
	DD	010100bbeH
	DD	086200cc9H
	DD	025b56857H
	DD	0b3856f20H
	DD	09d466b9H
	DD	09fe461ceH
	DD	0ef9de5eH
	DD	098c9d929H
	DD	02298d0b0H
	DD	0b4a8d7c7H
	DD	0173db359H
	DD	0810db42eH
	DD	03b5cbdb7H
	DD	0ad6cbac0H
	DD	02083b8edH
	DD	0b6b3bf9aH
	DD	0ce2b603H
	DD	09ad2b174H
	DD	03947d5eaH
	DD	0af77d29dH
	DD	01526db04H
	DD	08316dc73H
	DD	0120b63e3H
	DD	0843b6494H
	DD	03e6a6d0dH
	DD	0a85a6a7aH
	DD	0bcf0ee4H
	DD	09dff0993H
	DD	027ae000aH
	DD	0b19e077dH
	DD	044930ff0H
	DD	0d2a30887H
	DD	068f2011eH
	DD	0fec20669H
	DD	05d5762f7H
	DD	0cb676580H
	DD	071366c19H
	DD	0e7066b6eH
	DD	0761bd4feH
	DD	0e02bd389H
	DD	05a7ada10H
	DD	0cc4add67H
	DD	06fdfb9f9H
	DD	0f9efbe8eH
	DD	043beb717H
	DD	0d58eb060H
	DD	0e8a3d6d6H
	DD	07e93d1a1H
	DD	0c4c2d838H
	DD	052f2df4fH
	DD	0f167bbd1H
	DD	06757bca6H
	DD	0dd06b53fH
	DD	04b36b248H
	DD	0da2b0dd8H
	DD	04c1b0aafH
	DD	0f64a0336H
	DD	0607a0441H
	DD	0c3ef60dfH
	DD	055df67a8H
	DD	0ef8e6e31H
	DD	079be6946H
	DD	08cb361cbH
	DD	01a8366bcH
	DD	0a0d26f25H
	DD	036e26852H
	DD	095770cccH
	DD	03470bbbH
	DD	0b9160222H
	DD	02f260555H
	DD	0be3bbac5H
	DD	0280bbdb2H
	DD	0925ab42bH
	DD	046ab35cH
	DD	0a7ffd7c2H
	DD	031cfd0b5H
	DD	08b9ed92cH
	DD	01daede5bH
	DD	0b0c2649bH
	DD	026f263ecH
	DD	09ca36a75H
	DD	0a936d02H
	DD	0a906099cH
	DD	03f360eebH
	DD	085670772H
	DD	013570005H
	DD	0824abf95H
	DD	0147ab8e2H
	DD	0ae2bb17bH
	DD	0381bb60cH
	DD	09b8ed292H
	DD	0dbed5e5H
	DD	0b7efdc7cH
	DD	021dfdb0bH
	DD	0d4d2d386H
	DD	042e2d4f1H
	DD	0f8b3dd68H
	DD	06e83da1fH
	DD	0cd16be81H
	DD	05b26b9f6H
	DD	0e177b06fH
	DD	07747b718H
	DD	0e65a0888H
	DD	0706a0fffH
	DD	0ca3b0666H
	DD	05c0b0111H
	DD	0ff9e658fH
	DD	069ae62f8H
	DD	0d3ff6b61H
	DD	045cf6c16H
	DD	078e20aa0H
	DD	0eed20dd7H
	DD	05483044eH
	DD	0c2b30339H
	DD	0612667a7H
	DD	0f71660d0H
	DD	04d476949H
	DD	0db776e3eH
	DD	04a6ad1aeH
	DD	0dc5ad6d9H
	DD	0660bdf40H
	DD	0f03bd837H
	DD	053aebca9H
	DD	0c59ebbdeH
	DD	07fcfb247H
	DD	0e9ffb530H
	DD	01cf2bdbdH
	DD	08ac2bacaH
	DD	03093b353H
	DD	0a6a3b424H
	DD	0536d0baH
	DD	09306d7cdH
	DD	02957de54H
	DD	0bf67d923H
	DD	02e7a66b3H
	DD	0b84a61c4H
	DD	021b685dH
	DD	0942b6f2aH
	DD	037be0bb4H
	DD	0a18e0cc3H
	DD	01bdf055aH
	DD	08def022dH
	DD	00H
	DD	041311b19H
	DD	082623632H
	DD	0c3532d2bH
	DD	04c56c64H
	DD	045f4777dH
	DD	086a75a56H
	DD	0c796414fH
	DD	088ad9c8H
	DD	049bbc2d1H
	DD	08ae8effaH
	DD	0cbd9f4e3H
	DD	0c4fb5acH
	DD	04d7eaeb5H
	DD	08e2d839eH
	DD	0cf1c9887H
	DD	05112c24aH
	DD	01023d953H
	DD	0d370f478H
	DD	09241ef61H
	DD	055d7ae2eH
	DD	014e6b537H
	DD	0d7b5981cH
	DD	096848305H
	DD	059981b82H
	DD	018a9009bH
	DD	0dbfa2db0H
	DD	09acb36a9H
	DD	05d5d77e6H
	DD	01c6c6cffH
	DD	0df3f41d4H
	DD	09e0e5acdH
	DD	0a2248495H
	DD	0e3159f8cH
	DD	02046b2a7H
	DD	06177a9beH
	DD	0a6e1e8f1H
	DD	0e7d0f3e8H
	DD	02483dec3H
	DD	065b2c5daH
	DD	0aaae5d5dH
	DD	0eb9f4644H
	DD	028cc6b6fH
	DD	069fd7076H
	DD	0ae6b3139H
	DD	0ef5a2a20H
	DD	02c09070bH
	DD	06d381c12H
	DD	0f33646dfH
	DD	0b2075dc6H
	DD	0715470edH
	DD	030656bf4H
	DD	0f7f32abbH
	DD	0b6c231a2H
	DD	075911c89H
	DD	034a00790H
	DD	0fbbc9f17H
	DD	0ba8d840eH
	DD	079dea925H
	DD	038efb23cH
	DD	0ff79f373H
	DD	0be48e86aH
	DD	07d1bc541H
	DD	03c2ade58H
	DD	054f79f0H
	DD	0447e62e9H
	DD	0872d4fc2H
	DD	0c61c54dbH
	DD	018a1594H
	DD	040bb0e8dH
	DD	083e823a6H
	DD	0c2d938bfH
	DD	0dc5a038H
	DD	04cf4bb21H
	DD	08fa7960aH
	DD	0ce968d13H
	DD	0900cc5cH
	DD	04831d745H
	DD	08b62fa6eH
	DD	0ca53e177H
	DD	0545dbbbaH
	DD	0156ca0a3H
	DD	0d63f8d88H
	DD	0970e9691H
	DD	05098d7deH
	DD	011a9ccc7H
	DD	0d2fae1ecH
	DD	093cbfaf5H
	DD	05cd76272H
	DD	01de6796bH
	DD	0deb55440H
	DD	09f844f59H
	DD	058120e16H
	DD	01923150fH
	DD	0da703824H
	DD	09b41233dH
	DD	0a76bfd65H
	DD	0e65ae67cH
	DD	02509cb57H
	DD	06438d04eH
	DD	0a3ae9101H
	DD	0e29f8a18H
	DD	021cca733H
	DD	060fdbc2aH
	DD	0afe124adH
	DD	0eed03fb4H
	DD	02d83129fH
	DD	06cb20986H
	DD	0ab2448c9H
	DD	0ea1553d0H
	DD	029467efbH
	DD	0687765e2H
	DD	0f6793f2fH
	DD	0b7482436H
	DD	0741b091dH
	DD	0352a1204H
	DD	0f2bc534bH
	DD	0b38d4852H
	DD	070de6579H
	DD	031ef7e60H
	DD	0fef3e6e7H
	DD	0bfc2fdfeH
	DD	07c91d0d5H
	DD	03da0cbccH
	DD	0fa368a83H
	DD	0bb07919aH
	DD	07854bcb1H
	DD	03965a7a8H
	DD	04b98833bH
	DD	0aa99822H
	DD	0c9fab509H
	DD	088cbae10H
	DD	04f5def5fH
	DD	0e6cf446H
	DD	0cd3fd96dH
	DD	08c0ec274H
	DD	043125af3H
	DD	022341eaH
	DD	0c1706cc1H
	DD	0804177d8H
	DD	047d73697H
	DD	06e62d8eH
	DD	0c5b500a5H
	DD	084841bbcH
	DD	01a8a4171H
	DD	05bbb5a68H
	DD	098e87743H
	DD	0d9d96c5aH
	DD	01e4f2d15H
	DD	05f7e360cH
	DD	09c2d1b27H
	DD	0dd1c003eH
	DD	0120098b9H
	DD	0533183a0H
	DD	09062ae8bH
	DD	0d153b592H
	DD	016c5f4ddH
	DD	057f4efc4H
	DD	094a7c2efH
	DD	0d596d9f6H
	DD	0e9bc07aeH
	DD	0a88d1cb7H
	DD	06bde319cH
	DD	02aef2a85H
	DD	0ed796bcaH
	DD	0ac4870d3H
	DD	06f1b5df8H
	DD	02e2a46e1H
	DD	0e136de66H
	DD	0a007c57fH
	DD	06354e854H
	DD	02265f34dH
	DD	0e5f3b202H
	DD	0a4c2a91bH
	DD	067918430H
	DD	026a09f29H
	DD	0b8aec5e4H
	DD	0f99fdefdH
	DD	03accf3d6H
	DD	07bfde8cfH
	DD	0bc6ba980H
	DD	0fd5ab299H
	DD	03e099fb2H
	DD	07f3884abH
	DD	0b0241c2cH
	DD	0f1150735H
	DD	032462a1eH
	DD	073773107H
	DD	0b4e17048H
	DD	0f5d06b51H
	DD	03683467aH
	DD	077b25d63H
	DD	04ed7facbH
	DD	0fe6e1d2H
	DD	0ccb5ccf9H
	DD	08d84d7e0H
	DD	04a1296afH
	DD	0b238db6H
	DD	0c870a09dH
	DD	08941bb84H
	DD	0465d2303H
	DD	076c381aH
	DD	0c43f1531H
	DD	0850e0e28H
	DD	042984f67H
	DD	03a9547eH
	DD	0c0fa7955H
	DD	081cb624cH
	DD	01fc53881H
	DD	05ef42398H
	DD	09da70eb3H
	DD	0dc9615aaH
	DD	01b0054e5H
	DD	05a314ffcH
	DD	0996262d7H
	DD	0d85379ceH
	DD	0174fe149H
	DD	0567efa50H
	DD	0952dd77bH
	DD	0d41ccc62H
	DD	0138a8d2dH
	DD	052bb9634H
	DD	091e8bb1fH
	DD	0d0d9a006H
	DD	0ecf37e5eH
	DD	0adc26547H
	DD	06e91486cH
	DD	02fa05375H
	DD	0e836123aH
	DD	0a9070923H
	DD	06a542408H
	DD	02b653f11H
	DD	0e479a796H
	DD	0a548bc8fH
	DD	0661b91a4H
	DD	0272a8abdH
	DD	0e0bccbf2H
	DD	0a18dd0ebH
	DD	062defdc0H
	DD	023efe6d9H
	DD	0bde1bc14H
	DD	0fcd0a70dH
	DD	03f838a26H
	DD	07eb2913fH
	DD	0b924d070H
	DD	0f815cb69H
	DD	03b46e642H
	DD	07a77fd5bH
	DD	0b56b65dcH
	DD	0f45a7ec5H
	DD	0370953eeH
	DD	0763848f7H
	DD	0b1ae09b8H
	DD	0f09f12a1H
	DD	033cc3f8aH
	DD	072fd2493H
	DD	00H
	DD	0376ac201H
	DD	06ed48403H
	DD	059be4602H
	DD	0dca80907H
	DD	0ebc2cb06H
	DD	0b27c8d04H
	DD	085164f05H
	DD	0b851130eH
	DD	08f3bd10fH
	DD	0d685970dH
	DD	0e1ef550cH
	DD	064f91a09H
	DD	05393d808H
	DD	0a2d9e0aH
	DD	03d475c0bH
	DD	070a3261cH
	DD	047c9e41dH
	DD	01e77a21fH
	DD	0291d601eH
	DD	0ac0b2f1bH
	DD	09b61ed1aH
	DD	0c2dfab18H
	DD	0f5b56919H
	DD	0c8f23512H
	DD	0ff98f713H
	DD	0a626b111H
	DD	0914c7310H
	DD	0145a3c15H
	DD	02330fe14H
	DD	07a8eb816H
	DD	04de47a17H
	DD	0e0464d38H
	DD	0d72c8f39H
	DD	08e92c93bH
	DD	0b9f80b3aH
	DD	03cee443fH
	DD	0b84863eH
	DD	0523ac03cH
	DD	06550023dH
	DD	058175e36H
	DD	06f7d9c37H
	DD	036c3da35H
	DD	01a91834H
	DD	084bf5731H
	DD	0b3d59530H
	DD	0ea6bd332H
	DD	0dd011133H
	DD	090e56b24H
	DD	0a78fa925H
	DD	0fe31ef27H
	DD	0c95b2d26H
	DD	04c4d6223H
	DD	07b27a022H
	DD	02299e620H
	DD	015f32421H
	DD	028b4782aH
	DD	01fdeba2bH
	DD	04660fc29H
	DD	0710a3e28H
	DD	0f41c712dH
	DD	0c376b32cH
	DD	09ac8f52eH
	DD	0ada2372fH
	DD	0c08d9a70H
	DD	0f7e75871H
	DD	0ae591e73H
	DD	09933dc72H
	DD	01c259377H
	DD	02b4f5176H
	DD	072f11774H
	DD	0459bd575H
	DD	078dc897eH
	DD	04fb64b7fH
	DD	016080d7dH
	DD	02162cf7cH
	DD	0a4748079H
	DD	0931e4278H
	DD	0caa0047aH
	DD	0fdcac67bH
	DD	0b02ebc6cH
	DD	087447e6dH
	DD	0defa386fH
	DD	0e990fa6eH
	DD	06c86b56bH
	DD	05bec776aH
	DD	02523168H
	DD	03538f369H
	DD	087faf62H
	DD	03f156d63H
	DD	066ab2b61H
	DD	051c1e960H
	DD	0d4d7a665H
	DD	0e3bd6464H
	DD	0ba032266H
	DD	08d69e067H
	DD	020cbd748H
	DD	017a11549H
	DD	04e1f534bH
	DD	07975914aH
	DD	0fc63de4fH
	DD	0cb091c4eH
	DD	092b75a4cH
	DD	0a5dd984dH
	DD	0989ac446H
	DD	0aff00647H
	DD	0f64e4045H
	DD	0c1248244H
	DD	04432cd41H
	DD	073580f40H
	DD	02ae64942H
	DD	01d8c8b43H
	DD	05068f154H
	DD	067023355H
	DD	03ebc7557H
	DD	09d6b756H
	DD	08cc0f853H
	DD	0bbaa3a52H
	DD	0e2147c50H
	DD	0d57ebe51H
	DD	0e839e25aH
	DD	0df53205bH
	DD	086ed6659H
	DD	0b187a458H
	DD	03491eb5dH
	DD	03fb295cH
	DD	05a456f5eH
	DD	06d2fad5fH
	DD	0801b35e1H
	DD	0b771f7e0H
	DD	0eecfb1e2H
	DD	0d9a573e3H
	DD	05cb33ce6H
	DD	06bd9fee7H
	DD	03267b8e5H
	DD	050d7ae4H
	DD	0384a26efH
	DD	0f20e4eeH
	DD	0569ea2ecH
	DD	061f460edH
	DD	0e4e22fe8H
	DD	0d388ede9H
	DD	08a36abebH
	DD	0bd5c69eaH
	DD	0f0b813fdH
	DD	0c7d2d1fcH
	DD	09e6c97feH
	DD	0a90655ffH
	DD	02c101afaH
	DD	01b7ad8fbH
	DD	042c49ef9H
	DD	075ae5cf8H
	DD	048e900f3H
	DD	07f83c2f2H
	DD	0263d84f0H
	DD	0115746f1H
	DD	0944109f4H
	DD	0a32bcbf5H
	DD	0fa958df7H
	DD	0cdff4ff6H
	DD	0605d78d9H
	DD	05737bad8H
	DD	0e89fcdaH
	DD	039e33edbH
	DD	0bcf571deH
	DD	08b9fb3dfH
	DD	0d221f5ddH
	DD	0e54b37dcH
	DD	0d80c6bd7H
	DD	0ef66a9d6H
	DD	0b6d8efd4H
	DD	081b22dd5H
	DD	04a462d0H
	DD	033cea0d1H
	DD	06a70e6d3H
	DD	05d1a24d2H
	DD	010fe5ec5H
	DD	027949cc4H
	DD	07e2adac6H
	DD	0494018c7H
	DD	0cc5657c2H
	DD	0fb3c95c3H
	DD	0a282d3c1H
	DD	095e811c0H
	DD	0a8af4dcbH
	DD	09fc58fcaH
	DD	0c67bc9c8H
	DD	0f1110bc9H
	DD	0740744ccH
	DD	0436d86cdH
	DD	01ad3c0cfH
	DD	02db902ceH
	DD	04096af91H
	DD	077fc6d90H
	DD	02e422b92H
	DD	01928e993H
	DD	09c3ea696H
	DD	0ab546497H
	DD	0f2ea2295H
	DD	0c580e094H
	DD	0f8c7bc9fH
	DD	0cfad7e9eH
	DD	09613389cH
	DD	0a179fa9dH
	DD	0246fb598H
	DD	013057799H
	DD	04abb319bH
	DD	07dd1f39aH
	DD	03035898dH
	DD	075f4b8cH
	DD	05ee10d8eH
	DD	0698bcf8fH
	DD	0ec9d808aH
	DD	0dbf7428bH
	DD	082490489H
	DD	0b523c688H
	DD	088649a83H
	DD	0bf0e5882H
	DD	0e6b01e80H
	DD	0d1dadc81H
	DD	054cc9384H
	DD	063a65185H
	DD	03a181787H
	DD	0d72d586H
	DD	0a0d0e2a9H
	DD	097ba20a8H
	DD	0ce0466aaH
	DD	0f96ea4abH
	DD	07c78ebaeH
	DD	04b1229afH
	DD	012ac6fadH
	DD	025c6adacH
	DD	01881f1a7H
	DD	02feb33a6H
	DD	0765575a4H
	DD	0413fb7a5H
	DD	0c429f8a0H
	DD	0f3433aa1H
	DD	0aafd7ca3H
	DD	09d97bea2H
	DD	0d073c4b5H
	DD	0e71906b4H
	DD	0bea740b6H
	DD	089cd82b7H
	DD	0cdbcdb2H
	DD	03bb10fb3H
	DD	0620f49b1H
	DD	055658bb0H
	DD	06822d7bbH
	DD	05f4815baH
	DD	06f653b8H
	DD	0319c91b9H
	DD	0b48adebcH
	DD	083e01cbdH
	DD	0da5e5abfH
	DD	0ed3498beH
	DD	00H
	DD	06567bcb8H
	DD	08bc809aaH
	DD	0eeafb512H
	DD	05797628fH
	DD	032f0de37H
	DD	0dc5f6b25H
	DD	0b938d79dH
	DD	0ef28b4c5H
	DD	08a4f087dH
	DD	064e0bd6fH
	DD	018701d7H
	DD	0b8bfd64aH
	DD	0ddd86af2H
	DD	03377dfe0H
	DD	056106358H
	DD	09f571950H
	DD	0fa30a5e8H
	DD	0149f10faH
	DD	071f8ac42H
	DD	0c8c07bdfH
	DD	0ada7c767H
	DD	043087275H
	DD	0266fcecdH
	DD	0707fad95H
	DD	01518112dH
	DD	0fbb7a43fH
	DD	09ed01887H
	DD	027e8cf1aH
	DD	0428f73a2H
	DD	0ac20c6b0H
	DD	0c9477a08H
	DD	03eaf32a0H
	DD	05bc88e18H
	DD	0b5673b0aH
	DD	0d00087b2H
	DD	06938502fH
	DD	0c5fec97H
	DD	0e2f05985H
	DD	08797e53dH
	DD	0d1878665H
	DD	0b4e03addH
	DD	05a4f8fcfH
	DD	03f283377H
	DD	08610e4eaH
	DD	0e3775852H
	DD	0dd8ed40H
	DD	068bf51f8H
	DD	0a1f82bf0H
	DD	0c49f9748H
	DD	02a30225aH
	DD	04f579ee2H
	DD	0f66f497fH
	DD	09308f5c7H
	DD	07da740d5H
	DD	018c0fc6dH
	DD	04ed09f35H
	DD	02bb7238dH
	DD	0c518969fH
	DD	0a07f2a27H
	DD	01947fdbaH
	DD	07c204102H
	DD	0928ff410H
	DD	0f7e848a8H
	DD	03d58149bH
	DD	0583fa823H
	DD	0b6901d31H
	DD	0d3f7a189H
	DD	06acf7614H
	DD	0fa8caacH
	DD	0e1077fbeH
	DD	08460c306H
	DD	0d270a05eH
	DD	0b7171ce6H
	DD	059b8a9f4H
	DD	03cdf154cH
	DD	085e7c2d1H
	DD	0e0807e69H
	DD	0e2fcb7bH
	DD	06b4877c3H
	DD	0a20f0dcbH
	DD	0c768b173H
	DD	029c70461H
	DD	04ca0b8d9H
	DD	0f5986f44H
	DD	090ffd3fcH
	DD	07e5066eeH
	DD	01b37da56H
	DD	04d27b90eH
	DD	0284005b6H
	DD	0c6efb0a4H
	DD	0a3880c1cH
	DD	01ab0db81H
	DD	07fd76739H
	DD	09178d22bH
	DD	0f41f6e93H
	DD	03f7263bH
	DD	066909a83H
	DD	0883f2f91H
	DD	0ed589329H
	DD	0546044b4H
	DD	03107f80cH
	DD	0dfa84d1eH
	DD	0bacff1a6H
	DD	0ecdf92feH
	DD	089b82e46H
	DD	067179b54H
	DD	027027ecH
	DD	0bb48f071H
	DD	0de2f4cc9H
	DD	03080f9dbH
	DD	055e74563H
	DD	09ca03f6bH
	DD	0f9c783d3H
	DD	0176836c1H
	DD	0720f8a79H
	DD	0cb375de4H
	DD	0ae50e15cH
	DD	040ff544eH
	DD	02598e8f6H
	DD	073888baeH
	DD	016ef3716H
	DD	0f8408204H
	DD	09d273ebcH
	DD	0241fe921H
	DD	041785599H
	DD	0afd7e08bH
	DD	0cab05c33H
	DD	03bb659edH
	DD	05ed1e555H
	DD	0b07e5047H
	DD	0d519ecffH
	DD	06c213b62H
	DD	094687daH
	DD	0e7e932c8H
	DD	0828e8e70H
	DD	0d49eed28H
	DD	0b1f95190H
	DD	05f56e482H
	DD	03a31583aH
	DD	083098fa7H
	DD	0e66e331fH
	DD	08c1860dH
	DD	06da63ab5H
	DD	0a4e140bdH
	DD	0c186fc05H
	DD	02f294917H
	DD	04a4ef5afH
	DD	0f3762232H
	DD	096119e8aH
	DD	078be2b98H
	DD	01dd99720H
	DD	04bc9f478H
	DD	02eae48c0H
	DD	0c001fdd2H
	DD	0a566416aH
	DD	01c5e96f7H
	DD	079392a4fH
	DD	097969f5dH
	DD	0f2f123e5H
	DD	05196b4dH
	DD	0607ed7f5H
	DD	08ed162e7H
	DD	0ebb6de5fH
	DD	0528e09c2H
	DD	037e9b57aH
	DD	0d9460068H
	DD	0bc21bcd0H
	DD	0ea31df88H
	DD	08f566330H
	DD	061f9d622H
	DD	049e6a9aH
	DD	0bda6bd07H
	DD	0d8c101bfH
	DD	0366eb4adH
	DD	053090815H
	DD	09a4e721dH
	DD	0ff29cea5H
	DD	011867bb7H
	DD	074e1c70fH
	DD	0cdd91092H
	DD	0a8beac2aH
	DD	046111938H
	DD	02376a580H
	DD	07566c6d8H
	DD	010017a60H
	DD	0feaecf72H
	DD	09bc973caH
	DD	022f1a457H
	DD	0479618efH
	DD	0a939adfdH
	DD	0cc5e1145H
	DD	06ee4d76H
	DD	06389f1ceH
	DD	08d2644dcH
	DD	0e841f864H
	DD	051792ff9H
	DD	0341e9341H
	DD	0dab12653H
	DD	0bfd69aebH
	DD	0e9c6f9b3H
	DD	08ca1450bH
	DD	0620ef019H
	DD	07694ca1H
	DD	0be519b3cH
	DD	0db362784H
	DD	035999296H
	DD	050fe2e2eH
	DD	099b95426H
	DD	0fcdee89eH
	DD	012715d8cH
	DD	07716e134H
	DD	0ce2e36a9H
	DD	0ab498a11H
	DD	045e63f03H
	DD	0208183bbH
	DD	07691e0e3H
	DD	013f65c5bH
	DD	0fd59e949H
	DD	0983e55f1H
	DD	02106826cH
	DD	044613ed4H
	DD	0aace8bc6H
	DD	0cfa9377eH
	DD	038417fd6H
	DD	05d26c36eH
	DD	0b389767cH
	DD	0d6eecac4H
	DD	06fd61d59H
	DD	0ab1a1e1H
	DD	0e41e14f3H
	DD	08179a84bH
	DD	0d769cb13H
	DD	0b20e77abH
	DD	05ca1c2b9H
	DD	039c67e01H
	DD	080fea99cH
	DD	0e5991524H
	DD	0b36a036H
	DD	06e511c8eH
	DD	0a7166686H
	DD	0c271da3eH
	DD	02cde6f2cH
	DD	049b9d394H
	DD	0f0810409H
	DD	095e6b8b1H
	DD	07b490da3H
	DD	01e2eb11bH
	DD	0483ed243H
	DD	02d596efbH
	DD	0c3f6dbe9H
	DD	0a6916751H
	DD	01fa9b0ccH
	DD	07ace0c74H
	DD	09461b966H
	DD	0f10605deH
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\crc32.c
;	COMDAT _gf2_matrix_times
_TEXT	SEGMENT
_sum$ = -4						; size = 4
_mat$ = 8						; size = 4
_vec$ = 12						; size = 4
_gf2_matrix_times PROC					; COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 348  :     unsigned long sum;
; 349  : 
; 350  :     sum = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _sum$[ebp], 0
$LN3@gf2_matrix:

; 351  :     while (vec) {

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _vec$[ebp], 0
  0000f	74 26		 je	 SHORT $LN2@gf2_matrix

; 352  :         if (vec & 1)

  00011	8b 45 0c	 mov	 eax, DWORD PTR _vec$[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	74 0b		 je	 SHORT $LN1@gf2_matrix

; 353  :             sum ^= *mat;

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _sum$[ebp]
  0001f	33 11		 xor	 edx, DWORD PTR [ecx]
  00021	89 55 fc	 mov	 DWORD PTR _sum$[ebp], edx
$LN1@gf2_matrix:

; 354  :         vec >>= 1;

  00024	8b 45 0c	 mov	 eax, DWORD PTR _vec$[ebp]
  00027	d1 e8		 shr	 eax, 1
  00029	89 45 0c	 mov	 DWORD PTR _vec$[ebp], eax

; 355  :         mat++;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	83 c1 04	 add	 ecx, 4
  00032	89 4d 08	 mov	 DWORD PTR _mat$[ebp], ecx

; 356  :     }

  00035	eb d4		 jmp	 SHORT $LN3@gf2_matrix
$LN2@gf2_matrix:

; 357  :     return sum;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _sum$[ebp]

; 358  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_gf2_matrix_times ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _crc32_big
_TEXT	SEGMENT
_c$ = -8						; size = 4
_buf4$ = -4						; size = 4
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32_big PROC						; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 311  :     register z_crc_t c;
; 312  :     register const z_crc_t FAR *buf4;
; 313  : 
; 314  :     c = ZSWAP32((z_crc_t)crc);

  00006	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  00009	c1 e8 18	 shr	 eax, 24			; 00000018H
  0000c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  00014	c1 e9 08	 shr	 ecx, 8
  00017	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0001d	03 c1		 add	 eax, ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  00022	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00028	c1 e2 08	 shl	 edx, 8
  0002b	03 c2		 add	 eax, edx
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  00030	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00036	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00039	03 c1		 add	 eax, ecx
  0003b	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 315  :     c = ~c;

  0003e	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00041	f7 d2		 not	 edx
  00043	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
$LN10@crc32_big:

; 316  :     while (len && ((ptrdiff_t)buf & 3)) {

  00046	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0004a	74 3a		 je	 SHORT $LN9@crc32_big
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0004f	83 e0 03	 and	 eax, 3
  00052	74 32		 je	 SHORT $LN9@crc32_big

; 317  :         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);

  00054	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00057	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0005a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0005d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00060	33 c8		 xor	 ecx, eax
  00062	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00065	c1 e2 08	 shl	 edx, 8
  00068	33 14 8d 00 10
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+4096]
  0006f	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  00072	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 318  :         len--;

  0007b	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0007e	83 e9 01	 sub	 ecx, 1
  00081	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 319  :     }

  00084	eb c0		 jmp	 SHORT $LN10@crc32_big
$LN9@crc32_big:

; 320  : 
; 321  :     buf4 = (const z_crc_t FAR *)(const void FAR *)buf;

  00086	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00089	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
$LN8@crc32_big:

; 322  :     while (len >= 32) {

  0008c	83 7d 10 20	 cmp	 DWORD PTR _len$[ebp], 32 ; 00000020H
  00090	0f 82 d5 02 00
	00		 jb	 $LN6@crc32_big

; 323  :         DOBIG32;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0009c	33 08		 xor	 ecx, DWORD PTR [eax]
  0009e	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  000a4	83 c2 04	 add	 edx, 4
  000a7	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000ad	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  000b5	c1 e9 08	 shr	 ecx, 8
  000b8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000be	8b 14 85 00 10
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+4096]
  000c5	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+5120]
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000cf	c1 e8 10	 shr	 eax, 16			; 00000010H
  000d2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d7	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+6144]
  000de	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  000e1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000e4	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+7168]
  000eb	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  000ee	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  000f1	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000f4	33 02		 xor	 eax, DWORD PTR [edx]
  000f6	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  000fc	83 c1 04	 add	 ecx, 4
  000ff	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  00102	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00105	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0010e	c1 e8 08	 shr	 eax, 8
  00111	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00116	8b 0c 95 00 10
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+4096]
  0011d	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+5120]
  00124	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00127	c1 ea 10	 shr	 edx, 16			; 00000010H
  0012a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00130	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+6144]
  00137	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0013a	c1 e8 18	 shr	 eax, 24			; 00000018H
  0013d	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+7168]
  00144	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00147	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  0014a	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0014d	33 11		 xor	 edx, DWORD PTR [ecx]
  0014f	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  00152	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00155	83 c0 04	 add	 eax, 4
  00158	89 45 fc	 mov	 DWORD PTR _buf4$[ebp], eax
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0015e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00164	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00167	c1 ea 08	 shr	 edx, 8
  0016a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00170	8b 04 8d 00 10
	00 00		 mov	 eax, DWORD PTR _crc_table[ecx*4+4096]
  00177	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+5120]
  0017e	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00181	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00184	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0018a	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _crc_table[ecx*4+6144]
  00191	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00194	c1 ea 18	 shr	 edx, 24			; 00000018H
  00197	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+7168]
  0019e	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  001a4	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  001a7	33 08		 xor	 ecx, DWORD PTR [eax]
  001a9	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  001ac	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  001af	83 c2 04	 add	 edx, 4
  001b2	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  001b5	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001b8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001bd	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  001c0	c1 e9 08	 shr	 ecx, 8
  001c3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001c9	8b 14 85 00 10
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+4096]
  001d0	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+5120]
  001d7	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001da	c1 e8 10	 shr	 eax, 16			; 00000010H
  001dd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001e2	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+6144]
  001e9	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  001ec	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001ef	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+7168]
  001f6	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  001f9	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  001fc	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001ff	33 02		 xor	 eax, DWORD PTR [edx]
  00201	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  00204	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  00207	83 c1 04	 add	 ecx, 4
  0020a	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  0020d	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00210	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00216	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00219	c1 e8 08	 shr	 eax, 8
  0021c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00221	8b 0c 95 00 10
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+4096]
  00228	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+5120]
  0022f	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00232	c1 ea 10	 shr	 edx, 16			; 00000010H
  00235	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0023b	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+6144]
  00242	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00245	c1 e8 18	 shr	 eax, 24			; 00000018H
  00248	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+7168]
  0024f	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00252	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  00255	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00258	33 11		 xor	 edx, DWORD PTR [ecx]
  0025a	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  0025d	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00260	83 c0 04	 add	 eax, 4
  00263	89 45 fc	 mov	 DWORD PTR _buf4$[ebp], eax
  00266	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00269	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0026f	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00272	c1 ea 08	 shr	 edx, 8
  00275	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0027b	8b 04 8d 00 10
	00 00		 mov	 eax, DWORD PTR _crc_table[ecx*4+4096]
  00282	33 04 95 00 14
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+5120]
  00289	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0028c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0028f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00295	33 04 8d 00 18
	00 00		 xor	 eax, DWORD PTR _crc_table[ecx*4+6144]
  0029c	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0029f	c1 ea 18	 shr	 edx, 24			; 00000018H
  002a2	33 04 95 00 1c
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+7168]
  002a9	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  002ac	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  002af	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  002b2	33 08		 xor	 ecx, DWORD PTR [eax]
  002b4	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  002b7	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  002ba	83 c2 04	 add	 edx, 4
  002bd	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  002c0	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  002c3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002c8	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  002cb	c1 e9 08	 shr	 ecx, 8
  002ce	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  002d4	8b 14 85 00 10
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+4096]
  002db	33 14 8d 00 14
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+5120]
  002e2	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  002e5	c1 e8 10	 shr	 eax, 16			; 00000010H
  002e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002ed	33 14 85 00 18
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+6144]
  002f4	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  002f7	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002fa	33 14 8d 00 1c
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+7168]
  00301	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  00304	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  00307	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0030a	33 02		 xor	 eax, DWORD PTR [edx]
  0030c	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  00312	83 c1 04	 add	 ecx, 4
  00315	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  00318	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0031b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00321	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00324	c1 e8 08	 shr	 eax, 8
  00327	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0032c	8b 0c 95 00 10
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+4096]
  00333	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+5120]
  0033a	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0033d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00340	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00346	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+6144]
  0034d	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00350	c1 e8 18	 shr	 eax, 24			; 00000018H
  00353	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+7168]
  0035a	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx

; 324  :         len -= 32;

  0035d	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00360	83 e9 20	 sub	 ecx, 32			; 00000020H
  00363	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 325  :     }

  00366	e9 21 fd ff ff	 jmp	 $LN8@crc32_big
$LN6@crc32_big:

; 326  :     while (len >= 4) {

  0036b	83 7d 10 04	 cmp	 DWORD PTR _len$[ebp], 4
  0036f	72 64		 jb	 SHORT $LN5@crc32_big

; 327  :         DOBIG4;

  00371	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  00374	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00377	33 02		 xor	 eax, DWORD PTR [edx]
  00379	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  0037c	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  0037f	83 c1 04	 add	 ecx, 4
  00382	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  00385	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00388	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0038e	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00391	c1 e8 08	 shr	 eax, 8
  00394	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00399	8b 0c 95 00 10
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+4096]
  003a0	33 0c 85 00 14
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+5120]
  003a7	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  003aa	c1 ea 10	 shr	 edx, 16			; 00000010H
  003ad	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  003b3	33 0c 95 00 18
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+6144]
  003ba	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  003bd	c1 e8 18	 shr	 eax, 24			; 00000018H
  003c0	33 0c 85 00 1c
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+7168]
  003c7	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx

; 328  :         len -= 4;

  003ca	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  003cd	83 e9 04	 sub	 ecx, 4
  003d0	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 329  :     }

  003d3	eb 96		 jmp	 SHORT $LN6@crc32_big
$LN5@crc32_big:

; 330  :     buf = (const unsigned char FAR *)buf4;

  003d5	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  003d8	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx

; 331  : 
; 332  :     if (len) do {

  003db	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  003df	74 32		 je	 SHORT $LN4@crc32_big
$LN3@crc32_big:

; 333  :         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);

  003e1	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  003e4	c1 e8 18	 shr	 eax, 24			; 00000018H
  003e7	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  003ea	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  003ed	33 c2		 xor	 eax, edx
  003ef	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  003f2	c1 e1 08	 shl	 ecx, 8
  003f5	33 0c 85 00 10
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+4096]
  003fc	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  003ff	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00402	83 c2 01	 add	 edx, 1
  00405	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx

; 334  :     } while (--len);

  00408	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0040b	83 e8 01	 sub	 eax, 1
  0040e	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
  00411	75 ce		 jne	 SHORT $LN3@crc32_big
$LN4@crc32_big:

; 335  :     c = ~c;

  00413	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00416	f7 d1		 not	 ecx
  00418	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx

; 336  :     return (unsigned long)(ZSWAP32(c));

  0041b	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0041e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00421	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00426	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00429	c1 ea 08	 shr	 edx, 8
  0042c	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00432	03 c2		 add	 eax, edx
  00434	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00437	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0043d	c1 e1 08	 shl	 ecx, 8
  00440	03 c1		 add	 eax, ecx
  00442	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00445	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0044b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0044e	03 c2		 add	 eax, edx

; 337  : }

  00450	8b e5		 mov	 esp, ebp
  00452	5d		 pop	 ebp
  00453	c3		 ret	 0
_crc32_big ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _crc32_little
_TEXT	SEGMENT
_c$ = -8						; size = 4
_buf4$ = -4						; size = 4
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32_little PROC					; COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 271  :     register z_crc_t c;
; 272  :     register const z_crc_t FAR *buf4;
; 273  : 
; 274  :     c = (z_crc_t)crc;

  00006	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 275  :     c = ~c;

  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0000f	f7 d1		 not	 ecx
  00011	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
$LN10@crc32_litt:

; 276  :     while (len && ((ptrdiff_t)buf & 3)) {

  00014	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  00018	74 3b		 je	 SHORT $LN9@crc32_litt
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0001d	83 e2 03	 and	 edx, 3
  00020	74 33		 je	 SHORT $LN9@crc32_litt

; 277  :         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);

  00022	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00025	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00028	33 4d f8	 xor	 ecx, DWORD PTR _c$[ebp]
  0002b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00031	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00034	c1 ea 08	 shr	 edx, 8
  00037	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  0003e	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  00041	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 278  :         len--;

  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0004d	83 e9 01	 sub	 ecx, 1
  00050	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 279  :     }

  00053	eb bf		 jmp	 SHORT $LN10@crc32_litt
$LN9@crc32_litt:

; 280  : 
; 281  :     buf4 = (const z_crc_t FAR *)(const void FAR *)buf;

  00055	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00058	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
$LN8@crc32_litt:

; 282  :     while (len >= 32) {

  0005b	83 7d 10 20	 cmp	 DWORD PTR _len$[ebp], 32 ; 00000020H
  0005f	0f 82 d5 02 00
	00		 jb	 $LN6@crc32_litt

; 283  :         DOLIT32;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0006b	33 08		 xor	 ecx, DWORD PTR [eax]
  0006d	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00070	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  00073	83 c2 04	 add	 edx, 4
  00076	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  00079	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0007c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00084	c1 e9 08	 shr	 ecx, 8
  00087	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0008d	8b 14 85 00 0c
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+3072]
  00094	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+2048]
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0009e	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a6	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+1024]
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  000b0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000b3	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  000ba	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  000bd	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000c3	33 02		 xor	 eax, DWORD PTR [edx]
  000c5	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  000cb	83 c1 04	 add	 ecx, 4
  000ce	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  000d1	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  000d4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000da	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  000dd	c1 e8 08	 shr	 eax, 8
  000e0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e5	8b 0c 95 00 0c
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+3072]
  000ec	33 0c 85 00 08
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+2048]
  000f3	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  000f6	c1 ea 10	 shr	 edx, 16			; 00000010H
  000f9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000ff	33 0c 95 00 04
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+1024]
  00106	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00109	c1 e8 18	 shr	 eax, 24			; 00000018H
  0010c	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00113	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00116	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  00119	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0011c	33 11		 xor	 edx, DWORD PTR [ecx]
  0011e	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  00121	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00124	83 c0 04	 add	 eax, 4
  00127	89 45 fc	 mov	 DWORD PTR _buf4$[ebp], eax
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0012d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00133	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00136	c1 ea 08	 shr	 edx, 8
  00139	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0013f	8b 04 8d 00 0c
	00 00		 mov	 eax, DWORD PTR _crc_table[ecx*4+3072]
  00146	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+2048]
  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00150	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00153	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00159	33 04 8d 00 04
	00 00		 xor	 eax, DWORD PTR _crc_table[ecx*4+1024]
  00160	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00163	c1 ea 18	 shr	 edx, 24			; 00000018H
  00166	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4]
  0016d	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  00170	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  00173	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00176	33 08		 xor	 ecx, DWORD PTR [eax]
  00178	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  0017e	83 c2 04	 add	 edx, 4
  00181	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  00184	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00187	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0018c	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0018f	c1 e9 08	 shr	 ecx, 8
  00192	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00198	8b 14 85 00 0c
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+3072]
  0019f	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+2048]
  001a6	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001a9	c1 e8 10	 shr	 eax, 16			; 00000010H
  001ac	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001b1	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+1024]
  001b8	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  001bb	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001be	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  001c5	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  001c8	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  001cb	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001ce	33 02		 xor	 eax, DWORD PTR [edx]
  001d0	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  001d3	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  001d6	83 c1 04	 add	 ecx, 4
  001d9	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  001dc	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  001df	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001e5	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  001e8	c1 e8 08	 shr	 eax, 8
  001eb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f0	8b 0c 95 00 0c
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+3072]
  001f7	33 0c 85 00 08
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+2048]
  001fe	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00201	c1 ea 10	 shr	 edx, 16			; 00000010H
  00204	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0020a	33 0c 95 00 04
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+1024]
  00211	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00214	c1 e8 18	 shr	 eax, 24			; 00000018H
  00217	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  0021e	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00221	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  00224	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00227	33 11		 xor	 edx, DWORD PTR [ecx]
  00229	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  0022c	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  0022f	83 c0 04	 add	 eax, 4
  00232	89 45 fc	 mov	 DWORD PTR _buf4$[ebp], eax
  00235	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00238	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0023e	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00241	c1 ea 08	 shr	 edx, 8
  00244	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0024a	8b 04 8d 00 0c
	00 00		 mov	 eax, DWORD PTR _crc_table[ecx*4+3072]
  00251	33 04 95 00 08
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4+2048]
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0025b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0025e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00264	33 04 8d 00 04
	00 00		 xor	 eax, DWORD PTR _crc_table[ecx*4+1024]
  0026b	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0026e	c1 ea 18	 shr	 edx, 24			; 00000018H
  00271	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4]
  00278	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  0027b	8b 45 fc	 mov	 eax, DWORD PTR _buf4$[ebp]
  0027e	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00281	33 08		 xor	 ecx, DWORD PTR [eax]
  00283	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
  00286	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  00289	83 c2 04	 add	 edx, 4
  0028c	89 55 fc	 mov	 DWORD PTR _buf4$[ebp], edx
  0028f	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00292	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00297	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  0029a	c1 e9 08	 shr	 ecx, 8
  0029d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  002a3	8b 14 85 00 0c
	00 00		 mov	 edx, DWORD PTR _crc_table[eax*4+3072]
  002aa	33 14 8d 00 08
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4+2048]
  002b1	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  002b4	c1 e8 10	 shr	 eax, 16			; 00000010H
  002b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002bc	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4+1024]
  002c3	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  002c6	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002c9	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  002d0	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  002d3	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  002d6	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  002d9	33 02		 xor	 eax, DWORD PTR [edx]
  002db	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  002de	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  002e1	83 c1 04	 add	 ecx, 4
  002e4	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  002e7	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  002ea	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  002f0	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  002f3	c1 e8 08	 shr	 eax, 8
  002f6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002fb	8b 0c 95 00 0c
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+3072]
  00302	33 0c 85 00 08
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+2048]
  00309	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0030c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0030f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00315	33 0c 95 00 04
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+1024]
  0031c	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0031f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00322	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00329	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx

; 284  :         len -= 32;

  0032c	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0032f	83 e9 20	 sub	 ecx, 32			; 00000020H
  00332	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 285  :     }

  00335	e9 21 fd ff ff	 jmp	 $LN8@crc32_litt
$LN6@crc32_litt:

; 286  :     while (len >= 4) {

  0033a	83 7d 10 04	 cmp	 DWORD PTR _len$[ebp], 4
  0033e	72 64		 jb	 SHORT $LN5@crc32_litt

; 287  :         DOLIT4;

  00340	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  00343	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00346	33 02		 xor	 eax, DWORD PTR [edx]
  00348	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax
  0034b	8b 4d fc	 mov	 ecx, DWORD PTR _buf4$[ebp]
  0034e	83 c1 04	 add	 ecx, 4
  00351	89 4d fc	 mov	 DWORD PTR _buf4$[ebp], ecx
  00354	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00357	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0035d	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  00360	c1 e8 08	 shr	 eax, 8
  00363	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00368	8b 0c 95 00 0c
	00 00		 mov	 ecx, DWORD PTR _crc_table[edx*4+3072]
  0036f	33 0c 85 00 08
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4+2048]
  00376	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  00379	c1 ea 10	 shr	 edx, 16			; 00000010H
  0037c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00382	33 0c 95 00 04
	00 00		 xor	 ecx, DWORD PTR _crc_table[edx*4+1024]
  00389	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]
  0038c	c1 e8 18	 shr	 eax, 24			; 00000018H
  0038f	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00396	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx

; 288  :         len -= 4;

  00399	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0039c	83 e9 04	 sub	 ecx, 4
  0039f	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 289  :     }

  003a2	eb 96		 jmp	 SHORT $LN6@crc32_litt
$LN5@crc32_litt:

; 290  :     buf = (const unsigned char FAR *)buf4;

  003a4	8b 55 fc	 mov	 edx, DWORD PTR _buf4$[ebp]
  003a7	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx

; 291  : 
; 292  :     if (len) do {

  003aa	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  003ae	74 33		 je	 SHORT $LN4@crc32_litt
$LN3@crc32_litt:

; 293  :         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);

  003b0	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  003b3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003b6	33 4d f8	 xor	 ecx, DWORD PTR _c$[ebp]
  003b9	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003bf	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  003c2	c1 ea 08	 shr	 edx, 8
  003c5	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  003cc	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx
  003cf	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  003d2	83 c0 01	 add	 eax, 1
  003d5	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 294  :     } while (--len);

  003d8	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  003db	83 e9 01	 sub	 ecx, 1
  003de	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx
  003e1	75 cd		 jne	 SHORT $LN3@crc32_litt
$LN4@crc32_litt:

; 295  :     c = ~c;

  003e3	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  003e6	f7 d2		 not	 edx
  003e8	89 55 f8	 mov	 DWORD PTR _c$[ebp], edx

; 296  :     return (unsigned long)c;

  003eb	8b 45 f8	 mov	 eax, DWORD PTR _c$[ebp]

; 297  : }

  003ee	8b e5		 mov	 esp, ebp
  003f0	5d		 pop	 ebp
  003f1	c3		 ret	 0
_crc32_little ENDP
_TEXT	ENDS
PUBLIC	_crc32_z@12
; Function compile flags: /Odtp
;	COMDAT _crc32_z@12
_TEXT	SEGMENT
_endian$77553 = -4					; size = 4
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32_z@12 PROC					; COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 207  :     if (buf == Z_NULL) return 0UL;

  00004	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00008	75 07		 jne	 SHORT $LN10@crc32_z
  0000a	33 c0		 xor	 eax, eax
  0000c	e9 ea 01 00 00	 jmp	 $LN11@crc32_z
$LN10@crc32_z:

; 208  : 
; 209  : #ifdef DYNAMIC_CRC_TABLE
; 210  :     if (crc_table_empty)
; 211  :         make_crc_table();
; 212  : #endif /* DYNAMIC_CRC_TABLE */
; 213  : 
; 214  : #ifdef BYFOUR
; 215  :     if (sizeof(void *) == sizeof(ptrdiff_t)) {

  00011	b8 01 00 00 00	 mov	 eax, 1
  00016	85 c0		 test	 eax, eax
  00018	74 43		 je	 SHORT $LN9@crc32_z

; 216  :         z_crc_t endian;
; 217  : 
; 218  :         endian = 1;

  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _endian$77553[ebp], 1

; 219  :         if (*((unsigned char *)(&endian)))

  00021	0f b6 4d fc	 movzx	 ecx, BYTE PTR _endian$77553[ebp]
  00025	85 c9		 test	 ecx, ecx
  00027	74 1b		 je	 SHORT $LN8@crc32_z

; 220  :             return crc32_little(crc, buf, len);

  00029	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _crc32_little
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	e9 b9 01 00 00	 jmp	 $LN11@crc32_z

; 221  :         else

  00042	eb 19		 jmp	 SHORT $LN9@crc32_z
$LN8@crc32_z:

; 222  :             return crc32_big(crc, buf, len);

  00044	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00047	52		 push	 edx
  00048	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _crc32_big
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	e9 9e 01 00 00	 jmp	 $LN11@crc32_z
$LN9@crc32_z:

; 223  :     }
; 224  : #endif /* BYFOUR */
; 225  :     crc = crc ^ 0xffffffffUL;

  0005d	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  00060	83 f2 ff	 xor	 edx, -1
  00063	89 55 08	 mov	 DWORD PTR _crc$[ebp], edx
$LN6@crc32_z:

; 226  :     while (len >= 8) {

  00066	83 7d 10 08	 cmp	 DWORD PTR _len$[ebp], 8
  0006a	0f 82 4c 01 00
	00		 jb	 $LN5@crc32_z

; 227  :         DO8;

  00070	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00073	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00076	33 4d 08	 xor	 ecx, DWORD PTR _crc$[ebp]
  00079	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0007f	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  00082	c1 ea 08	 shr	 edx, 8
  00085	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  0008c	89 55 08	 mov	 DWORD PTR _crc$[ebp], edx
  0008f	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00092	83 c0 01	 add	 eax, 1
  00095	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  0009b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0009e	33 55 08	 xor	 edx, DWORD PTR _crc$[ebp]
  000a1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a7	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  000aa	c1 e8 08	 shr	 eax, 8
  000ad	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4]
  000b4	89 45 08	 mov	 DWORD PTR _crc$[ebp], eax
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000ba	83 c1 01	 add	 ecx, 1
  000bd	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx
  000c0	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000c3	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000c6	33 45 08	 xor	 eax, DWORD PTR _crc$[ebp]
  000c9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  000d1	c1 e9 08	 shr	 ecx, 8
  000d4	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  000db	89 4d 08	 mov	 DWORD PTR _crc$[ebp], ecx
  000de	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000e1	83 c2 01	 add	 edx, 1
  000e4	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx
  000e7	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  000ea	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ed	33 4d 08	 xor	 ecx, DWORD PTR _crc$[ebp]
  000f0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000f6	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  000f9	c1 ea 08	 shr	 edx, 8
  000fc	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  00103	89 55 08	 mov	 DWORD PTR _crc$[ebp], edx
  00106	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00109	83 c0 01	 add	 eax, 1
  0010c	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax
  0010f	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00112	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00115	33 55 08	 xor	 edx, DWORD PTR _crc$[ebp]
  00118	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0011e	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  00121	c1 e8 08	 shr	 eax, 8
  00124	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4]
  0012b	89 45 08	 mov	 DWORD PTR _crc$[ebp], eax
  0012e	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00131	83 c1 01	 add	 ecx, 1
  00134	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx
  00137	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0013a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0013d	33 45 08	 xor	 eax, DWORD PTR _crc$[ebp]
  00140	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  00148	c1 e9 08	 shr	 ecx, 8
  0014b	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00152	89 4d 08	 mov	 DWORD PTR _crc$[ebp], ecx
  00155	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00158	83 c2 01	 add	 edx, 1
  0015b	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx
  0015e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00161	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00164	33 4d 08	 xor	 ecx, DWORD PTR _crc$[ebp]
  00167	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0016d	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  00170	c1 ea 08	 shr	 edx, 8
  00173	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  0017a	89 55 08	 mov	 DWORD PTR _crc$[ebp], edx
  0017d	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00180	83 c0 01	 add	 eax, 1
  00183	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax
  00186	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00189	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0018c	33 55 08	 xor	 edx, DWORD PTR _crc$[ebp]
  0018f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00195	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  00198	c1 e8 08	 shr	 eax, 8
  0019b	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _crc_table[edx*4]
  001a2	89 45 08	 mov	 DWORD PTR _crc$[ebp], eax
  001a5	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  001a8	83 c1 01	 add	 ecx, 1
  001ab	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 228  :         len -= 8;

  001ae	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  001b1	83 ea 08	 sub	 edx, 8
  001b4	89 55 10	 mov	 DWORD PTR _len$[ebp], edx

; 229  :     }

  001b7	e9 aa fe ff ff	 jmp	 $LN6@crc32_z
$LN5@crc32_z:

; 230  :     if (len) do {

  001bc	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  001c0	74 33		 je	 SHORT $LN4@crc32_z
$LN3@crc32_z:

; 231  :         DO1;

  001c2	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001c5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c8	33 4d 08	 xor	 ecx, DWORD PTR _crc$[ebp]
  001cb	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001d1	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  001d4	c1 ea 08	 shr	 edx, 8
  001d7	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  001de	89 55 08	 mov	 DWORD PTR _crc$[ebp], edx
  001e1	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001e4	83 c0 01	 add	 eax, 1
  001e7	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 232  :     } while (--len);

  001ea	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  001ed	83 e9 01	 sub	 ecx, 1
  001f0	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx
  001f3	75 cd		 jne	 SHORT $LN3@crc32_z
$LN4@crc32_z:

; 233  :     return crc ^ 0xffffffffUL;

  001f5	8b 45 08	 mov	 eax, DWORD PTR _crc$[ebp]
  001f8	83 f0 ff	 xor	 eax, -1
$LN11@crc32_z:

; 234  : }

  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 0c 00	 ret	 12			; 0000000cH
_crc32_z@12 ENDP
_TEXT	ENDS
PUBLIC	_get_crc_table@0
; Function compile flags: /Odtp
;	COMDAT _get_crc_table@0
_TEXT	SEGMENT
_get_crc_table@0 PROC					; COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : #ifdef DYNAMIC_CRC_TABLE
; 191  :     if (crc_table_empty)
; 192  :         make_crc_table();
; 193  : #endif /* DYNAMIC_CRC_TABLE */
; 194  :     return (const z_crc_t FAR *)crc_table;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET _crc_table

; 195  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
_get_crc_table@0 ENDP
; Function compile flags: /Odtp
;	COMDAT _gf2_matrix_square
_TEXT	SEGMENT
_n$ = -4						; size = 4
_square$ = 8						; size = 4
_mat$ = 12						; size = 4
_gf2_matrix_square PROC					; COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 365  :     int n;
; 366  : 
; 367  :     for (n = 0; n < GF2_DIM; n++)

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000b	eb 09		 jmp	 SHORT $LN3@gf2_matrix@2
$LN2@gf2_matrix@2:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN3@gf2_matrix@2:
  00016	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  0001a	7d 21		 jge	 SHORT $LN4@gf2_matrix@2

; 368  :         square[n] = gf2_matrix_times(mat, mat[n]);

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0001f	8b 55 0c	 mov	 edx, DWORD PTR _mat$[ebp]
  00022	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 _gf2_matrix_times
  0002f	83 c4 08	 add	 esp, 8
  00032	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _square$[ebp]
  00038	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  0003b	eb d0		 jmp	 SHORT $LN2@gf2_matrix@2
$LN4@gf2_matrix@2:

; 369  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_gf2_matrix_square ENDP
_TEXT	ENDS
PUBLIC	_crc32@12
; Function compile flags: /Odtp
;	COMDAT _crc32@12
_TEXT	SEGMENT
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32@12 PROC						; COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 242  :     return crc32_z(crc, buf, len);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _crc$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _crc32_z@12

; 243  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_crc32@12 ENDP
EXTRN	__allshr:PROC
; Function compile flags: /Odtp
;	COMDAT _crc32_combine_
_TEXT	SEGMENT
tv169 = -284						; size = 8
tv142 = -276						; size = 8
_row$ = -268						; size = 4
_even$ = -264						; size = 128
_odd$ = -136						; size = 128
_n$ = -4						; size = 4
_crc1$ = 8						; size = 4
_crc2$ = 12						; size = 4
_len2$ = 16						; size = 8
_crc32_combine_ PROC					; COMDAT

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH

; 377  :     int n;
; 378  :     unsigned long row;
; 379  :     unsigned long even[GF2_DIM];    /* even-power-of-two zeros operator */
; 380  :     unsigned long odd[GF2_DIM];     /* odd-power-of-two zeros operator */
; 381  : 
; 382  :     /* degenerate case (also disallow negative lengths) */
; 383  :     if (len2 <= 0)

  00009	83 7d 14 00	 cmp	 DWORD PTR _len2$[ebp+4], 0
  0000d	7f 10		 jg	 SHORT $LN10@crc32_comb
  0000f	7c 06		 jl	 SHORT $LN13@crc32_comb
  00011	83 7d 10 00	 cmp	 DWORD PTR _len2$[ebp], 0
  00015	77 08		 ja	 SHORT $LN10@crc32_comb
$LN13@crc32_comb:

; 384  :         return crc1;

  00017	8b 45 08	 mov	 eax, DWORD PTR _crc1$[ebp]
  0001a	e9 64 01 00 00	 jmp	 $LN11@crc32_comb
$LN10@crc32_comb:

; 385  : 
; 386  :     /* put operator for one zero bit in odd */
; 387  :     odd[0] = 0xedb88320UL;          /* CRC-32 polynomial */

  0001f	c7 85 78 ff ff
	ff 20 83 b8 ed	 mov	 DWORD PTR _odd$[ebp], -306674912 ; edb88320H

; 388  :     row = 1;

  00029	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _row$[ebp], 1

; 389  :     for (n = 1; n < GF2_DIM; n++) {

  00033	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _n$[ebp], 1
  0003a	eb 09		 jmp	 SHORT $LN9@crc32_comb
$LN8@crc32_comb:
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@crc32_comb:
  00045	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  00049	7d 20		 jge	 SHORT $LN7@crc32_comb

; 390  :         odd[n] = row;

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0004e	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _row$[ebp]
  00054	89 94 8d 78 ff
	ff ff		 mov	 DWORD PTR _odd$[ebp+ecx*4], edx

; 391  :         row <<= 1;

  0005b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _row$[ebp]
  00061	d1 e0		 shl	 eax, 1
  00063	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _row$[ebp], eax

; 392  :     }

  00069	eb d1		 jmp	 SHORT $LN8@crc32_comb
$LN7@crc32_comb:

; 393  : 
; 394  :     /* put operator for two zero bits in even */
; 395  :     gf2_matrix_square(even, odd);

  0006b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _odd$[ebp]
  00071	51		 push	 ecx
  00072	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _even$[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 _gf2_matrix_square
  0007e	83 c4 08	 add	 esp, 8

; 396  : 
; 397  :     /* put operator for four zero bits in odd */
; 398  :     gf2_matrix_square(odd, even);

  00081	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _even$[ebp]
  00087	50		 push	 eax
  00088	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _odd$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _gf2_matrix_square
  00094	83 c4 08	 add	 esp, 8
$LN6@crc32_comb:

; 399  : 
; 400  :     /* apply len2 zeros to crc1 (first square will put the operator for one
; 401  :        zero byte, eight zero bits, in even) */
; 402  :     do {
; 403  :         /* apply zeros operator for this bit of len2 */
; 404  :         gf2_matrix_square(even, odd);

  00097	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _odd$[ebp]
  0009d	52		 push	 edx
  0009e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _even$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _gf2_matrix_square
  000aa	83 c4 08	 add	 esp, 8

; 405  :         if (len2 & 1)

  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _len2$[ebp]
  000b0	83 e1 01	 and	 ecx, 1
  000b3	8b 55 14	 mov	 edx, DWORD PTR _len2$[ebp+4]
  000b6	83 e2 00	 and	 edx, 0
  000b9	89 8d ec fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  000bf	89 95 f0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp+4], edx
  000c5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  000cb	0b 85 f0 fe ff
	ff		 or	 eax, DWORD PTR tv142[ebp+4]
  000d1	74 16		 je	 SHORT $LN3@crc32_comb

; 406  :             crc1 = gf2_matrix_times(even, crc1);

  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _crc1$[ebp]
  000d6	51		 push	 ecx
  000d7	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _even$[ebp]
  000dd	52		 push	 edx
  000de	e8 00 00 00 00	 call	 _gf2_matrix_times
  000e3	83 c4 08	 add	 esp, 8
  000e6	89 45 08	 mov	 DWORD PTR _crc1$[ebp], eax
$LN3@crc32_comb:

; 407  :         len2 >>= 1;

  000e9	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  000ec	8b 55 14	 mov	 edx, DWORD PTR _len2$[ebp+4]
  000ef	b1 01		 mov	 cl, 1
  000f1	e8 00 00 00 00	 call	 __allshr
  000f6	89 45 10	 mov	 DWORD PTR _len2$[ebp], eax
  000f9	89 55 14	 mov	 DWORD PTR _len2$[ebp+4], edx

; 408  : 
; 409  :         /* if no more bits set, then done */
; 410  :         if (len2 == 0)

  000fc	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  000ff	0b 45 14	 or	 eax, DWORD PTR _len2$[ebp+4]
  00102	75 02		 jne	 SHORT $LN2@crc32_comb

; 411  :             break;

  00104	eb 71		 jmp	 SHORT $LN4@crc32_comb
$LN2@crc32_comb:

; 412  : 
; 413  :         /* another iteration of the loop with odd and even swapped */
; 414  :         gf2_matrix_square(odd, even);

  00106	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _even$[ebp]
  0010c	51		 push	 ecx
  0010d	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _odd$[ebp]
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 _gf2_matrix_square
  00119	83 c4 08	 add	 esp, 8

; 415  :         if (len2 & 1)

  0011c	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  0011f	83 e0 01	 and	 eax, 1
  00122	8b 4d 14	 mov	 ecx, DWORD PTR _len2$[ebp+4]
  00125	83 e1 00	 and	 ecx, 0
  00128	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv169[ebp], eax
  0012e	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv169[ebp+4], ecx
  00134	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR tv169[ebp]
  0013a	0b 95 e8 fe ff
	ff		 or	 edx, DWORD PTR tv169[ebp+4]
  00140	74 16		 je	 SHORT $LN1@crc32_comb

; 416  :             crc1 = gf2_matrix_times(odd, crc1);

  00142	8b 45 08	 mov	 eax, DWORD PTR _crc1$[ebp]
  00145	50		 push	 eax
  00146	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _odd$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _gf2_matrix_times
  00152	83 c4 08	 add	 esp, 8
  00155	89 45 08	 mov	 DWORD PTR _crc1$[ebp], eax
$LN1@crc32_comb:

; 417  :         len2 >>= 1;

  00158	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  0015b	8b 55 14	 mov	 edx, DWORD PTR _len2$[ebp+4]
  0015e	b1 01		 mov	 cl, 1
  00160	e8 00 00 00 00	 call	 __allshr
  00165	89 45 10	 mov	 DWORD PTR _len2$[ebp], eax
  00168	89 55 14	 mov	 DWORD PTR _len2$[ebp+4], edx

; 418  : 
; 419  :         /* if no more bits set, then done */
; 420  :     } while (len2 != 0);

  0016b	8b 55 10	 mov	 edx, DWORD PTR _len2$[ebp]
  0016e	0b 55 14	 or	 edx, DWORD PTR _len2$[ebp+4]
  00171	0f 85 20 ff ff
	ff		 jne	 $LN6@crc32_comb
$LN4@crc32_comb:

; 421  : 
; 422  :     /* return combined crc */
; 423  :     crc1 ^= crc2;

  00177	8b 45 08	 mov	 eax, DWORD PTR _crc1$[ebp]
  0017a	33 45 0c	 xor	 eax, DWORD PTR _crc2$[ebp]
  0017d	89 45 08	 mov	 DWORD PTR _crc1$[ebp], eax

; 424  :     return crc1;

  00180	8b 45 08	 mov	 eax, DWORD PTR _crc1$[ebp]
$LN11@crc32_comb:

; 425  : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
_crc32_combine_ ENDP
PUBLIC	_crc32_combine@12
; Function compile flags: /Odtp
;	COMDAT _crc32_combine@12
_TEXT	SEGMENT
_crc1$ = 8						; size = 4
_crc2$ = 12						; size = 4
_len2$ = 16						; size = 4
_crc32_combine@12 PROC					; COMDAT

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 433  :     return crc32_combine_(crc1, crc2, len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	99		 cdq
  00007	52		 push	 edx
  00008	50		 push	 eax
  00009	8b 45 0c	 mov	 eax, DWORD PTR _crc2$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _crc1$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _crc32_combine_
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 434  : }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
_crc32_combine@12 ENDP
END
