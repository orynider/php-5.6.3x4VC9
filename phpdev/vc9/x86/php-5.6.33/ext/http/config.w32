// config.w32 for pecl/http
// $Id$

ARG_ENABLE("http", "whether to enable extended HTTP support", "no");
function check_for_main_ext(ext, header)
{
	if (!header) {
		header = "php_"+ ext +".h";
	}
	/* When in configure, we're always in the root of PHP source */
	var ext_path = "ext\\" + ext;
	STDOUT.Write("Checking for ext/"+ ext +" ...  ");
	if (FSO.FileExists(ext_path + "\\" + header)) {
		STDOUT.WriteLine(ext_path);
		return ext_path;
	}
	STDOUT.WriteLine("<not found>");
	return false;
}
function check_for_pecl_ext(ext, header)
{
	if (!header) {
		header = "php_"+ ext +".h";
	}
	var g;
	var s = ext +"\\"+ header;
	STDOUT.Write("Checking for pecl/"+ ext +" ...  ");
	if (	(g = glob(configure_module_dirname +"\\..\\"+ s)) ||
			(g = glob(configure_module_dirname +"\\..\\..\\..\\pecl\\"+ s))) {
		var f = g[0].substr(0, g[0].length - header.length - 1);
		STDOUT.WriteLine(f);
		return f;
	}
	STDOUT.WriteLine("<not found>");
	return false;
}

if (PHP_HTTP != "no") {
	EXTENSION("http",
		"missing.c http.c http_functions.c http_exception_object.c "+
		"http_util_object.c http_message_object.c http_requestpool_object.c "+
		"http_request_object.c http_response_object.c "+
		"http_api.c http_cache_api.c http_request_pool_api.c "+
		"http_request_api.c http_date_api.c http_headers_api.c "+
		"http_message_api.c http_send_api.c http_url_api.c "+
		"http_info_api.c http_request_method_api.c http_encoding_api.c "+
		"http_filter_api.c http_request_body_api.c http_querystring_object.c "+
		"http_deflatestream_object.c http_inflatestream_object.c "+
		"http_cookie_api.c http_querystring_api.c http_request_datashare_api.c "+
		"http_requestdatashare_object.c http_request_info.c http_persistent_handle_api.c",
		null,
		"/I\"" + configure_module_dirname + "/phpstr\"");
	ADD_SOURCES(configure_module_dirname + "/phpstr", "phpstr.c", "http");
	AC_DEFINE("HAVE_HTTP", 1, "Have extended HTTP support");
	AC_DEFINE("HTTP_SHARED_DEPS", 1, "Depend on shared extensions");
	
	AC_DEFINE("HAVE_GETHOSTNAME", 1);
	AC_DEFINE("HAVE_GETSERVBYPORT", 1);
	AC_DEFINE("HAVE_GETSERVBYNAME", 1);
	
	if (PHP_DEBUG != "no") {
		ADD_FLAG("CFLAGS_HTTP", "/W3");
	}
	
	if (CHECK_HEADER_ADD_INCLUDE('zlib.h', 'CFLAGS_HTTP', '..\\zlib;' + php_usual_include_suspects)) {
		AC_DEFINE('HTTP_HAVE_ZLIB', 1, "Have zlib library");
		ADD_FLAG("LDFLAGS_HTTP", "/FORCE:MULTIPLE");
	} else {
		WARNING("zlib encoding functions not enabled; libraries and headers not found");
	}
	
	if (typeof(PHP_HASH) != "undefined" && PHP_HASH != "no") {
		var f;
		
		if ((f = check_for_pecl_ext("hash")) || (f = check_for_main_ext("hash"))) {
			ADD_FLAG("CFLAGS_HTTP", '/I "' + f + '" /DHTTP_HAVE_PHP_HASH_H=1');
			ADD_EXTENSION_DEP("http", "hash", true);
		}
	}
	
	if (PHP_SESSION != "no") {
		ADD_EXTENSION_DEP("http", "session", true);
	}
	
	if (PHP_ICONV != "no") {
		ADD_EXTENSION_DEP("http", "iconv", true);
	}
	
	CURL_LIB="libcurl_a.lib;libcurl.lib;" + (PHP_DEBUG != "no" ? "libcurld.lib":"libcurl.lib");
	if (CHECK_HEADER_ADD_INCLUDE("curl/curl.h", "CFLAGS_HTTP") &&
			CHECK_HEADER_ADD_INCLUDE("openssl/crypto.h", "CFLAGS_HTTP") &&
			CHECK_LIB(CURL_LIB, "http", PHP_HTTP) &&
			CHECK_LIB("ssleay32.lib", "http", PHP_HTTP) &&
			CHECK_LIB("libeay32.lib", "http", PHP_HTTP) &&
			CHECK_LIB("zlib.lib;zlib_a.lib", "http", PHP_HTTP) &&
			CHECK_LIB("winmm.lib", "http", PHP_HTTP)) {
		AC_DEFINE("HTTP_HAVE_CURL", 1, "Have CURL library");
		AC_DEFINE("HTTP_HAVE_SSL", 1, "Have SSL");
		AC_DEFINE("HAVE_CURL_MULTI_STRERROR", 1, "");
		AC_DEFINE("HAVE_CURL_SHARE_STRERROR", 1, "");
		AC_DEFINE("HAVE_CURL_EASY_STRERROR", 1, "");
		AC_DEFINE("HAVE_CURL_EASY_RESET", 1, "");
		AC_DEFINE("HAVE_CURL_GETFORMDATA", 1, "");
		AC_DEFINE("HAVE_CURL_FORMGET", 1, "");
		AC_DEFINE("HAVE_CURL_MULTI_SETOPT", 1, "");
		AC_DEFINE("HAVE_CURL_MULTI_TIMEOUT", 1, "");
	} else {
		WARNING("curl convenience functions not enabled; libraries and headers not found");
	}
/*
//	MAGIC_LIB = PHP_DEBUG != "no" ? "libmagic-staticd.lib":"libmagic-static.lib";
//	if (CHECK_HEADER_ADD_INCLUDE("magic.h", "CFLAGS_HTTP") &&
//			CHECK_LIB(MAGIC_LIB, "http", PHP_HTTP)) {
//		AC_DEFINE("HTTP_HAVE_MAGIC", 1, "Have magic library");
//		AC_DEFINE("USE_MAGIC_STATIC", "", "");
//	} else {
//		WARNING("content type guessing not enabled; libraries and headers not found");
//	}
*/
}
