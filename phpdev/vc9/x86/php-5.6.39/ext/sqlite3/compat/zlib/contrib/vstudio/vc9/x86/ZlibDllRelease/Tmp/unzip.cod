; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\unzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_unz_copyright
EXTRN	_strcmp:PROC
	ORG $+1
_unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:'
	DB	'//www.winimage.com/zLibDll', 00H
PUBLIC	_unzeof@4
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\unzip.c
;	COMDAT _unzeof@4
_TEXT	SEGMENT
tv75 = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzeof@4 PROC						; COMDAT

; 1925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN4@unzeof

; 1929 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	eb 44		 jmp	 SHORT $LN5@unzeof
$LN4@unzeof:

; 1930 :     s=(unz64_s*)file;

  00013	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00022	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00025	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00029	75 07		 jne	 SHORT $LN3@unzeof

; 1934 :         return UNZ_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00030	eb 25		 jmp	 SHORT $LN5@unzeof
$LN3@unzeof:

; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00032	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00035	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
  00038	8b 4d f4	 mov	 ecx, DWORD PTR tv75[ebp]
  0003b	8b 55 f4	 mov	 edx, DWORD PTR tv75[ebp]
  0003e	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00044	0b 82 84 00 00
	00		 or	 eax, DWORD PTR [edx+132]
  0004a	75 09		 jne	 SHORT $LN2@unzeof

; 1937 :         return 1;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	eb 04		 jmp	 SHORT $LN5@unzeof

; 1938 :     else

  00053	eb 02		 jmp	 SHORT $LN5@unzeof
$LN2@unzeof:

; 1939 :         return 0;

  00055	33 c0		 xor	 eax, eax
$LN5@unzeof:

; 1940 : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
_unzeof@4 ENDP
_TEXT	ENDS
PUBLIC	_unztell64@4
; Function compile flags: /Odtp
;	COMDAT _unztell64@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unztell64@4 PROC					; COMDAT

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 08		 jne	 SHORT $LN2@unztell64

; 1910 :         return (ZPOS64_T)-1;

  0000c	83 c8 ff	 or	 eax, -1
  0000f	83 ca ff	 or	 edx, -1
  00012	eb 29		 jmp	 SHORT $LN3@unztell64
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;

  00014	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00017	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001d	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00023	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  00026	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0002a	75 08		 jne	 SHORT $LN1@unztell64

; 1915 :         return (ZPOS64_T)-1;

  0002c	83 c8 ff	 or	 eax, -1
  0002f	83 ca ff	 or	 edx, -1
  00032	eb 09		 jmp	 SHORT $LN3@unztell64
$LN1@unztell64:

; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  00034	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00037	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  0003a	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
$LN3@unztell64:

; 1918 : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
_unztell64@4 ENDP
_TEXT	ENDS
PUBLIC	_unztell@4
; Function compile flags: /Odtp
;	COMDAT _unztell@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unztell@4 PROC						; COMDAT

; 1890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN2@unztell

; 1894 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	eb 25		 jmp	 SHORT $LN3@unztell
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;

  00013	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00022	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  00025	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00029	75 07		 jne	 SHORT $LN1@unztell

; 1899 :         return UNZ_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00030	eb 06		 jmp	 SHORT $LN3@unztell
$LN1@unztell:

; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
$LN3@unztell:

; 1902 : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
_unztell@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGetCurrentFileZStreamPos64@4
; Function compile flags: /Odtp
;	COMDAT _unzGetCurrentFileZStreamPos64@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGetCurrentFileZStreamPos64@4 PROC			; COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;

  00007	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1663 :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 06		 jne	 SHORT $LN2@unzGetCurr

; 1664 :         return 0; //UNZ_PARAMERROR;

  00013	33 c0		 xor	 eax, eax
  00015	33 d2		 xor	 edx, edx
  00017	eb 34		 jmp	 SHORT $LN3@unzGetCurr
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00022	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1666 :     if (pfile_in_zip_read_info==NULL)

  00025	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00029	75 06		 jne	 SHORT $LN1@unzGetCurr

; 1667 :         return 0; //UNZ_PARAMERROR;

  0002b	33 c0		 xor	 eax, eax
  0002d	33 d2		 xor	 edx, edx
  0002f	eb 1c		 jmp	 SHORT $LN3@unzGetCurr
$LN1@unzGetCurr:

; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +
; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00037	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  0003a	03 91 c0 00 00
	00		 add	 edx, DWORD PTR [ecx+192]
  00040	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
  00043	13 b1 c4 00 00
	00		 adc	 esi, DWORD PTR [ecx+196]
  00049	8b c2		 mov	 eax, edx
  0004b	8b d6		 mov	 edx, esi
$LN3@unzGetCurr:

; 1670 : }

  0004d	5e		 pop	 esi
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
_unzGetCurrentFileZStreamPos64@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGetFilePos64@8
; Function compile flags: /Odtp
;	COMDAT _unzGetFilePos64@8
_TEXT	SEGMENT
tv74 = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos64@8 PROC					; COMDAT

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	74 06		 je	 SHORT $LN2@unzGetFile
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  00010	75 07		 jne	 SHORT $LN3@unzGetFile
$LN2@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00017	eb 46		 jmp	 SHORT $LN4@unzGetFile
$LN3@unzGetFile:

; 1314 :     s=(unz64_s*)file;

  00019	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001c	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1315 :     if (!s->current_file_ok)

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00022	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
  00025	8b 55 f8	 mov	 edx, DWORD PTR tv74[ebp]
  00028	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]
  0002b	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  0002e	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  00031	75 07		 jne	 SHORT $LN1@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  00033	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00038	eb 25		 jmp	 SHORT $LN4@unzGetFile
$LN1@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00040	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00043	89 0a		 mov	 DWORD PTR [edx], ecx
  00045	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00048	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1319 :     file_pos->num_of_file           = s->num_file;

  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00051	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00054	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00057	8b 52 54	 mov	 edx, DWORD PTR [edx+84]
  0005a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1320 : 
; 1321 :     return UNZ_OK;

  0005d	33 c0		 xor	 eax, eax
$LN4@unzGetFile:

; 1322 : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
_unzGetFilePos64@8 ENDP
_TEXT	ENDS
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
; Function compile flags: /Odtp
;	COMDAT _unz64local_DosDateToTmuDate
_TEXT	SEGMENT
_uDate$ = -8						; size = 8
_ulDosDate$ = 8						; size = 8
_ptm$ = 16						; size = 4
_unz64local_DosDateToTmuDate PROC			; COMDAT

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  00006	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR _ulDosDate$[ebp+4]
  0000c	b1 10		 mov	 cl, 16			; 00000010H
  0000e	e8 00 00 00 00	 call	 __aullshr
  00013	89 45 f8	 mov	 DWORD PTR _uDate$[ebp], eax
  00016	89 55 fc	 mov	 DWORD PTR _uDate$[ebp+4], edx

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _uDate$[ebp]
  0001c	83 e0 1f	 and	 eax, 31			; 0000001fH
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _uDate$[ebp+4]
  00022	83 e1 00	 and	 ecx, 0
  00025	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  00028	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _uDate$[ebp]
  0002e	25 e0 01 00 00	 and	 eax, 480		; 000001e0H
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _uDate$[ebp+4]
  00036	83 e1 00	 and	 ecx, 0
  00039	6a 00		 push	 0
  0003b	6a 20		 push	 32			; 00000020H
  0003d	51		 push	 ecx
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 __aulldiv
  00044	83 e8 01	 sub	 eax, 1
  00047	83 da 00	 sbb	 edx, 0
  0004a	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  0004d	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _uDate$[ebp]
  00053	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _uDate$[ebp+4]
  0005b	83 e1 00	 and	 ecx, 0
  0005e	6a 00		 push	 0
  00060	68 00 02 00 00	 push	 512			; 00000200H
  00065	51		 push	 ecx
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 __aulldiv
  0006c	05 bc 07 00 00	 add	 eax, 1980		; 000007bcH
  00071	83 d2 00	 adc	 edx, 0
  00074	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  00077	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  0007a	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  0007d	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _ulDosDate$[ebp+4]
  00085	83 e1 00	 and	 ecx, 0
  00088	6a 00		 push	 0
  0008a	68 00 08 00 00	 push	 2048			; 00000800H
  0008f	51		 push	 ecx
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 __aulldiv
  00096	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  00099	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  0009c	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  0009f	25 e0 07 00 00	 and	 eax, 2016		; 000007e0H
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _ulDosDate$[ebp+4]
  000a7	83 e1 00	 and	 ecx, 0
  000aa	6a 00		 push	 0
  000ac	6a 20		 push	 32			; 00000020H
  000ae	51		 push	 ecx
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 __aulldiv
  000b5	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  000b8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  000be	83 e0 1f	 and	 eax, 31			; 0000001fH
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _ulDosDate$[ebp+4]
  000c4	83 e1 00	 and	 ecx, 0
  000c7	6a 00		 push	 0
  000c9	6a 02		 push	 2
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 __allmul
  000d2	8b 55 10	 mov	 edx, DWORD PTR _ptm$[ebp]
  000d5	89 02		 mov	 DWORD PTR [edx], eax

; 863  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
PUBLIC	_unzGetGlobalInfo@8
; Function compile flags: /Odtp
;	COMDAT _unzGetGlobalInfo@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pglobal_info32$ = 12					; size = 4
_unzGetGlobalInfo@8 PROC				; COMDAT

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	75 07		 jne	 SHORT $LN1@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0000f	eb 1f		 jmp	 SHORT $LN2@unzGetGlob
$LN1@unzGetGlob:

; 843  :     s=(unz64_s*)file;

  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _pglobal_info32$[ebp]
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _pglobal_info32$[ebp]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00028	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0002b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 847  :     return UNZ_OK;

  0002e	33 c0		 xor	 eax, eax
$LN2@unzGetGlob:

; 848  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
_unzGetGlobalInfo@8 ENDP
_TEXT	ENDS
PUBLIC	_unzGetGlobalInfo64@8
; Function compile flags: /Odtp
;	COMDAT _unzGetGlobalInfo64@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pglobal_info$ = 12					; size = 4
_unzGetGlobalInfo64@8 PROC				; COMDAT

; 829  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	75 07		 jne	 SHORT $LN1@unzGetGlob@2

; 832  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0000f	eb 27		 jmp	 SHORT $LN2@unzGetGlob@2
$LN1@unzGetGlob@2:

; 833  :     s=(unz64_s*)file;

  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 834  :     *pglobal_info=s->gi;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001a	83 c1 38	 add	 ecx, 56			; 00000038H
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _pglobal_info$[ebp]
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	89 02		 mov	 DWORD PTR [edx], eax
  00024	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00027	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0002a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002d	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00030	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00033	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 835  :     return UNZ_OK;

  00036	33 c0		 xor	 eax, eax
$LN2@unzGetGlob@2:

; 836  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_unzGetGlobalInfo64@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _strcmpcasenosensitive_internal
_TEXT	SEGMENT
_c2$79598 = -2						; size = 1
_c1$79597 = -1						; size = 1
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_strcmpcasenosensitive_internal PROC			; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN8@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);

  00004	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	88 4d ff	 mov	 BYTE PTR _c1$79597[ebp], cl
  0000c	8b 55 08	 mov	 edx, DWORD PTR _fileName1$[ebp]
  0000f	83 c2 01	 add	 edx, 1
  00012	89 55 08	 mov	 DWORD PTR _fileName1$[ebp], edx

; 354  :         char c2=*(fileName2++);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00018	8a 08		 mov	 cl, BYTE PTR [eax]
  0001a	88 4d fe	 mov	 BYTE PTR _c2$79598[ebp], cl
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  00020	83 c2 01	 add	 edx, 1
  00023	89 55 0c	 mov	 DWORD PTR _fileName2$[ebp], edx

; 355  :         if ((c1>='a') && (c1<='z'))

  00026	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$79597[ebp]
  0002a	83 f8 61	 cmp	 eax, 97			; 00000061H
  0002d	7c 13		 jl	 SHORT $LN6@strcmpcase
  0002f	0f be 4d ff	 movsx	 ecx, BYTE PTR _c1$79597[ebp]
  00033	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00036	7f 0a		 jg	 SHORT $LN6@strcmpcase

; 356  :             c1 -= 0x20;

  00038	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$79597[ebp]
  0003c	83 ea 20	 sub	 edx, 32			; 00000020H
  0003f	88 55 ff	 mov	 BYTE PTR _c1$79597[ebp], dl
$LN6@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  00042	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79598[ebp]
  00046	83 f8 61	 cmp	 eax, 97			; 00000061H
  00049	7c 13		 jl	 SHORT $LN5@strcmpcase
  0004b	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$79598[ebp]
  0004f	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00052	7f 0a		 jg	 SHORT $LN5@strcmpcase

; 358  :             c2 -= 0x20;

  00054	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$79598[ebp]
  00058	83 ea 20	 sub	 edx, 32			; 00000020H
  0005b	88 55 fe	 mov	 BYTE PTR _c2$79598[ebp], dl
$LN5@strcmpcase:

; 359  :         if (c1=='\0')

  0005e	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$79597[ebp]
  00062	85 c0		 test	 eax, eax
  00064	75 0a		 jne	 SHORT $LN4@strcmpcase

; 360  :             return ((c2=='\0') ? 0 : -1);

  00066	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79598[ebp]
  0006a	f7 d8		 neg	 eax
  0006c	1b c0		 sbb	 eax, eax
  0006e	eb 38		 jmp	 SHORT $LN9@strcmpcase
$LN4@strcmpcase:

; 361  :         if (c2=='\0')

  00070	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$79598[ebp]
  00074	85 c9		 test	 ecx, ecx
  00076	75 07		 jne	 SHORT $LN3@strcmpcase

; 362  :             return 1;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	eb 29		 jmp	 SHORT $LN9@strcmpcase
$LN3@strcmpcase:

; 363  :         if (c1<c2)

  0007f	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$79597[ebp]
  00083	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79598[ebp]
  00087	3b d0		 cmp	 edx, eax
  00089	7d 05		 jge	 SHORT $LN2@strcmpcase

; 364  :             return -1;

  0008b	83 c8 ff	 or	 eax, -1
  0008e	eb 18		 jmp	 SHORT $LN9@strcmpcase
$LN2@strcmpcase:

; 365  :         if (c1>c2)

  00090	0f be 4d ff	 movsx	 ecx, BYTE PTR _c1$79597[ebp]
  00094	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$79598[ebp]
  00098	3b ca		 cmp	 ecx, edx
  0009a	7e 07		 jle	 SHORT $LN1@strcmpcase

; 366  :             return 1;

  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	eb 05		 jmp	 SHORT $LN9@strcmpcase
$LN1@strcmpcase:

; 367  :     }

  000a3	e9 5c ff ff ff	 jmp	 $LN8@strcmpcase
$LN9@strcmpcase:

; 368  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_strcmpcasenosensitive_internal ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_getByte
_TEXT	SEGMENT
_c$ = -5						; size = 1
_err$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_unz64local_getByte PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00013	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	ff d2		 call	 edx
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 216  :     if (err==1)

  00025	83 7d fc 01	 cmp	 DWORD PTR _err$[ebp], 1
  00029	75 0f		 jne	 SHORT $LN4@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  0002b	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :         return UNZ_OK;

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN5@unz64local

; 220  :     }
; 221  :     else

  00038	eb 23		 jmp	 SHORT $LN5@unz64local
$LN4@unz64local:

; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00048	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN2@unz64local

; 224  :             return UNZ_ERRNO;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 04		 jmp	 SHORT $LN5@unz64local

; 225  :         else

  00059	eb 02		 jmp	 SHORT $LN5@unz64local
$LN2@unz64local:

; 226  :             return UNZ_EOF;

  0005b	33 c0		 xor	 eax, eax
$LN5@unz64local:

; 227  :     }
; 228  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_unz64local_getByte ENDP
PUBLIC	_unzGetGlobalComment@12
; Function compile flags: /Odtp
;	COMDAT _unzGetGlobalComment@12
_TEXT	SEGMENT
_uReadThis$ = -8					; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_szComment$ = 12					; size = 4
_uSizeBuf$ = 16						; size = 4
_unzGetGlobalComment@12 PROC				; COMDAT

; 2052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN6@unzGetGlob@3

; 2056 :         return (int)UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	e9 a7 00 00 00	 jmp	 $LN7@unzGetGlob@3
$LN6@unzGetGlob@3:

; 2057 :     s=(unz64_s*)file;

  00016	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2058 : 
; 2059 :     uReadThis = uSizeBuf;

  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]
  0001f	89 4d f8	 mov	 DWORD PTR _uReadThis$[ebp], ecx

; 2060 :     if (uReadThis>s->gi.size_comment)

  00022	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00025	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
  00028	3b 42 40	 cmp	 eax, DWORD PTR [edx+64]
  0002b	76 09		 jbe	 SHORT $LN5@unzGetGlob@3

; 2061 :         uReadThis = s->gi.size_comment;

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00030	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00033	89 55 f8	 mov	 DWORD PTR _uReadThis$[ebp], edx
$LN5@unzGetGlob@3:

; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00036	6a 00		 push	 0
  00038	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  0003e	83 c1 16	 add	 ecx, 22			; 00000016H
  00041	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00044	83 d2 00	 adc	 edx, 0
  00047	52		 push	 edx
  00048	51		 push	 ecx
  00049	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 _call_zseek64
  00059	83 c4 14	 add	 esp, 20			; 00000014H
  0005c	85 c0		 test	 eax, eax
  0005e	74 05		 je	 SHORT $LN4@unzGetGlob@3

; 2064 :         return UNZ_ERRNO;

  00060	83 c8 ff	 or	 eax, -1
  00063	eb 58		 jmp	 SHORT $LN7@unzGetGlob@3
$LN4@unzGetGlob@3:

; 2065 : 
; 2066 :     if (uReadThis>0)

  00065	83 7d f8 00	 cmp	 DWORD PTR _uReadThis$[ebp], 0
  00069	76 31		 jbe	 SHORT $LN3@unzGetGlob@3

; 2067 :     {
; 2068 :       *szComment='\0';

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _szComment$[ebp]
  0006e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  00071	8b 4d f8	 mov	 ecx, DWORD PTR _uReadThis$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 0c	 mov	 edx, DWORD PTR _szComment$[ebp]
  00078	52		 push	 edx
  00079	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0007c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0007f	51		 push	 ecx
  00080	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00083	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00086	50		 push	 eax
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0008a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008d	ff d2		 call	 edx
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
  00092	3b 45 f8	 cmp	 eax, DWORD PTR _uReadThis$[ebp]
  00095	74 05		 je	 SHORT $LN3@unzGetGlob@3

; 2070 :         return UNZ_ERRNO;

  00097	83 c8 ff	 or	 eax, -1
  0009a	eb 21		 jmp	 SHORT $LN7@unzGetGlob@3
$LN3@unzGetGlob@3:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  0009c	83 7d 0c 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  000a0	74 18		 je	 SHORT $LN1@unzGetGlob@3
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]
  000a8	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  000ab	76 0d		 jbe	 SHORT $LN1@unzGetGlob@3

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  000ad	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000b0	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _szComment$[ebp]
  000b6	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN1@unzGetGlob@3:

; 2075 :     return (int)uReadThis;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
$LN7@unzGetGlob@3:

; 2076 : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 0c 00	 ret	 12			; 0000000cH
_unzGetGlobalComment@12 ENDP
_TEXT	ENDS
PUBLIC	_unzGetLocalExtrafield@12
; Function compile flags: /Odtp
;	COMDAT _unzGetLocalExtrafield@12
_TEXT	SEGMENT
tv145 = -28						; size = 8
_read_now$ = -20					; size = 4
_pfile_in_zip_read_info$ = -16				; size = 4
_s$ = -12						; size = 4
_size_to_read$ = -8					; size = 8
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzGetLocalExtrafield@12 PROC				; COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN8@unzGetLoca

; 1964 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	e9 ee 00 00 00	 jmp	 $LN9@unzGetLoca
$LN8@unzGetLoca:

; 1965 :     s=(unz64_s*)file;

  00016	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00019	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001c	8b 4d f4	 mov	 ecx, DWORD PTR _s$[ebp]
  0001f	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00025	89 55 f0	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  00028	83 7d f0 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0002c	75 0a		 jne	 SHORT $LN7@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 cc 00 00 00	 jmp	 $LN9@unzGetLoca
$LN7@unzGetLoca:

; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);

  00038	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0003b	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0003e	33 d2		 xor	 edx, edx
  00040	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00043	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  00046	1b 50 64	 sbb	 edx, DWORD PTR [eax+100]
  00049	89 4d f8	 mov	 DWORD PTR _size_to_read$[ebp], ecx
  0004c	89 55 fc	 mov	 DWORD PTR _size_to_read$[ebp+4], edx

; 1973 : 
; 1974 :     if (buf==NULL)

  0004f	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00053	75 08		 jne	 SHORT $LN6@unzGetLoca

; 1975 :         return (int)size_to_read;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _size_to_read$[ebp]
  00058	e9 a7 00 00 00	 jmp	 $LN9@unzGetLoca
$LN6@unzGetLoca:

; 1976 : 
; 1977 :     if (len>size_to_read)

  0005d	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00060	33 d2		 xor	 edx, edx
  00062	89 4d e4	 mov	 DWORD PTR tv145[ebp], ecx
  00065	89 55 e8	 mov	 DWORD PTR tv145[ebp+4], edx
  00068	8b 45 e8	 mov	 eax, DWORD PTR tv145[ebp+4]
  0006b	3b 45 fc	 cmp	 eax, DWORD PTR _size_to_read$[ebp+4]
  0006e	72 12		 jb	 SHORT $LN5@unzGetLoca
  00070	77 08		 ja	 SHORT $LN11@unzGetLoca
  00072	8b 4d e4	 mov	 ecx, DWORD PTR tv145[ebp]
  00075	3b 4d f8	 cmp	 ecx, DWORD PTR _size_to_read$[ebp]
  00078	76 08		 jbe	 SHORT $LN5@unzGetLoca
$LN11@unzGetLoca:

; 1978 :         read_now = (uInt)size_to_read;

  0007a	8b 55 f8	 mov	 edx, DWORD PTR _size_to_read$[ebp]
  0007d	89 55 ec	 mov	 DWORD PTR _read_now$[ebp], edx

; 1979 :     else

  00080	eb 06		 jmp	 SHORT $LN4@unzGetLoca
$LN5@unzGetLoca:

; 1980 :         read_now = (uInt)len ;

  00082	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00085	89 45 ec	 mov	 DWORD PTR _read_now$[ebp], eax
$LN4@unzGetLoca:

; 1981 : 
; 1982 :     if (read_now==0)

  00088	83 7d ec 00	 cmp	 DWORD PTR _read_now$[ebp], 0
  0008c	75 04		 jne	 SHORT $LN3@unzGetLoca

; 1983 :         return 0;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 72		 jmp	 SHORT $LN9@unzGetLoca
$LN3@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00092	6a 00		 push	 0
  00094	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00097	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0009a	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0009d	03 42 60	 add	 eax, DWORD PTR [edx+96]
  000a0	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  000a3	13 4a 64	 adc	 ecx, DWORD PTR [edx+100]
  000a6	51		 push	 ecx
  000a7	50		 push	 eax
  000a8	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ab	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000b1	50		 push	 eax
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b5	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _call_zseek64
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	85 c0		 test	 eax, eax
  000c6	74 05		 je	 SHORT $LN2@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  000c8	83 c8 ff	 or	 eax, -1
  000cb	eb 37		 jmp	 SHORT $LN9@unzGetLoca
$LN2@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  000cd	8b 55 ec	 mov	 edx, DWORD PTR _read_now$[ebp]
  000d0	52		 push	 edx
  000d1	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d8	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000de	52		 push	 edx
  000df	8b 45 f0	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000e2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000e8	51		 push	 ecx
  000e9	8b 55 f0	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ec	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  000f2	ff d0		 call	 eax
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	3b 45 ec	 cmp	 eax, DWORD PTR _read_now$[ebp]
  000fa	74 05		 je	 SHORT $LN1@unzGetLoca

; 1995 :         return UNZ_ERRNO;

  000fc	83 c8 ff	 or	 eax, -1
  000ff	eb 03		 jmp	 SHORT $LN9@unzGetLoca
$LN1@unzGetLoca:

; 1996 : 
; 1997 :     return (int)read_now;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _read_now$[ebp]
$LN9@unzGetLoca:

; 1998 : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 0c 00	 ret	 12			; 0000000cH
_unzGetLocalExtrafield@12 ENDP
_TEXT	ENDS
PUBLIC	_unzGetFilePos@8
; Function compile flags: /Odtp
;	COMDAT _unzGetFilePos@8
_TEXT	SEGMENT
_err$ = -20						; size = 4
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos@8 PROC					; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  00006	8d 45 f0	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 _unzGetFilePos64@8
  00013	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1330 :     if (err==UNZ_OK)

  00016	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  0001a	75 11		 jne	 SHORT $LN1@unzGetFile@2

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  0001c	8b 55 f0	 mov	 edx, DWORD PTR _file_pos64$[ebp]
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00022	89 10		 mov	 DWORD PTR [eax], edx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  00024	8b 4d f8	 mov	 ecx, DWORD PTR _file_pos64$[ebp+8]
  00027	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0002a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN1@unzGetFile@2:

; 1334 :     }
; 1335 :     return err;

  0002d	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]

; 1336 : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
_unzGetFilePos@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_SearchCentralDir
_TEXT	SEGMENT
tv86 = -72						; size = 4
tv212 = -68						; size = 8
tv188 = -60						; size = 8
_uReadSize$79637 = -52					; size = 4
_uReadPos$79638 = -48					; size = 8
_i$79639 = -40						; size = 4
_buf$ = -36						; size = 4
_uMaxBack$ = -32					; size = 8
_uBackRead$ = -24					; size = 8
_uPosFound$ = -16					; size = 8
_uSizeFile$ = -8					; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir PROC			; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 e0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  0000d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 419  :     ZPOS64_T uPosFound=0;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0
  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp+4], 0

; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00022	6a 02		 push	 2
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN14@unz64local@2

; 422  :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	33 d2		 xor	 edx, edx
  00040	e9 f1 01 00 00	 jmp	 $LN15@unz64local@2
$LN14@unz64local@2:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00045	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _call_ztell64
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f8	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  00058	89 55 fc	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)

  0005b	8b 4d e4	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  0005e	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00061	72 16		 jb	 SHORT $LN13@unz64local@2
  00063	77 08		 ja	 SHORT $LN19@unz64local@2
  00065	8b 55 e0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00068	3b 55 f8	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  0006b	76 0c		 jbe	 SHORT $LN13@unz64local@2
$LN19@unz64local@2:

; 428  :         uMaxBack = uSizeFile;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00070	89 45 e0	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	89 4d e4	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN13@unz64local@2:

; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00079	68 04 04 00 00	 push	 1028			; 00000404H
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	83 c4 04	 add	 esp, 4
  00086	89 45 dc	 mov	 DWORD PTR _buf$[ebp], eax

; 431  :     if (buf==NULL)

  00089	83 7d dc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0008d	75 09		 jne	 SHORT $LN12@unz64local@2

; 432  :         return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	33 d2		 xor	 edx, edx
  00093	e9 9e 01 00 00	 jmp	 $LN15@unz64local@2
$LN12@unz64local@2:

; 433  : 
; 434  :     uBackRead = 4;

  00098	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  0009f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN11@unz64local@2:

; 435  :     while (uBackRead<uMaxBack)

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000a9	3b 55 e4	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000ac	0f 87 6c 01 00
	00		 ja	 $LN10@unz64local@2
  000b2	72 0c		 jb	 SHORT $LN20@unz64local@2
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000b7	3b 45 e0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000ba	0f 83 5e 01 00
	00		 jae	 $LN10@unz64local@2
$LN20@unz64local@2:

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000c3	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000c9	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000cc	83 d2 00	 adc	 edx, 0
  000cf	89 4d c4	 mov	 DWORD PTR tv188[ebp], ecx
  000d2	89 55 c8	 mov	 DWORD PTR tv188[ebp+4], edx
  000d5	8b 45 c8	 mov	 eax, DWORD PTR tv188[ebp+4]
  000d8	3b 45 e4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000db	72 18		 jb	 SHORT $LN9@unz64local@2
  000dd	77 08		 ja	 SHORT $LN21@unz64local@2
  000df	8b 4d c4	 mov	 ecx, DWORD PTR tv188[ebp]
  000e2	3b 4d e0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000e5	76 0e		 jbe	 SHORT $LN9@unz64local@2
$LN21@unz64local@2:

; 441  :             uBackRead = uMaxBack;

  000e7	8b 55 e0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000ea	89 55 e8	 mov	 DWORD PTR _uBackRead$[ebp], edx
  000ed	8b 45 e4	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f0	89 45 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], eax

; 442  :         else

  000f3	eb 15		 jmp	 SHORT $LN8@unz64local@2
$LN9@unz64local@2:

; 443  :             uBackRead+=BUFREADCOMMENT;

  000f5	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000f8	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00101	83 d2 00	 adc	 edx, 0
  00104	89 4d e8	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  00107	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN8@unz64local@2:

; 444  :         uReadPos = uSizeFile-uBackRead ;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  0010d	2b 45 e8	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00113	1b 4d ec	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  00116	89 45 d0	 mov	 DWORD PTR _uReadPos$79638[ebp], eax
  00119	89 4d d4	 mov	 DWORD PTR _uReadPos$79638[ebp+4], ecx

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  0011c	8b 55 f8	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0011f	2b 55 d0	 sub	 edx, DWORD PTR _uReadPos$79638[ebp]
  00122	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  00125	1b 45 d4	 sbb	 eax, DWORD PTR _uReadPos$79638[ebp+4]
  00128	89 55 bc	 mov	 DWORD PTR tv212[ebp], edx
  0012b	89 45 c0	 mov	 DWORD PTR tv212[ebp+4], eax
  0012e	83 7d c0 00	 cmp	 DWORD PTR tv212[ebp+4], 0
  00132	72 14		 jb	 SHORT $LN17@unz64local@2
  00134	77 09		 ja	 SHORT $LN22@unz64local@2
  00136	81 7d bc 04 04
	00 00		 cmp	 DWORD PTR tv212[ebp], 1028 ; 00000404H
  0013d	76 09		 jbe	 SHORT $LN17@unz64local@2
$LN22@unz64local@2:
  0013f	c7 45 b8 04 04
	00 00		 mov	 DWORD PTR tv86[ebp], 1028 ; 00000404H
  00146	eb 0f		 jmp	 SHORT $LN18@unz64local@2
$LN17@unz64local@2:
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  0014b	2b 4d d0	 sub	 ecx, DWORD PTR _uReadPos$79638[ebp]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp+4]
  00151	1b 55 d4	 sbb	 edx, DWORD PTR _uReadPos$79638[ebp+4]
  00154	89 4d b8	 mov	 DWORD PTR tv86[ebp], ecx
$LN18@unz64local@2:
  00157	8b 45 b8	 mov	 eax, DWORD PTR tv86[ebp]
  0015a	89 45 cc	 mov	 DWORD PTR _uReadSize$79637[ebp], eax

; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015d	6a 00		 push	 0
  0015f	8b 4d d4	 mov	 ecx, DWORD PTR _uReadPos$79638[ebp+4]
  00162	51		 push	 ecx
  00163	8b 55 d0	 mov	 edx, DWORD PTR _uReadPos$79638[ebp]
  00166	52		 push	 edx
  00167	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 _call_zseek64
  00174	83 c4 14	 add	 esp, 20			; 00000014H
  00177	85 c0		 test	 eax, eax
  00179	74 05		 je	 SHORT $LN7@unz64local@2

; 449  :             break;

  0017b	e9 9e 00 00 00	 jmp	 $LN10@unz64local@2
$LN7@unz64local@2:

; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00180	8b 55 cc	 mov	 edx, DWORD PTR _uReadSize$79637[ebp]
  00183	52		 push	 edx
  00184	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  00187	50		 push	 eax
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0018b	51		 push	 ecx
  0018c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0018f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00192	50		 push	 eax
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00196	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00199	ff d2		 call	 edx
  0019b	83 c4 10	 add	 esp, 16			; 00000010H
  0019e	3b 45 cc	 cmp	 eax, DWORD PTR _uReadSize$79637[ebp]
  001a1	74 02		 je	 SHORT $LN6@unz64local@2

; 452  :             break;

  001a3	eb 79		 jmp	 SHORT $LN10@unz64local@2
$LN6@unz64local@2:

; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  001a5	8b 45 cc	 mov	 eax, DWORD PTR _uReadSize$79637[ebp]
  001a8	83 e8 03	 sub	 eax, 3
  001ab	89 45 d8	 mov	 DWORD PTR _i$79639[ebp], eax
$LN5@unz64local@2:
  001ae	8b 4d d8	 mov	 ecx, DWORD PTR _i$79639[ebp]
  001b1	8b 55 d8	 mov	 edx, DWORD PTR _i$79639[ebp]
  001b4	83 ea 01	 sub	 edx, 1
  001b7	89 55 d8	 mov	 DWORD PTR _i$79639[ebp], edx
  001ba	85 c9		 test	 ecx, ecx
  001bc	7e 51		 jle	 SHORT $LN4@unz64local@2

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  001be	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  001c1	03 45 d8	 add	 eax, DWORD PTR _i$79639[ebp]
  001c4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c7	83 f9 50	 cmp	 ecx, 80			; 00000050H
  001ca	75 41		 jne	 SHORT $LN3@unz64local@2
  001cc	8b 55 dc	 mov	 edx, DWORD PTR _buf$[ebp]
  001cf	03 55 d8	 add	 edx, DWORD PTR _i$79639[ebp]
  001d2	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001d6	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001d9	75 32		 jne	 SHORT $LN3@unz64local@2
  001db	8b 4d dc	 mov	 ecx, DWORD PTR _buf$[ebp]
  001de	03 4d d8	 add	 ecx, DWORD PTR _i$79639[ebp]
  001e1	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  001e5	83 fa 05	 cmp	 edx, 5
  001e8	75 23		 jne	 SHORT $LN3@unz64local@2
  001ea	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  001ed	03 45 d8	 add	 eax, DWORD PTR _i$79639[ebp]
  001f0	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  001f4	83 f9 06	 cmp	 ecx, 6
  001f7	75 14		 jne	 SHORT $LN3@unz64local@2

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  001f9	8b 45 d8	 mov	 eax, DWORD PTR _i$79639[ebp]
  001fc	99		 cdq
  001fd	03 45 d0	 add	 eax, DWORD PTR _uReadPos$79638[ebp]
  00200	8b 4d d4	 mov	 ecx, DWORD PTR _uReadPos$79638[ebp+4]
  00203	13 ca		 adc	 ecx, edx
  00205	89 45 f0	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00208	89 4d f4	 mov	 DWORD PTR _uPosFound$[ebp+4], ecx

; 459  :                 break;

  0020b	eb 02		 jmp	 SHORT $LN4@unz64local@2
$LN3@unz64local@2:

; 460  :             }

  0020d	eb 9f		 jmp	 SHORT $LN5@unz64local@2
$LN4@unz64local@2:

; 461  : 
; 462  :         if (uPosFound!=0)

  0020f	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00212	0b 55 f4	 or	 edx, DWORD PTR _uPosFound$[ebp+4]
  00215	74 02		 je	 SHORT $LN2@unz64local@2

; 463  :             break;

  00217	eb 05		 jmp	 SHORT $LN10@unz64local@2
$LN2@unz64local@2:

; 464  :     }

  00219	e9 88 fe ff ff	 jmp	 $LN11@unz64local@2
$LN10@unz64local@2:

; 465  :     TRYFREE(buf);

  0021e	83 7d dc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00222	74 0c		 je	 SHORT $LN1@unz64local@2
  00224	8b 45 dc	 mov	 eax, DWORD PTR _buf$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _free
  0022d	83 c4 04	 add	 esp, 4
$LN1@unz64local@2:

; 466  :     return uPosFound;

  00230	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00233	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
$LN15@unz64local@2:

; 467  : }

  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
_unz64local_SearchCentralDir ENDP
_TEXT	ENDS
PUBLIC	_unzStringFileNameCompare@12
; Function compile flags: /Odtp
;	COMDAT _unzStringFileNameCompare@12
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzStringFileNameCompare@12 PROC			; COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :     if (iCaseSensitivity==0)

  00003	83 7d 10 00	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 0
  00007	75 07		 jne	 SHORT $LN2@unzStringF

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;

  00009	c7 45 10 02 00
	00 00		 mov	 DWORD PTR _iCaseSensitivity$[ebp], 2
$LN2@unzStringF:

; 397  : 
; 398  :     if (iCaseSensitivity==1)

  00010	83 7d 10 01	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 1
  00014	75 12		 jne	 SHORT $LN1@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  00016	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _fileName1$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _strcmp
  00023	83 c4 08	 add	 esp, 8
  00026	eb 10		 jmp	 SHORT $LN3@unzStringF
$LN1@unzStringF:

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  00028	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _strcmpcasenosensitive_internal
  00035	83 c4 08	 add	 esp, 8
$LN3@unzStringF:

; 402  : }

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
_unzStringFileNameCompare@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_getLong64
_TEXT	SEGMENT
_err$ = -16						; size = 4
_i$ = -12						; size = 4
_x$ = -8						; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong64 PROC				; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _unz64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 311  :     x = (ZPOS64_T)i;

  00024	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00027	99		 cdq
  00028	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0002b	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 312  : 
; 313  :     if (err==UNZ_OK)

  0002e	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00032	75 17		 jne	 SHORT $LN9@unz64local@3

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00034	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _unz64local_getByte
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN9@unz64local@3:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	99		 cdq
  0004f	b1 08		 mov	 cl, 8
  00051	e8 00 00 00 00	 call	 __allshl
  00056	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  00059	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  0005c	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0005f	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 316  : 
; 317  :     if (err==UNZ_OK)

  00062	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00066	75 17		 jne	 SHORT $LN8@unz64local@3

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00068	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 _unz64local_getByte
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN8@unz64local@3:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  0007f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00082	99		 cdq
  00083	b1 10		 mov	 cl, 16			; 00000010H
  00085	e8 00 00 00 00	 call	 __allshl
  0008a	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  0008d	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  00090	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00093	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 320  : 
; 321  :     if (err==UNZ_OK)

  00096	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0009a	75 17		 jne	 SHORT $LN7@unz64local@3

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0009c	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _unz64local_getByte
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN7@unz64local@3:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  000b3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000b6	99		 cdq
  000b7	b1 18		 mov	 cl, 24			; 00000018H
  000b9	e8 00 00 00 00	 call	 __allshl
  000be	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  000c1	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  000c4	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000c7	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 324  : 
; 325  :     if (err==UNZ_OK)

  000ca	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ce	75 17		 jne	 SHORT $LN6@unz64local@3

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d0	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  000d7	51		 push	 ecx
  000d8	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 _unz64local_getByte
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e4	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN6@unz64local@3:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  000e7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ea	99		 cdq
  000eb	b1 20		 mov	 cl, 32			; 00000020H
  000ed	e8 00 00 00 00	 call	 __allshl
  000f2	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  000f5	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  000f8	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  000fb	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 328  : 
; 329  :     if (err==UNZ_OK)

  000fe	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00102	75 17		 jne	 SHORT $LN5@unz64local@3

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00104	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  00107	50		 push	 eax
  00108	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 _unz64local_getByte
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN5@unz64local@3:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  0011b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0011e	99		 cdq
  0011f	b1 28		 mov	 cl, 40			; 00000028H
  00121	e8 00 00 00 00	 call	 __allshl
  00126	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  00129	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  0012c	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  0012f	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 332  : 
; 333  :     if (err==UNZ_OK)

  00132	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00136	75 17		 jne	 SHORT $LN4@unz64local@3

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00138	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 _unz64local_getByte
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014c	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unz64local@3:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  0014f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00152	99		 cdq
  00153	b1 30		 mov	 cl, 48			; 00000030H
  00155	e8 00 00 00 00	 call	 __allshl
  0015a	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  0015d	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  00160	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00163	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 336  : 
; 337  :     if (err==UNZ_OK)

  00166	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0016a	75 17		 jne	 SHORT $LN3@unz64local@3

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0016c	8d 45 f4	 lea	 eax, DWORD PTR _i$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00173	51		 push	 ecx
  00174	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 _unz64local_getByte
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00180	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unz64local@3:

; 339  :     x |= ((ZPOS64_T)i)<<56;

  00183	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00186	99		 cdq
  00187	b1 38		 mov	 cl, 56			; 00000038H
  00189	e8 00 00 00 00	 call	 __allshl
  0018e	0b 45 f8	 or	 eax, DWORD PTR _x$[ebp]
  00191	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp+4]
  00194	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00197	89 55 fc	 mov	 DWORD PTR _x$[ebp+4], edx

; 340  : 
; 341  :     if (err==UNZ_OK)

  0019a	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0019e	75 10		 jne	 SHORT $LN2@unz64local@3

; 342  :         *pX = x;

  001a0	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001a3	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  001a6	89 08		 mov	 DWORD PTR [eax], ecx
  001a8	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp+4]
  001ab	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 343  :     else

  001ae	eb 10		 jmp	 SHORT $LN1@unz64local@3
$LN2@unz64local@3:

; 344  :         *pX = 0;

  001b0	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  001b3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  001b9	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN1@unz64local@3:

; 345  :     return err;

  001c0	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]

; 346  : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c3		 ret	 0
_unz64local_getLong64 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_getLong
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getLong PROC				; COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 270  :     uLong x ;
; 271  :     int i = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _unz64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 275  :     x = (uLong)i;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 276  : 
; 277  :     if (err==UNZ_OK)

  0002a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0002e	75 17		 jne	 SHORT $LN5@unz64local@4

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _unz64local_getByte
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN5@unz64local@4:

; 279  :     x |= ((uLong)i)<<8;

  00047	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0004a	c1 e1 08	 shl	 ecx, 8
  0004d	0b 4d fc	 or	 ecx, DWORD PTR _x$[ebp]
  00050	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 280  : 
; 281  :     if (err==UNZ_OK)

  00053	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00057	75 17		 jne	 SHORT $LN4@unz64local@4

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00059	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _unz64local_getByte
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unz64local@4:

; 283  :     x |= ((uLong)i)<<16;

  00070	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00073	c1 e2 10	 shl	 edx, 16			; 00000010H
  00076	0b 55 fc	 or	 edx, DWORD PTR _x$[ebp]
  00079	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 284  : 
; 285  :     if (err==UNZ_OK)

  0007c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00080	75 17		 jne	 SHORT $LN3@unz64local@4

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00082	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _unz64local_getByte
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unz64local@4:

; 287  :     x += ((uLong)i)<<24;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	c1 e0 18	 shl	 eax, 24			; 00000018H
  0009f	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000a2	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 288  : 
; 289  :     if (err==UNZ_OK)

  000a5	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a9	75 0a		 jne	 SHORT $LN2@unz64local@4

; 290  :         *pX = x;

  000ab	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000b1	89 11		 mov	 DWORD PTR [ecx], edx

; 291  :     else

  000b3	eb 09		 jmp	 SHORT $LN1@unz64local@4
$LN2@unz64local@4:

; 292  :         *pX = 0;

  000b5	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000b8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@unz64local@4:

; 293  :     return err;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 294  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_unz64local_getLong ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_getShort
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unz64local_getShort PROC				; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 243  :     uLong x ;
; 244  :     int i = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _unz64local_getByte
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 248  :     x = (uLong)i;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 249  : 
; 250  :     if (err==UNZ_OK)

  0002a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0002e	75 17		 jne	 SHORT $LN3@unz64local@5

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _unz64local_getByte
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unz64local@5:

; 252  :     x |= ((uLong)i)<<8;

  00047	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0004a	c1 e1 08	 shl	 ecx, 8
  0004d	0b 4d fc	 or	 ecx, DWORD PTR _x$[ebp]
  00050	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 253  : 
; 254  :     if (err==UNZ_OK)

  00053	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@unz64local@5

; 255  :         *pX = x;

  00059	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0005f	89 02		 mov	 DWORD PTR [edx], eax

; 256  :     else

  00061	eb 09		 jmp	 SHORT $LN1@unz64local@5
$LN2@unz64local@5:

; 257  :         *pX = 0;

  00063	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  00066	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@unz64local@5:

; 258  :     return err;

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 259  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_unz64local_getShort ENDP
PUBLIC	_unzCloseCurrentFile@4
; Function compile flags: /Odtp
;	COMDAT _unzCloseCurrentFile@4
_TEXT	SEGMENT
tv90 = -16						; size = 4
_err$ = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzCloseCurrentFile@4 PROC				; COMDAT

; 2005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2006 :     int err=UNZ_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN7@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 bd 00 00 00	 jmp	 $LN8@unzCloseCu
$LN7@unzCloseCu:

; 2012 :     s=(unz64_s*)file;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00026	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0002c	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0002f	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00033	75 0a		 jne	 SHORT $LN6@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00035	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003a	e9 9b 00 00 00	 jmp	 $LN8@unzCloseCu
$LN6@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
; 2020 :         (!pfile_in_zip_read_info->raw))

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00042	89 45 f0	 mov	 DWORD PTR tv90[ebp], eax
  00045	8b 4d f0	 mov	 ecx, DWORD PTR tv90[ebp]
  00048	8b 55 f0	 mov	 edx, DWORD PTR tv90[ebp]
  0004b	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00051	0b 82 84 00 00
	00		 or	 eax, DWORD PTR [edx+132]
  00057	75 21		 jne	 SHORT $LN5@unzCloseCu
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0005c	83 b9 c8 00 00
	00 00		 cmp	 DWORD PTR [ecx+200], 0
  00063	75 15		 jne	 SHORT $LN5@unzCloseCu

; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00065	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00068	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0006b	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  0006e	3b 48 74	 cmp	 ecx, DWORD PTR [eax+116]
  00071	74 07		 je	 SHORT $LN5@unzCloseCu

; 2023 :             err=UNZ_CRCERROR;

  00073	c7 45 f4 97 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -105 ; ffffff97H
$LN5@unzCloseCu:

; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  0007a	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0007d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00080	74 0e		 je	 SHORT $LN3@unzCloseCu
  00082	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _free
  0008d	83 c4 04	 add	 esp, 4
$LN3@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;

  00090	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00093	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  00099	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0009c	83 78 48 08	 cmp	 DWORD PTR [eax+72], 8
  000a0	75 0c		 jne	 SHORT $LN2@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000a5	83 c1 04	 add	 ecx, 4
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 _inflateEnd@4
$LN2@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;

  000ae	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b1	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 2038 :     TRYFREE(pfile_in_zip_read_info);

  000b8	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000bc	74 0c		 je	 SHORT $LN1@unzCloseCu
  000be	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _free
  000c7	83 c4 04	 add	 esp, 4
$LN1@unzCloseCu:

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000cd	c7 81 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+224], 0

; 2041 : 
; 2042 :     return err;

  000d7	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
$LN8@unzCloseCu:

; 2043 : }

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
_unzCloseCurrentFile@4 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
tv295 = -48						; size = 4
tv292 = -44						; size = 8
tv277 = -36						; size = 4
tv274 = -32						; size = 8
_uFlags$ = -24						; size = 4
_size_filename$ = -20					; size = 4
_err$ = -16						; size = 4
_uMagic$ = -12						; size = 4
_size_extra_field$ = -8					; size = 4
_uData$ = -4						; size = 4
_s$ = 8							; size = 4
_piSizeVar$ = 12					; size = 4
_poffset_local_extrafield$ = 16				; size = 4
_psize_local_extrafield$ = 20				; size = 4
_unz64local_CheckCurrentFileCoherencyHeader PROC	; COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;

  00007	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1393 : 
; 1394 :     *piSizeVar = 0;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1395 :     *poffset_local_extrafield = 0;

  00017	8b 4d 10	 mov	 ecx, DWORD PTR _poffset_local_extrafield$[ebp]
  0001a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00020	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1396 :     *psize_local_extrafield = 0;

  00027	8b 55 14	 mov	 edx, DWORD PTR _psize_local_extrafield$[ebp]
  0002a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00030	6a 00		 push	 0
  00032	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00038	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [eax+216]
  0003e	03 51 48	 add	 edx, DWORD PTR [ecx+72]
  00041	8b 80 dc 00 00
	00		 mov	 eax, DWORD PTR [eax+220]
  00047	13 41 4c	 adc	 eax, DWORD PTR [ecx+76]
  0004a	50		 push	 eax
  0004b	52		 push	 edx
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00052	52		 push	 edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _call_zseek64
  0005c	83 c4 14	 add	 esp, 20			; 00000014H
  0005f	85 c0		 test	 eax, eax
  00061	74 08		 je	 SHORT $LN25@unz64local@6

; 1400 :         return UNZ_ERRNO;

  00063	83 c8 ff	 or	 eax, -1
  00066	e9 db 02 00 00	 jmp	 $LN26@unz64local@6
$LN25@unz64local@6:

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)

  0006b	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006f	75 34		 jne	 SHORT $LN24@unz64local@6

; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00071	8d 4d f4	 lea	 ecx, DWORD PTR _uMagic$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00078	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _unz64local_getLong
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	85 c0		 test	 eax, eax
  0008a	74 09		 je	 SHORT $LN23@unz64local@6

; 1406 :             err=UNZ_ERRNO;

  0008c	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00093	eb 10		 jmp	 SHORT $LN24@unz64local@6
$LN23@unz64local@6:

; 1407 :         else if (uMagic!=0x04034b50)

  00095	81 7d f4 50 4b
	03 04		 cmp	 DWORD PTR _uMagic$[ebp], 67324752 ; 04034b50H
  0009c	74 07		 je	 SHORT $LN24@unz64local@6

; 1408 :             err=UNZ_BADZIPFILE;

  0009e	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN24@unz64local@6:

; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000a5	8d 55 fc	 lea	 edx, DWORD PTR _uData$[ebp]
  000a8	52		 push	 edx
  000a9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ac	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000af	51		 push	 ecx
  000b0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 _unz64local_getShort
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN20@unz64local@6

; 1412 :         err=UNZ_ERRNO;

  000c0	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@unz64local@6:

; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  000c7	8d 45 e8	 lea	 eax, DWORD PTR _uFlags$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ce	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000d1	52		 push	 edx
  000d2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _unz64local_getShort
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH
  000de	85 c0		 test	 eax, eax
  000e0	74 07		 je	 SHORT $LN19@unz64local@6

; 1418 :         err=UNZ_ERRNO;

  000e2	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN19@unz64local@6:

; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000e9	8d 4d fc	 lea	 ecx, DWORD PTR _uData$[ebp]
  000ec	51		 push	 ecx
  000ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f0	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000f3	50		 push	 eax
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _unz64local_getShort
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	85 c0		 test	 eax, eax
  00102	74 09		 je	 SHORT $LN18@unz64local@6

; 1421 :         err=UNZ_ERRNO;

  00104	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  0010b	eb 1b		 jmp	 SHORT $LN17@unz64local@6
$LN18@unz64local@6:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  0010d	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00111	75 15		 jne	 SHORT $LN17@unz64local@6
  00113	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00116	8b 45 fc	 mov	 eax, DWORD PTR _uData$[ebp]
  00119	3b 82 8c 00 00
	00		 cmp	 eax, DWORD PTR [edx+140]
  0011f	74 07		 je	 SHORT $LN17@unz64local@6

; 1423 :         err=UNZ_BADZIPFILE;

  00121	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN17@unz64local@6:

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))

  00128	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0012c	75 2b		 jne	 SHORT $LN15@unz64local@6
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00131	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00138	74 1f		 je	 SHORT $LN15@unz64local@6
  0013a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0013d	83 ba 8c 00 00
	00 0c		 cmp	 DWORD PTR [edx+140], 12	; 0000000cH
  00144	74 13		 je	 SHORT $LN15@unz64local@6
  00146	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00149	83 b8 8c 00 00
	00 08		 cmp	 DWORD PTR [eax+140], 8
  00150	74 07		 je	 SHORT $LN15@unz64local@6

; 1430 :         err=UNZ_BADZIPFILE;

  00152	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN15@unz64local@6:

; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  00159	8d 4d fc	 lea	 ecx, DWORD PTR _uData$[ebp]
  0015c	51		 push	 ecx
  0015d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00160	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00163	50		 push	 eax
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 _unz64local_getLong
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00170	85 c0		 test	 eax, eax
  00172	74 07		 je	 SHORT $LN14@unz64local@6

; 1433 :         err=UNZ_ERRNO;

  00174	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unz64local@6:

; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  0017b	8d 55 fc	 lea	 edx, DWORD PTR _uData$[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00182	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00185	51		 push	 ecx
  00186	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00189	52		 push	 edx
  0018a	e8 00 00 00 00	 call	 _unz64local_getLong
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00192	85 c0		 test	 eax, eax
  00194	74 09		 je	 SHORT $LN13@unz64local@6

; 1436 :         err=UNZ_ERRNO;

  00196	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  0019d	eb 23		 jmp	 SHORT $LN12@unz64local@6
$LN13@unz64local@6:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  0019f	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001a3	75 1d		 jne	 SHORT $LN12@unz64local@6
  001a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a8	8b 4d fc	 mov	 ecx, DWORD PTR _uData$[ebp]
  001ab	3b 88 94 00 00
	00		 cmp	 ecx, DWORD PTR [eax+148]
  001b1	74 0f		 je	 SHORT $LN12@unz64local@6
  001b3	8b 55 e8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  001b6	83 e2 08	 and	 edx, 8
  001b9	75 07		 jne	 SHORT $LN12@unz64local@6

; 1438 :         err=UNZ_BADZIPFILE;

  001bb	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN12@unz64local@6:

; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  001c2	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  001c5	50		 push	 eax
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c9	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001cc	52		 push	 edx
  001cd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 _unz64local_getLong
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d9	85 c0		 test	 eax, eax
  001db	74 09		 je	 SHORT $LN10@unz64local@6

; 1441 :         err=UNZ_ERRNO;

  001dd	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  001e4	eb 48		 jmp	 SHORT $LN9@unz64local@6
$LN10@unz64local@6:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  001e6	83 7d fc ff	 cmp	 DWORD PTR _uData$[ebp], -1
  001ea	74 42		 je	 SHORT $LN9@unz64local@6
  001ec	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001f0	75 3c		 jne	 SHORT $LN9@unz64local@6
  001f2	8b 4d fc	 mov	 ecx, DWORD PTR _uData$[ebp]
  001f5	33 d2		 xor	 edx, edx
  001f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fa	89 4d e0	 mov	 DWORD PTR tv274[ebp], ecx
  001fd	89 55 e4	 mov	 DWORD PTR tv274[ebp+4], edx
  00200	89 45 dc	 mov	 DWORD PTR tv277[ebp], eax
  00203	8b 4d dc	 mov	 ecx, DWORD PTR tv277[ebp]
  00206	8b 55 e0	 mov	 edx, DWORD PTR tv274[ebp]
  00209	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  0020f	75 0e		 jne	 SHORT $LN28@unz64local@6
  00211	8b 45 dc	 mov	 eax, DWORD PTR tv277[ebp]
  00214	8b 4d e4	 mov	 ecx, DWORD PTR tv274[ebp+4]
  00217	3b 88 9c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+156]
  0021d	74 0f		 je	 SHORT $LN9@unz64local@6
$LN28@unz64local@6:
  0021f	8b 55 e8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  00222	83 e2 08	 and	 edx, 8
  00225	75 07		 jne	 SHORT $LN9@unz64local@6

; 1443 :         err=UNZ_BADZIPFILE;

  00227	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN9@unz64local@6:

; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  0022e	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  00231	50		 push	 eax
  00232	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00235	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00238	52		 push	 edx
  00239	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _unz64local_getLong
  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
  00245	85 c0		 test	 eax, eax
  00247	74 09		 je	 SHORT $LN7@unz64local@6

; 1446 :         err=UNZ_ERRNO;

  00249	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00250	eb 48		 jmp	 SHORT $LN6@unz64local@6
$LN7@unz64local@6:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  00252	83 7d fc ff	 cmp	 DWORD PTR _uData$[ebp], -1
  00256	74 42		 je	 SHORT $LN6@unz64local@6
  00258	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0025c	75 3c		 jne	 SHORT $LN6@unz64local@6
  0025e	8b 4d fc	 mov	 ecx, DWORD PTR _uData$[ebp]
  00261	33 d2		 xor	 edx, edx
  00263	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00266	89 4d d4	 mov	 DWORD PTR tv292[ebp], ecx
  00269	89 55 d8	 mov	 DWORD PTR tv292[ebp+4], edx
  0026c	89 45 d0	 mov	 DWORD PTR tv295[ebp], eax
  0026f	8b 4d d0	 mov	 ecx, DWORD PTR tv295[ebp]
  00272	8b 55 d4	 mov	 edx, DWORD PTR tv292[ebp]
  00275	3b 91 a0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+160]
  0027b	75 0e		 jne	 SHORT $LN29@unz64local@6
  0027d	8b 45 d0	 mov	 eax, DWORD PTR tv295[ebp]
  00280	8b 4d d8	 mov	 ecx, DWORD PTR tv292[ebp+4]
  00283	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  00289	74 0f		 je	 SHORT $LN6@unz64local@6
$LN29@unz64local@6:
  0028b	8b 55 e8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  0028e	83 e2 08	 and	 edx, 8
  00291	75 07		 jne	 SHORT $LN6@unz64local@6

; 1448 :         err=UNZ_BADZIPFILE;

  00293	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN6@unz64local@6:

; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  0029a	8d 45 ec	 lea	 eax, DWORD PTR _size_filename$[ebp]
  0029d	50		 push	 eax
  0029e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002a4	52		 push	 edx
  002a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 _unz64local_getShort
  002ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b1	85 c0		 test	 eax, eax
  002b3	74 09		 je	 SHORT $LN4@unz64local@6

; 1451 :         err=UNZ_ERRNO;

  002b5	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  002bc	eb 1b		 jmp	 SHORT $LN3@unz64local@6
$LN4@unz64local@6:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  002be	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  002c2	75 15		 jne	 SHORT $LN3@unz64local@6
  002c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c7	8b 55 ec	 mov	 edx, DWORD PTR _size_filename$[ebp]
  002ca	3b 91 a8 00 00
	00		 cmp	 edx, DWORD PTR [ecx+168]
  002d0	74 07		 je	 SHORT $LN3@unz64local@6

; 1453 :         err=UNZ_BADZIPFILE;

  002d2	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN3@unz64local@6:

; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;

  002d9	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  002dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  002de	03 4d ec	 add	 ecx, DWORD PTR _size_filename$[ebp]
  002e1	8b 55 0c	 mov	 edx, DWORD PTR _piSizeVar$[ebp]
  002e4	89 0a		 mov	 DWORD PTR [edx], ecx

; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  002e6	8d 45 f8	 lea	 eax, DWORD PTR _size_extra_field$[ebp]
  002e9	50		 push	 eax
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ed	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002f0	52		 push	 edx
  002f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 _unz64local_getShort
  002fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fd	85 c0		 test	 eax, eax
  002ff	74 07		 je	 SHORT $LN1@unz64local@6

; 1458 :         err=UNZ_ERRNO;

  00301	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN1@unz64local@6:

; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;

  00308	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0030b	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00311	83 c2 1e	 add	 edx, 30			; 0000001eH
  00314	8b 81 dc 00 00
	00		 mov	 eax, DWORD PTR [ecx+220]
  0031a	83 d0 00	 adc	 eax, 0
  0031d	8b 4d ec	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  00320	33 f6		 xor	 esi, esi
  00322	03 d1		 add	 edx, ecx
  00324	13 c6		 adc	 eax, esi
  00326	8b 4d 10	 mov	 ecx, DWORD PTR _poffset_local_extrafield$[ebp]
  00329	89 11		 mov	 DWORD PTR [ecx], edx
  0032b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  0032e	8b 55 14	 mov	 edx, DWORD PTR _psize_local_extrafield$[ebp]
  00331	8b 45 f8	 mov	 eax, DWORD PTR _size_extra_field$[ebp]
  00334	89 02		 mov	 DWORD PTR [edx], eax

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;

  00336	8b 4d 0c	 mov	 ecx, DWORD PTR _piSizeVar$[ebp]
  00339	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033b	03 55 f8	 add	 edx, DWORD PTR _size_extra_field$[ebp]
  0033e	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00341	89 10		 mov	 DWORD PTR [eax], edx

; 1464 : 
; 1465 :     return err;

  00343	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
$LN26@unz64local@6:

; 1466 : }

  00346	5e		 pop	 esi
  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c3		 ret	 0
_unz64local_CheckCurrentFileCoherencyHeader ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
tv536 = -156						; size = 8
_uSizeRead$79955 = -148					; size = 4
_uL$79942 = -144					; size = 4
_headerId$79937 = -140					; size = 4
_dataSize$79938 = -136					; size = 4
_acc$79930 = -132					; size = 4
_uSizeRead$79918 = -128					; size = 8
_uSizeRead$79911 = -120					; size = 4
_err$ = -116						; size = 4
_file_info_internal$ = -112				; size = 8
_lSeek$ = -104						; size = 4
_uL$ = -100						; size = 4
_file_info$ = -96					; size = 88
_uMagic$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_pfile_info_internal$ = 16				; size = 4
_szFileName$ = 20					; size = 4
_fileNameBufferSize$ = 24				; size = 4
_extraField$ = 28					; size = 4
_extraFieldBufferSize$ = 32				; size = 4
_szComment$ = 36					; size = 4
_commentBufferSize$ = 40				; size = 4
_unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;

  0000b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 894  :     uLong uMagic;
; 895  :     long lSeek=0;

  00012	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  00019	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0001d	75 0a		 jne	 SHORT $LN65@unz64local@7

; 899  :         return UNZ_PARAMERROR;

  0001f	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00024	e9 ad 06 00 00	 jmp	 $LN66@unz64local@7
$LN65@unz64local@7:

; 900  :     s=(unz64_s*)file;

  00029	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0002c	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  0002f	6a 00		 push	 0
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00034	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00037	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  0003a	03 42 48	 add	 eax, DWORD PTR [edx+72]
  0003d	8b 49 5c	 mov	 ecx, DWORD PTR [ecx+92]
  00040	13 4a 4c	 adc	 ecx, DWORD PTR [edx+76]
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00048	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0004b	50		 push	 eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _call_zseek64
  00055	83 c4 14	 add	 esp, 20			; 00000014H
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN64@unz64local@7

; 904  :         err=UNZ_ERRNO;

  0005c	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN64@unz64local@7:

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  00063	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00067	75 34		 jne	 SHORT $LN63@unz64local@7

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00069	8d 55 f8	 lea	 edx, DWORD PTR _uMagic$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00070	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00073	51		 push	 ecx
  00074	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 _unz64local_getLong
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	85 c0		 test	 eax, eax
  00082	74 09		 je	 SHORT $LN62@unz64local@7

; 911  :             err=UNZ_ERRNO;

  00084	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  0008b	eb 10		 jmp	 SHORT $LN63@unz64local@7
$LN62@unz64local@7:

; 912  :         else if (uMagic!=0x02014b50)

  0008d	81 7d f8 50 4b
	01 02		 cmp	 DWORD PTR _uMagic$[ebp], 33639248 ; 02014b50H
  00094	74 07		 je	 SHORT $LN63@unz64local@7

; 913  :             err=UNZ_BADZIPFILE;

  00096	c7 45 8c 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN63@unz64local@7:

; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  0009d	8d 45 a0	 lea	 eax, DWORD PTR _file_info$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000a4	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000a7	52		 push	 edx
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _unz64local_getShort
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	85 c0		 test	 eax, eax
  000b6	74 07		 je	 SHORT $LN59@unz64local@7

; 917  :         err=UNZ_ERRNO;

  000b8	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN59@unz64local@7:

; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  000bf	8d 4d a4	 lea	 ecx, DWORD PTR _file_info$[ebp+4]
  000c2	51		 push	 ecx
  000c3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000c6	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000c9	50		 push	 eax
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _unz64local_getShort
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d6	85 c0		 test	 eax, eax
  000d8	74 07		 je	 SHORT $LN58@unz64local@7

; 920  :         err=UNZ_ERRNO;

  000da	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN58@unz64local@7:

; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  000e1	8d 55 a8	 lea	 edx, DWORD PTR _file_info$[ebp+8]
  000e4	52		 push	 edx
  000e5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000eb	51		 push	 ecx
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 _unz64local_getShort
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	85 c0		 test	 eax, eax
  000fa	74 07		 je	 SHORT $LN57@unz64local@7

; 923  :         err=UNZ_ERRNO;

  000fc	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN57@unz64local@7:

; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  00103	8d 45 ac	 lea	 eax, DWORD PTR _file_info$[ebp+12]
  00106	50		 push	 eax
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0010a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0010d	52		 push	 edx
  0010e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _unz64local_getShort
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	85 c0		 test	 eax, eax
  0011c	74 07		 je	 SHORT $LN56@unz64local@7

; 926  :         err=UNZ_ERRNO;

  0011e	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN56@unz64local@7:

; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  00125	8d 4d b0	 lea	 ecx, DWORD PTR _file_info$[ebp+16]
  00128	51		 push	 ecx
  00129	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0012c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0012f	50		 push	 eax
  00130	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00133	51		 push	 ecx
  00134	e8 00 00 00 00	 call	 _unz64local_getLong
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	85 c0		 test	 eax, eax
  0013e	74 07		 je	 SHORT $LN55@unz64local@7

; 929  :         err=UNZ_ERRNO;

  00140	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN55@unz64local@7:

; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  00147	8d 55 e0	 lea	 edx, DWORD PTR _file_info$[ebp+64]
  0014a	52		 push	 edx
  0014b	8b 45 b0	 mov	 eax, DWORD PTR _file_info$[ebp+16]
  0014e	33 c9		 xor	 ecx, ecx
  00150	51		 push	 ecx
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _unz64local_DosDateToTmuDate
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  0015a	8d 55 b4	 lea	 edx, DWORD PTR _file_info$[ebp+20]
  0015d	52		 push	 edx
  0015e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00161	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00164	51		 push	 ecx
  00165	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00168	52		 push	 edx
  00169	e8 00 00 00 00	 call	 _unz64local_getLong
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	85 c0		 test	 eax, eax
  00173	74 07		 je	 SHORT $LN54@unz64local@7

; 934  :         err=UNZ_ERRNO;

  00175	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN54@unz64local@7:

; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0017c	8d 45 9c	 lea	 eax, DWORD PTR _uL$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00183	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00186	52		 push	 edx
  00187	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 _unz64local_getLong
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH
  00193	85 c0		 test	 eax, eax
  00195	74 07		 je	 SHORT $LN53@unz64local@7

; 937  :         err=UNZ_ERRNO;

  00197	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN53@unz64local@7:

; 938  :     file_info.compressed_size = uL;

  0019e	8b 4d 9c	 mov	 ecx, DWORD PTR _uL$[ebp]
  001a1	33 d2		 xor	 edx, edx
  001a3	89 4d b8	 mov	 DWORD PTR _file_info$[ebp+24], ecx
  001a6	89 55 bc	 mov	 DWORD PTR _file_info$[ebp+28], edx

; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  001a9	8d 45 9c	 lea	 eax, DWORD PTR _uL$[ebp]
  001ac	50		 push	 eax
  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001b0	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001b3	52		 push	 edx
  001b4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _unz64local_getLong
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c0	85 c0		 test	 eax, eax
  001c2	74 07		 je	 SHORT $LN52@unz64local@7

; 941  :         err=UNZ_ERRNO;

  001c4	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN52@unz64local@7:

; 942  :     file_info.uncompressed_size = uL;

  001cb	8b 4d 9c	 mov	 ecx, DWORD PTR _uL$[ebp]
  001ce	33 d2		 xor	 edx, edx
  001d0	89 4d c0	 mov	 DWORD PTR _file_info$[ebp+32], ecx
  001d3	89 55 c4	 mov	 DWORD PTR _file_info$[ebp+36], edx

; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  001d6	8d 45 c8	 lea	 eax, DWORD PTR _file_info$[ebp+40]
  001d9	50		 push	 eax
  001da	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001dd	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001e0	52		 push	 edx
  001e1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 _unz64local_getShort
  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ed	85 c0		 test	 eax, eax
  001ef	74 07		 je	 SHORT $LN51@unz64local@7

; 945  :         err=UNZ_ERRNO;

  001f1	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN51@unz64local@7:

; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  001f8	8d 4d cc	 lea	 ecx, DWORD PTR _file_info$[ebp+44]
  001fb	51		 push	 ecx
  001fc	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001ff	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00202	50		 push	 eax
  00203	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00206	51		 push	 ecx
  00207	e8 00 00 00 00	 call	 _unz64local_getShort
  0020c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020f	85 c0		 test	 eax, eax
  00211	74 07		 je	 SHORT $LN50@unz64local@7

; 948  :         err=UNZ_ERRNO;

  00213	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN50@unz64local@7:

; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  0021a	8d 55 d0	 lea	 edx, DWORD PTR _file_info$[ebp+48]
  0021d	52		 push	 edx
  0021e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00221	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00224	51		 push	 ecx
  00225	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 _unz64local_getShort
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00231	85 c0		 test	 eax, eax
  00233	74 07		 je	 SHORT $LN49@unz64local@7

; 951  :         err=UNZ_ERRNO;

  00235	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN49@unz64local@7:

; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  0023c	8d 45 d4	 lea	 eax, DWORD PTR _file_info$[ebp+52]
  0023f	50		 push	 eax
  00240	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00243	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00246	52		 push	 edx
  00247	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 _unz64local_getShort
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH
  00253	85 c0		 test	 eax, eax
  00255	74 07		 je	 SHORT $LN48@unz64local@7

; 954  :         err=UNZ_ERRNO;

  00257	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN48@unz64local@7:

; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  0025e	8d 4d d8	 lea	 ecx, DWORD PTR _file_info$[ebp+56]
  00261	51		 push	 ecx
  00262	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00265	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00268	50		 push	 eax
  00269	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 _unz64local_getShort
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH
  00275	85 c0		 test	 eax, eax
  00277	74 07		 je	 SHORT $LN47@unz64local@7

; 957  :         err=UNZ_ERRNO;

  00279	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN47@unz64local@7:

; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  00280	8d 55 dc	 lea	 edx, DWORD PTR _file_info$[ebp+60]
  00283	52		 push	 edx
  00284	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00287	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0028a	51		 push	 ecx
  0028b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0028e	52		 push	 edx
  0028f	e8 00 00 00 00	 call	 _unz64local_getLong
  00294	83 c4 0c	 add	 esp, 12			; 0000000cH
  00297	85 c0		 test	 eax, eax
  00299	74 07		 je	 SHORT $LN46@unz64local@7

; 960  :         err=UNZ_ERRNO;

  0029b	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN46@unz64local@7:

; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  002a2	8d 45 9c	 lea	 eax, DWORD PTR _uL$[ebp]
  002a5	50		 push	 eax
  002a6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002a9	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  002ac	52		 push	 edx
  002ad	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _unz64local_getLong
  002b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b9	85 c0		 test	 eax, eax
  002bb	74 07		 je	 SHORT $LN45@unz64local@7

; 964  :         err=UNZ_ERRNO;

  002bd	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN45@unz64local@7:

; 965  :     file_info_internal.offset_curfile = uL;

  002c4	8b 4d 9c	 mov	 ecx, DWORD PTR _uL$[ebp]
  002c7	33 d2		 xor	 edx, edx
  002c9	89 4d 90	 mov	 DWORD PTR _file_info_internal$[ebp], ecx
  002cc	89 55 94	 mov	 DWORD PTR _file_info_internal$[ebp+4], edx

; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  002cf	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  002d2	03 45 c8	 add	 eax, DWORD PTR _file_info$[ebp+40]
  002d5	89 45 98	 mov	 DWORD PTR _lSeek$[ebp], eax

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  002d8	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  002dc	75 67		 jne	 SHORT $LN44@unz64local@7
  002de	83 7d 14 00	 cmp	 DWORD PTR _szFileName$[ebp], 0
  002e2	74 61		 je	 SHORT $LN44@unz64local@7

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  002e4	8b 4d c8	 mov	 ecx, DWORD PTR _file_info$[ebp+40]
  002e7	3b 4d 18	 cmp	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  002ea	73 11		 jae	 SHORT $LN43@unz64local@7

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  002ec	8b 55 14	 mov	 edx, DWORD PTR _szFileName$[ebp]
  002ef	03 55 c8	 add	 edx, DWORD PTR _file_info$[ebp+40]
  002f2	c6 02 00	 mov	 BYTE PTR [edx], 0

; 974  :             uSizeRead = file_info.size_filename;

  002f5	8b 45 c8	 mov	 eax, DWORD PTR _file_info$[ebp+40]
  002f8	89 45 88	 mov	 DWORD PTR _uSizeRead$79911[ebp], eax

; 975  :         }
; 976  :         else

  002fb	eb 06		 jmp	 SHORT $LN42@unz64local@7
$LN43@unz64local@7:

; 977  :             uSizeRead = fileNameBufferSize;

  002fd	8b 4d 18	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00300	89 4d 88	 mov	 DWORD PTR _uSizeRead$79911[ebp], ecx
$LN42@unz64local@7:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  00303	83 7d c8 00	 cmp	 DWORD PTR _file_info$[ebp+40], 0
  00307	76 33		 jbe	 SHORT $LN41@unz64local@7
  00309	83 7d 18 00	 cmp	 DWORD PTR _fileNameBufferSize$[ebp], 0
  0030d	76 2d		 jbe	 SHORT $LN41@unz64local@7

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  0030f	8b 55 88	 mov	 edx, DWORD PTR _uSizeRead$79911[ebp]
  00312	52		 push	 edx
  00313	8b 45 14	 mov	 eax, DWORD PTR _szFileName$[ebp]
  00316	50		 push	 eax
  00317	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0031a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0031d	52		 push	 edx
  0031e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00321	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00324	51		 push	 ecx
  00325	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00328	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0032b	ff d0		 call	 eax
  0032d	83 c4 10	 add	 esp, 16			; 00000010H
  00330	3b 45 88	 cmp	 eax, DWORD PTR _uSizeRead$79911[ebp]
  00333	74 07		 je	 SHORT $LN41@unz64local@7

; 981  :                 err=UNZ_ERRNO;

  00335	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN41@unz64local@7:

; 982  :         lSeek -= uSizeRead;

  0033c	8b 4d 98	 mov	 ecx, DWORD PTR _lSeek$[ebp]
  0033f	2b 4d 88	 sub	 ecx, DWORD PTR _uSizeRead$79911[ebp]
  00342	89 4d 98	 mov	 DWORD PTR _lSeek$[ebp], ecx
$LN44@unz64local@7:

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  00345	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00349	0f 85 c7 00 00
	00		 jne	 $LN39@unz64local@7
  0034f	83 7d 1c 00	 cmp	 DWORD PTR _extraField$[ebp], 0
  00353	0f 84 bd 00 00
	00		 je	 $LN39@unz64local@7

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  00359	8b 55 cc	 mov	 edx, DWORD PTR _file_info$[ebp+44]
  0035c	3b 55 20	 cmp	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  0035f	73 0d		 jae	 SHORT $LN38@unz64local@7

; 990  :             uSizeRead = file_info.size_file_extra;

  00361	8b 45 cc	 mov	 eax, DWORD PTR _file_info$[ebp+44]
  00364	33 c9		 xor	 ecx, ecx
  00366	89 45 80	 mov	 DWORD PTR _uSizeRead$79918[ebp], eax
  00369	89 4d 84	 mov	 DWORD PTR _uSizeRead$79918[ebp+4], ecx

; 991  :         else

  0036c	eb 0b		 jmp	 SHORT $LN37@unz64local@7
$LN38@unz64local@7:

; 992  :             uSizeRead = extraFieldBufferSize;

  0036e	8b 55 20	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  00371	33 c0		 xor	 eax, eax
  00373	89 55 80	 mov	 DWORD PTR _uSizeRead$79918[ebp], edx
  00376	89 45 84	 mov	 DWORD PTR _uSizeRead$79918[ebp+4], eax
$LN37@unz64local@7:

; 993  : 
; 994  :         if (lSeek!=0)

  00379	83 7d 98 00	 cmp	 DWORD PTR _lSeek$[ebp], 0
  0037d	74 2f		 je	 SHORT $LN36@unz64local@7

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  0037f	6a 01		 push	 1
  00381	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  00384	99		 cdq
  00385	52		 push	 edx
  00386	50		 push	 eax
  00387	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0038a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0038d	52		 push	 edx
  0038e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 _call_zseek64
  00397	83 c4 14	 add	 esp, 20			; 00000014H
  0039a	85 c0		 test	 eax, eax
  0039c	75 09		 jne	 SHORT $LN35@unz64local@7

; 997  :                 lSeek=0;

  0039e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 998  :             else

  003a5	eb 07		 jmp	 SHORT $LN36@unz64local@7
$LN35@unz64local@7:

; 999  :                 err=UNZ_ERRNO;

  003a7	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN36@unz64local@7:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  003ae	83 7d cc 00	 cmp	 DWORD PTR _file_info$[ebp+44], 0
  003b2	76 52		 jbe	 SHORT $LN33@unz64local@7
  003b4	83 7d 20 00	 cmp	 DWORD PTR _extraFieldBufferSize$[ebp], 0
  003b8	76 4c		 jbe	 SHORT $LN33@unz64local@7

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  003ba	8b 4d 80	 mov	 ecx, DWORD PTR _uSizeRead$79918[ebp]
  003bd	51		 push	 ecx
  003be	8b 55 1c	 mov	 edx, DWORD PTR _extraField$[ebp]
  003c1	52		 push	 edx
  003c2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003c5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003c8	51		 push	 ecx
  003c9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003cc	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003cf	50		 push	 eax
  003d0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003d3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003d6	ff d2		 call	 edx
  003d8	83 c4 10	 add	 esp, 16			; 00000010H
  003db	33 c9		 xor	 ecx, ecx
  003dd	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv536[ebp], eax
  003e3	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv536[ebp+4], ecx
  003e9	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR tv536[ebp]
  003ef	3b 55 80	 cmp	 edx, DWORD PTR _uSizeRead$79918[ebp]
  003f2	75 0b		 jne	 SHORT $LN68@unz64local@7
  003f4	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv536[ebp+4]
  003fa	3b 45 84	 cmp	 eax, DWORD PTR _uSizeRead$79918[ebp+4]
  003fd	74 07		 je	 SHORT $LN33@unz64local@7
$LN68@unz64local@7:

; 1004 :                 err=UNZ_ERRNO;

  003ff	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN33@unz64local@7:

; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00406	8b 4d 80	 mov	 ecx, DWORD PTR _uSizeRead$79918[ebp]
  00409	8b 55 cc	 mov	 edx, DWORD PTR _file_info$[ebp+44]
  0040c	2b d1		 sub	 edx, ecx
  0040e	03 55 98	 add	 edx, DWORD PTR _lSeek$[ebp]
  00411	89 55 98	 mov	 DWORD PTR _lSeek$[ebp], edx

; 1007 :     }
; 1008 :     else

  00414	eb 09		 jmp	 SHORT $LN31@unz64local@7
$LN39@unz64local@7:

; 1009 :         lSeek += file_info.size_file_extra;

  00416	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  00419	03 45 cc	 add	 eax, DWORD PTR _file_info$[ebp+44]
  0041c	89 45 98	 mov	 DWORD PTR _lSeek$[ebp], eax
$LN31@unz64local@7:

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  0041f	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00423	0f 85 b0 01 00
	00		 jne	 $LN30@unz64local@7
  00429	83 7d cc 00	 cmp	 DWORD PTR _file_info$[ebp+44], 0
  0042d	0f 84 a6 01 00
	00		 je	 $LN30@unz64local@7

; 1013 :     {
; 1014 :                                 uLong acc = 0;

  00433	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _acc$79930[ebp], 0

; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  0043d	8b 4d 98	 mov	 ecx, DWORD PTR _lSeek$[ebp]
  00440	2b 4d cc	 sub	 ecx, DWORD PTR _file_info$[ebp+44]
  00443	89 4d 98	 mov	 DWORD PTR _lSeek$[ebp], ecx

; 1018 : 
; 1019 :         if (lSeek!=0)

  00446	74 2f		 je	 SHORT $LN26@unz64local@7

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00448	6a 01		 push	 1
  0044a	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  0044d	99		 cdq
  0044e	52		 push	 edx
  0044f	50		 push	 eax
  00450	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00453	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00456	50		 push	 eax
  00457	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0045a	51		 push	 ecx
  0045b	e8 00 00 00 00	 call	 _call_zseek64
  00460	83 c4 14	 add	 esp, 20			; 00000014H
  00463	85 c0		 test	 eax, eax
  00465	75 09		 jne	 SHORT $LN28@unz64local@7

; 1022 :                 lSeek=0;

  00467	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 1023 :             else

  0046e	eb 07		 jmp	 SHORT $LN26@unz64local@7
$LN28@unz64local@7:

; 1024 :                 err=UNZ_ERRNO;

  00470	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@unz64local@7:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  00477	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _acc$79930[ebp]
  0047d	3b 55 cc	 cmp	 edx, DWORD PTR _file_info$[ebp+44]
  00480	0f 83 53 01 00
	00		 jae	 $LN30@unz64local@7

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  00486	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _headerId$79937[ebp]
  0048c	50		 push	 eax
  0048d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00490	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00493	52		 push	 edx
  00494	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 _unz64local_getShort
  0049d	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a0	85 c0		 test	 eax, eax
  004a2	74 07		 je	 SHORT $LN24@unz64local@7

; 1033 :                 err=UNZ_ERRNO;

  004a4	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@unz64local@7:

; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  004ab	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _dataSize$79938[ebp]
  004b1	51		 push	 ecx
  004b2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004b5	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  004b8	50		 push	 eax
  004b9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  004bc	51		 push	 ecx
  004bd	e8 00 00 00 00	 call	 _unz64local_getShort
  004c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  004c5	85 c0		 test	 eax, eax
  004c7	74 07		 je	 SHORT $LN23@unz64local@7

; 1036 :                 err=UNZ_ERRNO;

  004c9	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN23@unz64local@7:

; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  004d0	83 bd 74 ff ff
	ff 01		 cmp	 DWORD PTR _headerId$79937[ebp], 1
  004d7	0f 85 b7 00 00
	00		 jne	 $LN22@unz64local@7

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == MAXU32)

  004dd	83 7d c0 ff	 cmp	 DWORD PTR _file_info$[ebp+32], -1
  004e1	75 28		 jne	 SHORT $LN21@unz64local@7
  004e3	83 7d c4 00	 cmp	 DWORD PTR _file_info$[ebp+36], 0
  004e7	75 22		 jne	 SHORT $LN21@unz64local@7

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  004e9	8d 55 c0	 lea	 edx, DWORD PTR _file_info$[ebp+32]
  004ec	52		 push	 edx
  004ed	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004f0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004f3	51		 push	 ecx
  004f4	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004f7	52		 push	 edx
  004f8	e8 00 00 00 00	 call	 _unz64local_getLong64
  004fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00500	85 c0		 test	 eax, eax
  00502	74 07		 je	 SHORT $LN21@unz64local@7

; 1046 :                                                                                         err=UNZ_ERRNO;

  00504	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN21@unz64local@7:

; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == MAXU32)

  0050b	83 7d b8 ff	 cmp	 DWORD PTR _file_info$[ebp+24], -1
  0050f	75 28		 jne	 SHORT $LN19@unz64local@7
  00511	83 7d bc 00	 cmp	 DWORD PTR _file_info$[ebp+28], 0
  00515	75 22		 jne	 SHORT $LN19@unz64local@7

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  00517	8d 45 b8	 lea	 eax, DWORD PTR _file_info$[ebp+24]
  0051a	50		 push	 eax
  0051b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0051e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00521	52		 push	 edx
  00522	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00525	50		 push	 eax
  00526	e8 00 00 00 00	 call	 _unz64local_getLong64
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052e	85 c0		 test	 eax, eax
  00530	74 07		 je	 SHORT $LN19@unz64local@7

; 1052 :                                                                                   err=UNZ_ERRNO;

  00532	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN19@unz64local@7:

; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == MAXU32)

  00539	83 7d 90 ff	 cmp	 DWORD PTR _file_info_internal$[ebp], -1
  0053d	75 28		 jne	 SHORT $LN17@unz64local@7
  0053f	83 7d 94 00	 cmp	 DWORD PTR _file_info_internal$[ebp+4], 0
  00543	75 22		 jne	 SHORT $LN17@unz64local@7

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00545	8d 4d 90	 lea	 ecx, DWORD PTR _file_info_internal$[ebp]
  00548	51		 push	 ecx
  00549	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0054c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0054f	50		 push	 eax
  00550	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00553	51		 push	 ecx
  00554	e8 00 00 00 00	 call	 _unz64local_getLong64
  00559	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055c	85 c0		 test	 eax, eax
  0055e	74 07		 je	 SHORT $LN17@unz64local@7

; 1059 :                                                                                 err=UNZ_ERRNO;

  00560	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN17@unz64local@7:

; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == MAXU32)

  00567	83 7d d4 ff	 cmp	 DWORD PTR _file_info$[ebp+52], -1
  0056b	75 25		 jne	 SHORT $LN15@unz64local@7

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0056d	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _uL$79942[ebp]
  00573	52		 push	 edx
  00574	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00577	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0057a	51		 push	 ecx
  0057b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0057e	52		 push	 edx
  0057f	e8 00 00 00 00	 call	 _unz64local_getLong
  00584	83 c4 0c	 add	 esp, 12			; 0000000cH
  00587	85 c0		 test	 eax, eax
  00589	74 07		 je	 SHORT $LN15@unz64local@7

; 1066 :                                                                                 err=UNZ_ERRNO;

  0058b	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN15@unz64local@7:

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }
; 1070 :             else

  00592	eb 2a		 jmp	 SHORT $LN13@unz64local@7
$LN22@unz64local@7:

; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  00594	6a 01		 push	 1
  00596	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _dataSize$79938[ebp]
  0059c	33 c9		 xor	 ecx, ecx
  0059e	51		 push	 ecx
  0059f	50		 push	 eax
  005a0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005a3	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  005a6	50		 push	 eax
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005aa	51		 push	 ecx
  005ab	e8 00 00 00 00	 call	 _call_zseek64
  005b0	83 c4 14	 add	 esp, 20			; 00000014H
  005b3	85 c0		 test	 eax, eax
  005b5	74 07		 je	 SHORT $LN13@unz64local@7

; 1073 :                     err=UNZ_ERRNO;

  005b7	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@unz64local@7:

; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  005be	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _dataSize$79938[ebp]
  005c4	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _acc$79930[ebp]
  005ca	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  005ce	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _acc$79930[ebp], ecx

; 1077 :         }

  005d4	e9 9e fe ff ff	 jmp	 $LN26@unz64local@7
$LN30@unz64local@7:

; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  005d9	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  005dd	0f 85 b4 00 00
	00		 jne	 $LN11@unz64local@7
  005e3	83 7d 24 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  005e7	0f 84 aa 00 00
	00		 je	 $LN11@unz64local@7

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  005ed	8b 55 d0	 mov	 edx, DWORD PTR _file_info$[ebp+48]
  005f0	3b 55 28	 cmp	 edx, DWORD PTR _commentBufferSize$[ebp]
  005f3	73 14		 jae	 SHORT $LN10@unz64local@7

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  005f5	8b 45 24	 mov	 eax, DWORD PTR _szComment$[ebp]
  005f8	03 45 d0	 add	 eax, DWORD PTR _file_info$[ebp+48]
  005fb	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  005fe	8b 4d d0	 mov	 ecx, DWORD PTR _file_info$[ebp+48]
  00601	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _uSizeRead$79955[ebp], ecx

; 1087 :         }
; 1088 :         else

  00607	eb 09		 jmp	 SHORT $LN9@unz64local@7
$LN10@unz64local@7:

; 1089 :             uSizeRead = commentBufferSize;

  00609	8b 55 28	 mov	 edx, DWORD PTR _commentBufferSize$[ebp]
  0060c	89 95 6c ff ff
	ff		 mov	 DWORD PTR _uSizeRead$79955[ebp], edx
$LN9@unz64local@7:

; 1090 : 
; 1091 :         if (lSeek!=0)

  00612	83 7d 98 00	 cmp	 DWORD PTR _lSeek$[ebp], 0
  00616	74 2f		 je	 SHORT $LN8@unz64local@7

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00618	6a 01		 push	 1
  0061a	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  0061d	99		 cdq
  0061e	52		 push	 edx
  0061f	50		 push	 eax
  00620	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00623	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00626	51		 push	 ecx
  00627	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0062a	52		 push	 edx
  0062b	e8 00 00 00 00	 call	 _call_zseek64
  00630	83 c4 14	 add	 esp, 20			; 00000014H
  00633	85 c0		 test	 eax, eax
  00635	75 09		 jne	 SHORT $LN7@unz64local@7

; 1094 :                 lSeek=0;

  00637	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 1095 :             else

  0063e	eb 07		 jmp	 SHORT $LN8@unz64local@7
$LN7@unz64local@7:

; 1096 :                 err=UNZ_ERRNO;

  00640	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@unz64local@7:

; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  00647	83 7d d0 00	 cmp	 DWORD PTR _file_info$[ebp+48], 0
  0064b	76 39		 jbe	 SHORT $LN5@unz64local@7
  0064d	83 7d 28 00	 cmp	 DWORD PTR _commentBufferSize$[ebp], 0
  00651	76 33		 jbe	 SHORT $LN5@unz64local@7

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  00653	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _uSizeRead$79955[ebp]
  00659	50		 push	 eax
  0065a	8b 4d 24	 mov	 ecx, DWORD PTR _szComment$[ebp]
  0065d	51		 push	 ecx
  0065e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00661	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00664	50		 push	 eax
  00665	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00668	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0066b	52		 push	 edx
  0066c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0066f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00672	ff d1		 call	 ecx
  00674	83 c4 10	 add	 esp, 16			; 00000010H
  00677	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _uSizeRead$79955[ebp]
  0067d	74 07		 je	 SHORT $LN5@unz64local@7

; 1101 :                 err=UNZ_ERRNO;

  0067f	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@unz64local@7:

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;

  00686	8b 55 d0	 mov	 edx, DWORD PTR _file_info$[ebp+48]
  00689	2b 95 6c ff ff
	ff		 sub	 edx, DWORD PTR _uSizeRead$79955[ebp]
  0068f	03 55 98	 add	 edx, DWORD PTR _lSeek$[ebp]
  00692	89 55 98	 mov	 DWORD PTR _lSeek$[ebp], edx

; 1103 :     }
; 1104 :     else

  00695	eb 09		 jmp	 SHORT $LN3@unz64local@7
$LN11@unz64local@7:

; 1105 :         lSeek+=file_info.size_file_comment;

  00697	8b 45 98	 mov	 eax, DWORD PTR _lSeek$[ebp]
  0069a	03 45 d0	 add	 eax, DWORD PTR _file_info$[ebp+48]
  0069d	89 45 98	 mov	 DWORD PTR _lSeek$[ebp], eax
$LN3@unz64local@7:

; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  006a0	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  006a4	75 13		 jne	 SHORT $LN2@unz64local@7
  006a6	83 7d 0c 00	 cmp	 DWORD PTR _pfile_info$[ebp], 0
  006aa	74 0d		 je	 SHORT $LN2@unz64local@7

; 1109 :         *pfile_info=file_info;

  006ac	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  006b1	8d 75 a0	 lea	 esi, DWORD PTR _file_info$[ebp]
  006b4	8b 7d 0c	 mov	 edi, DWORD PTR _pfile_info$[ebp]
  006b7	f3 a5		 rep movsd
$LN2@unz64local@7:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  006b9	83 7d 8c 00	 cmp	 DWORD PTR _err$[ebp], 0
  006bd	75 14		 jne	 SHORT $LN1@unz64local@7
  006bf	83 7d 10 00	 cmp	 DWORD PTR _pfile_info_internal$[ebp], 0
  006c3	74 0e		 je	 SHORT $LN1@unz64local@7

; 1112 :         *pfile_info_internal=file_info_internal;

  006c5	8b 4d 10	 mov	 ecx, DWORD PTR _pfile_info_internal$[ebp]
  006c8	8b 55 90	 mov	 edx, DWORD PTR _file_info_internal$[ebp]
  006cb	89 11		 mov	 DWORD PTR [ecx], edx
  006cd	8b 45 94	 mov	 eax, DWORD PTR _file_info_internal$[ebp+4]
  006d0	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@unz64local@7:

; 1113 : 
; 1114 :     return err;

  006d3	8b 45 8c	 mov	 eax, DWORD PTR _err$[ebp]
$LN66@unz64local@7:

; 1115 : }

  006d6	5f		 pop	 edi
  006d7	5e		 pop	 esi
  006d8	8b e5		 mov	 esp, ebp
  006da	5d		 pop	 ebp
  006db	c3		 ret	 0
_unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
PUBLIC	_unzClose@4
; Function compile flags: /Odtp
;	COMDAT _unzClose@4
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzClose@4 PROC					; COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	75 07		 jne	 SHORT $LN3@unzClose

; 812  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0000f	eb 48		 jmp	 SHORT $LN4@unzClose
$LN3@unzClose:

; 813  :     s=(unz64_s*)file;

  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001a	83 b9 e0 00 00
	00 00		 cmp	 DWORD PTR [ecx+224], 0
  00021	74 09		 je	 SHORT $LN2@unzClose

; 816  :         unzCloseCurrentFile(file);

  00023	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN2@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0002f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00032	51		 push	 ecx
  00033	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00036	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00040	ff d2		 call	 edx
  00042	83 c4 08	 add	 esp, 8

; 819  :     TRYFREE(s);

  00045	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00049	74 0c		 je	 SHORT $LN1@unzClose
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _free
  00054	83 c4 04	 add	 esp, 4
$LN1@unzClose:

; 820  :     return UNZ_OK;

  00057	33 c0		 xor	 eax, eax
$LN4@unzClose:

; 821  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
_unzClose@4 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unz64local_SearchCentralDir64
_TEXT	SEGMENT
tv86 = -88						; size = 4
tv253 = -84						; size = 8
tv229 = -76						; size = 8
_uReadSize$79677 = -68					; size = 4
_uReadPos$79678 = -64					; size = 8
_i$79679 = -56						; size = 4
_buf$ = -52						; size = 4
_uMaxBack$ = -48					; size = 8
_uL$ = -36						; size = 4
_relativeOffset$ = -32					; size = 8
_uBackRead$ = -24					; size = 8
_uPosFound$ = -16					; size = 8
_uSizeFile$ = -8					; size = 8
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unz64local_SearchCentralDir64 PROC			; COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 d0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH
  0000d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp+4], 0

; 485  :     ZPOS64_T uPosFound=0;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0
  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp+4], 0

; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00022	6a 02		 push	 2
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN25@unz64local@8

; 490  :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	33 d2		 xor	 edx, edx
  00040	e9 16 03 00 00	 jmp	 $LN26@unz64local@8
$LN25@unz64local@8:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00045	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _call_ztell64
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f8	 mov	 DWORD PTR _uSizeFile$[ebp], eax
  00058	89 55 fc	 mov	 DWORD PTR _uSizeFile$[ebp+4], edx

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)

  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _uMaxBack$[ebp+4]
  0005e	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00061	72 16		 jb	 SHORT $LN24@unz64local@8
  00063	77 08		 ja	 SHORT $LN30@unz64local@8
  00065	8b 55 d0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  00068	3b 55 f8	 cmp	 edx, DWORD PTR _uSizeFile$[ebp]
  0006b	76 0c		 jbe	 SHORT $LN24@unz64local@8
$LN30@unz64local@8:

; 496  :         uMaxBack = uSizeFile;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  00070	89 45 d0	 mov	 DWORD PTR _uMaxBack$[ebp], eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00076	89 4d d4	 mov	 DWORD PTR _uMaxBack$[ebp+4], ecx
$LN24@unz64local@8:

; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00079	68 04 04 00 00	 push	 1028			; 00000404H
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	83 c4 04	 add	 esp, 4
  00086	89 45 cc	 mov	 DWORD PTR _buf$[ebp], eax

; 499  :     if (buf==NULL)

  00089	83 7d cc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0008d	75 09		 jne	 SHORT $LN23@unz64local@8

; 500  :         return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	33 d2		 xor	 edx, edx
  00093	e9 c3 02 00 00	 jmp	 $LN26@unz64local@8
$LN23@unz64local@8:

; 501  : 
; 502  :     uBackRead = 4;

  00098	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
  0009f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp+4], 0
$LN22@unz64local@8:

; 503  :     while (uBackRead<uMaxBack)

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000a9	3b 55 d4	 cmp	 edx, DWORD PTR _uMaxBack$[ebp+4]
  000ac	0f 87 6c 01 00
	00		 ja	 $LN21@unz64local@8
  000b2	72 0c		 jb	 SHORT $LN31@unz64local@8
  000b4	8b 45 e8	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000b7	3b 45 d0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  000ba	0f 83 5e 01 00
	00		 jae	 $LN21@unz64local@8
$LN31@unz64local@8:

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000c3	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000c9	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  000cc	83 d2 00	 adc	 edx, 0
  000cf	89 4d b4	 mov	 DWORD PTR tv229[ebp], ecx
  000d2	89 55 b8	 mov	 DWORD PTR tv229[ebp+4], edx
  000d5	8b 45 b8	 mov	 eax, DWORD PTR tv229[ebp+4]
  000d8	3b 45 d4	 cmp	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000db	72 18		 jb	 SHORT $LN20@unz64local@8
  000dd	77 08		 ja	 SHORT $LN32@unz64local@8
  000df	8b 4d b4	 mov	 ecx, DWORD PTR tv229[ebp]
  000e2	3b 4d d0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  000e5	76 0e		 jbe	 SHORT $LN20@unz64local@8
$LN32@unz64local@8:

; 509  :             uBackRead = uMaxBack;

  000e7	8b 55 d0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000ea	89 55 e8	 mov	 DWORD PTR _uBackRead$[ebp], edx
  000ed	8b 45 d4	 mov	 eax, DWORD PTR _uMaxBack$[ebp+4]
  000f0	89 45 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], eax

; 510  :         else

  000f3	eb 15		 jmp	 SHORT $LN19@unz64local@8
$LN20@unz64local@8:

; 511  :             uBackRead+=BUFREADCOMMENT;

  000f5	8b 4d e8	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  000f8	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _uBackRead$[ebp+4]
  00101	83 d2 00	 adc	 edx, 0
  00104	89 4d e8	 mov	 DWORD PTR _uBackRead$[ebp], ecx
  00107	89 55 ec	 mov	 DWORD PTR _uBackRead$[ebp+4], edx
$LN19@unz64local@8:

; 512  :         uReadPos = uSizeFile-uBackRead ;

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  0010d	2b 45 e8	 sub	 eax, DWORD PTR _uBackRead$[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp+4]
  00113	1b 4d ec	 sbb	 ecx, DWORD PTR _uBackRead$[ebp+4]
  00116	89 45 c0	 mov	 DWORD PTR _uReadPos$79678[ebp], eax
  00119	89 4d c4	 mov	 DWORD PTR _uReadPos$79678[ebp+4], ecx

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  0011c	8b 55 f8	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0011f	2b 55 c0	 sub	 edx, DWORD PTR _uReadPos$79678[ebp]
  00122	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp+4]
  00125	1b 45 c4	 sbb	 eax, DWORD PTR _uReadPos$79678[ebp+4]
  00128	89 55 ac	 mov	 DWORD PTR tv253[ebp], edx
  0012b	89 45 b0	 mov	 DWORD PTR tv253[ebp+4], eax
  0012e	83 7d b0 00	 cmp	 DWORD PTR tv253[ebp+4], 0
  00132	72 14		 jb	 SHORT $LN28@unz64local@8
  00134	77 09		 ja	 SHORT $LN33@unz64local@8
  00136	81 7d ac 04 04
	00 00		 cmp	 DWORD PTR tv253[ebp], 1028 ; 00000404H
  0013d	76 09		 jbe	 SHORT $LN28@unz64local@8
$LN33@unz64local@8:
  0013f	c7 45 a8 04 04
	00 00		 mov	 DWORD PTR tv86[ebp], 1028 ; 00000404H
  00146	eb 0f		 jmp	 SHORT $LN29@unz64local@8
$LN28@unz64local@8:
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  0014b	2b 4d c0	 sub	 ecx, DWORD PTR _uReadPos$79678[ebp]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp+4]
  00151	1b 55 c4	 sbb	 edx, DWORD PTR _uReadPos$79678[ebp+4]
  00154	89 4d a8	 mov	 DWORD PTR tv86[ebp], ecx
$LN29@unz64local@8:
  00157	8b 45 a8	 mov	 eax, DWORD PTR tv86[ebp]
  0015a	89 45 bc	 mov	 DWORD PTR _uReadSize$79677[ebp], eax

; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015d	6a 00		 push	 0
  0015f	8b 4d c4	 mov	 ecx, DWORD PTR _uReadPos$79678[ebp+4]
  00162	51		 push	 ecx
  00163	8b 55 c0	 mov	 edx, DWORD PTR _uReadPos$79678[ebp]
  00166	52		 push	 edx
  00167	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 _call_zseek64
  00174	83 c4 14	 add	 esp, 20			; 00000014H
  00177	85 c0		 test	 eax, eax
  00179	74 05		 je	 SHORT $LN18@unz64local@8

; 517  :             break;

  0017b	e9 9e 00 00 00	 jmp	 $LN21@unz64local@8
$LN18@unz64local@8:

; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00180	8b 55 bc	 mov	 edx, DWORD PTR _uReadSize$79677[ebp]
  00183	52		 push	 edx
  00184	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  00187	50		 push	 eax
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0018b	51		 push	 ecx
  0018c	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0018f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00192	50		 push	 eax
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00196	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00199	ff d2		 call	 edx
  0019b	83 c4 10	 add	 esp, 16			; 00000010H
  0019e	3b 45 bc	 cmp	 eax, DWORD PTR _uReadSize$79677[ebp]
  001a1	74 02		 je	 SHORT $LN17@unz64local@8

; 520  :             break;

  001a3	eb 79		 jmp	 SHORT $LN21@unz64local@8
$LN17@unz64local@8:

; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  001a5	8b 45 bc	 mov	 eax, DWORD PTR _uReadSize$79677[ebp]
  001a8	83 e8 03	 sub	 eax, 3
  001ab	89 45 c8	 mov	 DWORD PTR _i$79679[ebp], eax
$LN16@unz64local@8:
  001ae	8b 4d c8	 mov	 ecx, DWORD PTR _i$79679[ebp]
  001b1	8b 55 c8	 mov	 edx, DWORD PTR _i$79679[ebp]
  001b4	83 ea 01	 sub	 edx, 1
  001b7	89 55 c8	 mov	 DWORD PTR _i$79679[ebp], edx
  001ba	85 c9		 test	 ecx, ecx
  001bc	7e 51		 jle	 SHORT $LN15@unz64local@8

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  001be	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  001c1	03 45 c8	 add	 eax, DWORD PTR _i$79679[ebp]
  001c4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001c7	83 f9 50	 cmp	 ecx, 80			; 00000050H
  001ca	75 41		 jne	 SHORT $LN14@unz64local@8
  001cc	8b 55 cc	 mov	 edx, DWORD PTR _buf$[ebp]
  001cf	03 55 c8	 add	 edx, DWORD PTR _i$79679[ebp]
  001d2	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001d6	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001d9	75 32		 jne	 SHORT $LN14@unz64local@8
  001db	8b 4d cc	 mov	 ecx, DWORD PTR _buf$[ebp]
  001de	03 4d c8	 add	 ecx, DWORD PTR _i$79679[ebp]
  001e1	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  001e5	83 fa 06	 cmp	 edx, 6
  001e8	75 23		 jne	 SHORT $LN14@unz64local@8
  001ea	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  001ed	03 45 c8	 add	 eax, DWORD PTR _i$79679[ebp]
  001f0	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  001f4	83 f9 07	 cmp	 ecx, 7
  001f7	75 14		 jne	 SHORT $LN14@unz64local@8

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  001f9	8b 45 c8	 mov	 eax, DWORD PTR _i$79679[ebp]
  001fc	99		 cdq
  001fd	03 45 c0	 add	 eax, DWORD PTR _uReadPos$79678[ebp]
  00200	8b 4d c4	 mov	 ecx, DWORD PTR _uReadPos$79678[ebp+4]
  00203	13 ca		 adc	 ecx, edx
  00205	89 45 f0	 mov	 DWORD PTR _uPosFound$[ebp], eax
  00208	89 4d f4	 mov	 DWORD PTR _uPosFound$[ebp+4], ecx

; 527  :                 break;

  0020b	eb 02		 jmp	 SHORT $LN15@unz64local@8
$LN14@unz64local@8:

; 528  :             }

  0020d	eb 9f		 jmp	 SHORT $LN16@unz64local@8
$LN15@unz64local@8:

; 529  : 
; 530  :         if (uPosFound!=0)

  0020f	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  00212	0b 55 f4	 or	 edx, DWORD PTR _uPosFound$[ebp+4]
  00215	74 02		 je	 SHORT $LN13@unz64local@8

; 531  :             break;

  00217	eb 05		 jmp	 SHORT $LN21@unz64local@8
$LN13@unz64local@8:

; 532  :     }

  00219	e9 88 fe ff ff	 jmp	 $LN22@unz64local@8
$LN21@unz64local@8:

; 533  :     TRYFREE(buf);

  0021e	83 7d cc 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00222	74 0c		 je	 SHORT $LN12@unz64local@8
  00224	8b 45 cc	 mov	 eax, DWORD PTR _buf$[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _free
  0022d	83 c4 04	 add	 esp, 4
$LN12@unz64local@8:

; 534  :     if (uPosFound == 0)

  00230	8b 4d f0	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  00233	0b 4d f4	 or	 ecx, DWORD PTR _uPosFound$[ebp+4]
  00236	75 09		 jne	 SHORT $LN11@unz64local@8

; 535  :         return 0;

  00238	33 c0		 xor	 eax, eax
  0023a	33 d2		 xor	 edx, edx
  0023c	e9 1a 01 00 00	 jmp	 $LN26@unz64local@8
$LN11@unz64local@8:

; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00241	6a 00		 push	 0
  00243	8b 55 f4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  00246	52		 push	 edx
  00247	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0024a	50		 push	 eax
  0024b	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0024e	51		 push	 ecx
  0024f	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00252	52		 push	 edx
  00253	e8 00 00 00 00	 call	 _call_zseek64
  00258	83 c4 14	 add	 esp, 20			; 00000014H
  0025b	85 c0		 test	 eax, eax
  0025d	74 09		 je	 SHORT $LN10@unz64local@8

; 539  :         return 0;

  0025f	33 c0		 xor	 eax, eax
  00261	33 d2		 xor	 edx, edx
  00263	e9 f3 00 00 00	 jmp	 $LN26@unz64local@8
$LN10@unz64local@8:

; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00268	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  0026b	50		 push	 eax
  0026c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0026f	51		 push	 ecx
  00270	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 _unz64local_getLong
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	85 c0		 test	 eax, eax
  0027e	74 09		 je	 SHORT $LN9@unz64local@8

; 543  :         return 0;

  00280	33 c0		 xor	 eax, eax
  00282	33 d2		 xor	 edx, edx
  00284	e9 d2 00 00 00	 jmp	 $LN26@unz64local@8
$LN9@unz64local@8:

; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00289	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  0028c	50		 push	 eax
  0028d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00290	51		 push	 ecx
  00291	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 _unz64local_getLong
  0029a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029d	85 c0		 test	 eax, eax
  0029f	74 09		 je	 SHORT $LN8@unz64local@8

; 547  :         return 0;

  002a1	33 c0		 xor	 eax, eax
  002a3	33 d2		 xor	 edx, edx
  002a5	e9 b1 00 00 00	 jmp	 $LN26@unz64local@8
$LN8@unz64local@8:

; 548  :     if (uL != 0)

  002aa	83 7d dc 00	 cmp	 DWORD PTR _uL$[ebp], 0
  002ae	74 09		 je	 SHORT $LN7@unz64local@8

; 549  :         return 0;

  002b0	33 c0		 xor	 eax, eax
  002b2	33 d2		 xor	 edx, edx
  002b4	e9 a2 00 00 00	 jmp	 $LN26@unz64local@8
$LN7@unz64local@8:

; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  002b9	8d 45 e0	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  002c0	51		 push	 ecx
  002c1	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002c4	52		 push	 edx
  002c5	e8 00 00 00 00	 call	 _unz64local_getLong64
  002ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  002cd	85 c0		 test	 eax, eax
  002cf	74 09		 je	 SHORT $LN6@unz64local@8

; 553  :         return 0;

  002d1	33 c0		 xor	 eax, eax
  002d3	33 d2		 xor	 edx, edx
  002d5	e9 81 00 00 00	 jmp	 $LN26@unz64local@8
$LN6@unz64local@8:

; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  002da	8d 45 dc	 lea	 eax, DWORD PTR _uL$[ebp]
  002dd	50		 push	 eax
  002de	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  002e1	51		 push	 ecx
  002e2	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  002e5	52		 push	 edx
  002e6	e8 00 00 00 00	 call	 _unz64local_getLong
  002eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ee	85 c0		 test	 eax, eax
  002f0	74 06		 je	 SHORT $LN5@unz64local@8

; 557  :         return 0;

  002f2	33 c0		 xor	 eax, eax
  002f4	33 d2		 xor	 edx, edx
  002f6	eb 63		 jmp	 SHORT $LN26@unz64local@8
$LN5@unz64local@8:

; 558  :     if (uL != 1)

  002f8	83 7d dc 01	 cmp	 DWORD PTR _uL$[ebp], 1
  002fc	74 06		 je	 SHORT $LN4@unz64local@8

; 559  :         return 0;

  002fe	33 c0		 xor	 eax, eax
  00300	33 d2		 xor	 edx, edx
  00302	eb 57		 jmp	 SHORT $LN26@unz64local@8
$LN4@unz64local@8:

; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00304	6a 00		 push	 0
  00306	8b 45 e4	 mov	 eax, DWORD PTR _relativeOffset$[ebp+4]
  00309	50		 push	 eax
  0030a	8b 4d e0	 mov	 ecx, DWORD PTR _relativeOffset$[ebp]
  0030d	51		 push	 ecx
  0030e	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00311	52		 push	 edx
  00312	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 _call_zseek64
  0031b	83 c4 14	 add	 esp, 20			; 00000014H
  0031e	85 c0		 test	 eax, eax
  00320	74 06		 je	 SHORT $LN3@unz64local@8

; 563  :         return 0;

  00322	33 c0		 xor	 eax, eax
  00324	33 d2		 xor	 edx, edx
  00326	eb 33		 jmp	 SHORT $LN26@unz64local@8
$LN3@unz64local@8:

; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00328	8d 4d dc	 lea	 ecx, DWORD PTR _uL$[ebp]
  0032b	51		 push	 ecx
  0032c	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0032f	52		 push	 edx
  00330	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 _unz64local_getLong
  00339	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033c	85 c0		 test	 eax, eax
  0033e	74 06		 je	 SHORT $LN2@unz64local@8

; 567  :         return 0;

  00340	33 c0		 xor	 eax, eax
  00342	33 d2		 xor	 edx, edx
  00344	eb 15		 jmp	 SHORT $LN26@unz64local@8
$LN2@unz64local@8:

; 568  : 
; 569  :     if (uL != 0x06064b50)

  00346	81 7d dc 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  0034d	74 06		 je	 SHORT $LN1@unz64local@8

; 570  :         return 0;

  0034f	33 c0		 xor	 eax, eax
  00351	33 d2		 xor	 edx, edx
  00353	eb 06		 jmp	 SHORT $LN26@unz64local@8
$LN1@unz64local@8:

; 571  : 
; 572  :     return relativeOffset;

  00355	8b 45 e0	 mov	 eax, DWORD PTR _relativeOffset$[ebp]
  00358	8b 55 e4	 mov	 edx, DWORD PTR _relativeOffset$[ebp+4]
$LN26@unz64local@8:

; 573  : }

  0035b	8b e5		 mov	 esp, ebp
  0035d	5d		 pop	 ebp
  0035e	c3		 ret	 0
_unz64local_SearchCentralDir64 ENDP
PUBLIC	_unzReadCurrentFile@12
; Function compile flags: /Odtp
;	COMDAT _unzReadCurrentFile@12
_TEXT	SEGMENT
tv392 = -112						; size = 4
tv324 = -108						; size = 8
tv323 = -100						; size = 4
tv316 = -96						; size = 4
tv302 = -92						; size = 8
tv299 = -84						; size = 8
tv278 = -76						; size = 4
tv275 = -72						; size = 8
_uTotalOutBefore$80294 = -64				; size = 8
_uTotalOutAfter$80295 = -56				; size = 8
_flush$80298 = -44					; size = 4
_uOutThis$80297 = -40					; size = 8
_bufBefore$80296 = -32					; size = 4
_uDoCopy$80283 = -28					; size = 4
_i$80284 = -24						; size = 4
_uReadThis$80273 = -20					; size = 4
_err$ = -16						; size = 4
_iRead$ = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzReadCurrentFile@12 PROC				; COMDAT

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1686 :     int err=UNZ_OK;

  00008	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1687 :     uInt iRead = 0;

  0000f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iRead$[ebp], 0

; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  00016	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0001a	75 0a		 jne	 SHORT $LN28@unzReadCur

; 1691 :         return UNZ_PARAMERROR;

  0001c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00021	e9 93 04 00 00	 jmp	 $LN29@unzReadCur
$LN28@unzReadCur:

; 1692 :     s=(unz64_s*)file;

  00026	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00029	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002f	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  00035	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  00038	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0003c	75 0a		 jne	 SHORT $LN27@unzReadCur

; 1696 :         return UNZ_PARAMERROR;

  0003e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00043	e9 71 04 00 00	 jmp	 $LN29@unzReadCur
$LN27@unzReadCur:

; 1697 : 
; 1698 : 
; 1699 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  00048	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004e	75 0a		 jne	 SHORT $LN26@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  00050	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00055	e9 5f 04 00 00	 jmp	 $LN29@unzReadCur
$LN26@unzReadCur:

; 1701 :     if (len==0)

  0005a	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0005e	75 07		 jne	 SHORT $LN25@unzReadCur

; 1702 :         return 0;

  00060	33 c0		 xor	 eax, eax
  00062	e9 52 04 00 00	 jmp	 $LN29@unzReadCur
$LN25@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0006d	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;

  00070	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00076	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
; 1709 :         (!(pfile_in_zip_read_info->raw)))

  00079	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  0007c	33 c0		 xor	 eax, eax
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00081	89 55 b8	 mov	 DWORD PTR tv275[ebp], edx
  00084	89 45 bc	 mov	 DWORD PTR tv275[ebp+4], eax
  00087	89 4d b4	 mov	 DWORD PTR tv278[ebp], ecx
  0008a	8b 55 b4	 mov	 edx, DWORD PTR tv278[ebp]
  0008d	8b 45 bc	 mov	 eax, DWORD PTR tv275[ebp+4]
  00090	3b 82 84 00 00
	00		 cmp	 eax, DWORD PTR [edx+132]
  00096	72 2b		 jb	 SHORT $LN24@unzReadCur
  00098	77 0e		 ja	 SHORT $LN31@unzReadCur
  0009a	8b 4d b4	 mov	 ecx, DWORD PTR tv278[ebp]
  0009d	8b 55 b8	 mov	 edx, DWORD PTR tv275[ebp]
  000a0	3b 91 80 00 00
	00		 cmp	 edx, DWORD PTR [ecx+128]
  000a6	76 1b		 jbe	 SHORT $LN24@unzReadCur
$LN31@unzReadCur:
  000a8	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ab	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  000b2	75 0f		 jne	 SHORT $LN24@unzReadCur

; 1710 :         pfile_in_zip_read_info->stream.avail_out =
; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;

  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b7	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000bd	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c0	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN24@unzReadCur:

; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&
; 1715 :          (pfile_in_zip_read_info->raw))

  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  000c6	33 d2		 xor	 edx, edx
  000c8	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000cb	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ce	33 f6		 xor	 esi, esi
  000d0	8b 7d f8	 mov	 edi, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d3	03 47 78	 add	 eax, DWORD PTR [edi+120]
  000d6	8b 7f 7c	 mov	 edi, DWORD PTR [edi+124]
  000d9	13 fe		 adc	 edi, esi
  000db	89 4d ac	 mov	 DWORD PTR tv299[ebp], ecx
  000de	89 55 b0	 mov	 DWORD PTR tv299[ebp+4], edx
  000e1	89 45 a4	 mov	 DWORD PTR tv302[ebp], eax
  000e4	89 7d a8	 mov	 DWORD PTR tv302[ebp+4], edi
  000e7	8b 4d b0	 mov	 ecx, DWORD PTR tv299[ebp+4]
  000ea	3b 4d a8	 cmp	 ecx, DWORD PTR tv302[ebp+4]
  000ed	72 28		 jb	 SHORT $LN22@unzReadCur
  000ef	77 08		 ja	 SHORT $LN32@unzReadCur
  000f1	8b 55 ac	 mov	 edx, DWORD PTR tv299[ebp]
  000f4	3b 55 a4	 cmp	 edx, DWORD PTR tv302[ebp]
  000f7	76 1e		 jbe	 SHORT $LN22@unzReadCur
$LN32@unzReadCur:
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000fc	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  00103	74 12		 je	 SHORT $LN22@unzReadCur

; 1716 :         pfile_in_zip_read_info->stream.avail_out =
; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;

  00105	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00108	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0010e	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00111	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00114	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$LN22@unzReadCur:

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  00117	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0011a	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0011e	0f 86 87 03 00
	00		 jbe	 $LN21@unzReadCur

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&
; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))

  00124	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00127	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0012b	0f 85 27 01 00
	00		 jne	 $LN20@unzReadCur
  00131	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00134	89 4d a0	 mov	 DWORD PTR tv316[ebp], ecx
  00137	8b 55 a0	 mov	 edx, DWORD PTR tv316[ebp]
  0013a	83 7a 7c 00	 cmp	 DWORD PTR [edx+124], 0
  0013e	77 0d		 ja	 SHORT $LN33@unzReadCur
  00140	8b 45 a0	 mov	 eax, DWORD PTR tv316[ebp]
  00143	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  00147	0f 86 0b 01 00
	00		 jbe	 $LN20@unzReadCur
$LN33@unzReadCur:

; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  0014d	c7 45 ec 00 40
	00 00		 mov	 DWORD PTR _uReadThis$80273[ebp], 16384 ; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  00154	8b 4d ec	 mov	 ecx, DWORD PTR _uReadThis$80273[ebp]
  00157	33 d2		 xor	 edx, edx
  00159	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0015c	89 45 9c	 mov	 DWORD PTR tv323[ebp], eax
  0015f	89 4d 94	 mov	 DWORD PTR tv324[ebp], ecx
  00162	89 55 98	 mov	 DWORD PTR tv324[ebp+4], edx
  00165	8b 4d 9c	 mov	 ecx, DWORD PTR tv323[ebp]
  00168	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0016b	3b 55 98	 cmp	 edx, DWORD PTR tv324[ebp+4]
  0016e	77 16		 ja	 SHORT $LN19@unzReadCur
  00170	72 0b		 jb	 SHORT $LN34@unzReadCur
  00172	8b 45 9c	 mov	 eax, DWORD PTR tv323[ebp]
  00175	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00178	3b 4d 94	 cmp	 ecx, DWORD PTR tv324[ebp]
  0017b	73 09		 jae	 SHORT $LN19@unzReadCur
$LN34@unzReadCur:

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  0017d	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00180	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00183	89 45 ec	 mov	 DWORD PTR _uReadThis$80273[ebp], eax
$LN19@unzReadCur:

; 1728 :             if (uReadThis == 0)

  00186	83 7d ec 00	 cmp	 DWORD PTR _uReadThis$80273[ebp], 0
  0018a	75 07		 jne	 SHORT $LN18@unzReadCur

; 1729 :                 return UNZ_EOF;

  0018c	33 c0		 xor	 eax, eax
  0018e	e9 26 03 00 00	 jmp	 $LN29@unzReadCur
$LN18@unzReadCur:

; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  00193	6a 00		 push	 0
  00195	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00198	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0019b	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0019e	03 82 c0 00 00
	00		 add	 eax, DWORD PTR [edx+192]
  001a4	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  001a7	13 8a c4 00 00
	00		 adc	 ecx, DWORD PTR [edx+196]
  001ad	51		 push	 ecx
  001ae	50		 push	 eax
  001af	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001b2	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  001b8	50		 push	 eax
  001b9	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001bc	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 _call_zseek64
  001c8	83 c4 14	 add	 esp, 20			; 00000014H
  001cb	85 c0		 test	 eax, eax
  001cd	74 08		 je	 SHORT $LN17@unzReadCur

; 1735 :                 return UNZ_ERRNO;

  001cf	83 c8 ff	 or	 eax, -1
  001d2	e9 e2 02 00 00	 jmp	 $LN29@unzReadCur
$LN17@unzReadCur:

; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  001d7	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$80273[ebp]
  001da	52		 push	 edx
  001db	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001de	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e0	51		 push	 ecx
  001e1	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001e4	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  001ea	50		 push	 eax
  001eb	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001ee	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  001f4	52		 push	 edx
  001f5	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001f8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001fe	ff d1		 call	 ecx
  00200	83 c4 10	 add	 esp, 16			; 00000010H
  00203	3b 45 ec	 cmp	 eax, DWORD PTR _uReadThis$80273[ebp]
  00206	74 08		 je	 SHORT $LN16@unzReadCur

; 1740 :                 return UNZ_ERRNO;

  00208	83 c8 ff	 or	 eax, -1
  0020b	e9 a9 02 00 00	 jmp	 $LN29@unzReadCur
$LN16@unzReadCur:

; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  00210	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$80273[ebp]
  00213	33 c0		 xor	 eax, eax
  00215	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00218	03 51 40	 add	 edx, DWORD PTR [ecx+64]
  0021b	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  0021e	13 c8		 adc	 ecx, eax
  00220	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00223	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00226	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  00229	8b 4d ec	 mov	 ecx, DWORD PTR _uReadThis$80273[ebp]
  0022c	33 d2		 xor	 edx, edx
  0022e	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00231	8b 70 78	 mov	 esi, DWORD PTR [eax+120]
  00234	2b f1		 sub	 esi, ecx
  00236	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00239	1b ca		 sbb	 ecx, edx
  0023b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0023e	89 72 78	 mov	 DWORD PTR [edx+120], esi
  00241	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =
; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;

  00244	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00247	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0024a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  0024f	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00252	8b 4d ec	 mov	 ecx, DWORD PTR _uReadThis$80273[ebp]
  00255	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN20@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  00258	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0025b	83 ba b8 00 00
	00 00		 cmp	 DWORD PTR [edx+184], 0
  00262	74 10		 je	 SHORT $LN14@unzReadCur
  00264	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00267	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [eax+200], 0
  0026e	0f 84 38 01 00
	00		 je	 $LN15@unzReadCur
$LN14@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))

  00274	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00277	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0027b	75 23		 jne	 SHORT $LN13@unzReadCur
  0027d	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00280	89 55 90	 mov	 DWORD PTR tv392[ebp], edx
  00283	8b 45 90	 mov	 eax, DWORD PTR tv392[ebp]
  00286	8b 4d 90	 mov	 ecx, DWORD PTR tv392[ebp]
  00289	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  0028c	0b 51 7c	 or	 edx, DWORD PTR [ecx+124]
  0028f	75 0f		 jne	 SHORT $LN13@unzReadCur

; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;

  00291	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  00294	f7 d8		 neg	 eax
  00296	1b c0		 sbb	 eax, eax
  00298	23 45 f4	 and	 eax, DWORD PTR _iRead$[ebp]
  0029b	e9 19 02 00 00	 jmp	 $LN29@unzReadCur
$LN13@unzReadCur:

; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <
; 1773 :                             pfile_in_zip_read_info->stream.avail_in)

  002a0	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002a6	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002a9	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  002ac	73 0b		 jae	 SHORT $LN12@unzReadCur

; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;

  002ae	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002b1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b4	89 4d e4	 mov	 DWORD PTR _uDoCopy$80283[ebp], ecx

; 1775 :             else

  002b7	eb 09		 jmp	 SHORT $LN11@unzReadCur
$LN12@unzReadCur:

; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;

  002b9	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002bf	89 45 e4	 mov	 DWORD PTR _uDoCopy$80283[ebp], eax
$LN11@unzReadCur:

; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  002c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$80284[ebp], 0
  002c9	eb 09		 jmp	 SHORT $LN10@unzReadCur
$LN9@unzReadCur:
  002cb	8b 4d e8	 mov	 ecx, DWORD PTR _i$80284[ebp]
  002ce	83 c1 01	 add	 ecx, 1
  002d1	89 4d e8	 mov	 DWORD PTR _i$80284[ebp], ecx
$LN10@unzReadCur:
  002d4	8b 55 e8	 mov	 edx, DWORD PTR _i$80284[ebp]
  002d7	3b 55 e4	 cmp	 edx, DWORD PTR _uDoCopy$80283[ebp]
  002da	73 1a		 jae	 SHORT $LN8@unzReadCur

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =
; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);

  002dc	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e2	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002e5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002e8	8b 55 e8	 mov	 edx, DWORD PTR _i$80284[ebp]
  002eb	8b 75 e8	 mov	 esi, DWORD PTR _i$80284[ebp]
  002ee	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  002f1	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002f4	eb d5		 jmp	 SHORT $LN9@unzReadCur
$LN8@unzReadCur:

; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;

  002f6	8b 55 e4	 mov	 edx, DWORD PTR _uDoCopy$80283[ebp]
  002f9	33 c0		 xor	 eax, eax
  002fb	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002fe	03 51 68	 add	 edx, DWORD PTR [ecx+104]
  00301	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  00304	13 c8		 adc	 ecx, eax
  00306	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00309	89 50 68	 mov	 DWORD PTR [eax+104], edx
  0030c	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);

  0030f	8b 4d e4	 mov	 ecx, DWORD PTR _uDoCopy$80283[ebp]
  00312	51		 push	 ecx
  00313	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00316	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00319	50		 push	 eax
  0031a	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0031d	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00320	52		 push	 edx
  00321	e8 00 00 00 00	 call	 _crc32@12
  00326	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00329	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  0032c	8b 55 e4	 mov	 edx, DWORD PTR _uDoCopy$80283[ebp]
  0032f	33 c0		 xor	 eax, eax
  00331	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00334	8b b1 80 00 00
	00		 mov	 esi, DWORD PTR [ecx+128]
  0033a	2b f2		 sub	 esi, edx
  0033c	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00342	1b d0		 sbb	 edx, eax
  00344	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00347	89 b0 80 00 00
	00		 mov	 DWORD PTR [eax+128], esi
  0034d	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  00353	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00356	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00359	2b 55 e4	 sub	 edx, DWORD PTR _uDoCopy$80283[ebp]
  0035c	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0035f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  00362	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00365	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00368	2b 55 e4	 sub	 edx, DWORD PTR _uDoCopy$80283[ebp]
  0036b	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0036e	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  00371	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00374	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00377	03 55 e4	 add	 edx, DWORD PTR _uDoCopy$80283[ebp]
  0037a	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0037d	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00380	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00383	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00386	03 55 e4	 add	 edx, DWORD PTR _uDoCopy$80283[ebp]
  00389	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0038c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  0038f	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00392	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00395	03 55 e4	 add	 edx, DWORD PTR _uDoCopy$80283[ebp]
  00398	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0039b	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1793 :             iRead += uDoCopy;

  0039e	8b 4d f4	 mov	 ecx, DWORD PTR _iRead$[ebp]
  003a1	03 4d e4	 add	 ecx, DWORD PTR _uDoCopy$80283[ebp]
  003a4	89 4d f4	 mov	 DWORD PTR _iRead$[ebp], ecx
  003a7	e9 fa 00 00 00	 jmp	 $LN7@unzReadCur
$LN15@unzReadCur:

; 1794 :         }
; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  003ac	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003af	83 ba b8 00 00
	00 0c		 cmp	 DWORD PTR [edx+184], 12	; 0000000cH
  003b6	75 05		 jne	 SHORT $LN6@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED
; 1838 :         else

  003b8	e9 e9 00 00 00	 jmp	 $LN7@unzReadCur
$LN6@unzReadCur:

; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;

  003bd	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _flush$80298[ebp], 2

; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  003c4	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003ca	33 d2		 xor	 edx, edx
  003cc	89 4d c0	 mov	 DWORD PTR _uTotalOutBefore$80294[ebp], ecx
  003cf	89 55 c4	 mov	 DWORD PTR _uTotalOutBefore$80294[ebp+4], edx

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  003d2	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003d5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003d8	89 4d e0	 mov	 DWORD PTR _bufBefore$80296[ebp], ecx

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  003db	8b 55 d4	 mov	 edx, DWORD PTR _flush$80298[ebp]
  003de	52		 push	 edx
  003df	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003e2	83 c0 04	 add	 eax, 4
  003e5	50		 push	 eax
  003e6	e8 00 00 00 00	 call	 _inflate@8
  003eb	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  003ee	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  003f2	7c 10		 jl	 SHORT $LN4@unzReadCur
  003f4	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003f7	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  003fb	74 07		 je	 SHORT $LN4@unzReadCur

; 1857 :               err = Z_DATA_ERROR;

  003fd	c7 45 f0 fd ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -3 ; fffffffdH
$LN4@unzReadCur:

; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  00404	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00407	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0040a	33 c9		 xor	 ecx, ecx
  0040c	89 45 c8	 mov	 DWORD PTR _uTotalOutAfter$80295[ebp], eax
  0040f	89 4d cc	 mov	 DWORD PTR _uTotalOutAfter$80295[ebp+4], ecx

; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  00412	8b 55 c8	 mov	 edx, DWORD PTR _uTotalOutAfter$80295[ebp]
  00415	2b 55 c0	 sub	 edx, DWORD PTR _uTotalOutBefore$80294[ebp]
  00418	8b 45 cc	 mov	 eax, DWORD PTR _uTotalOutAfter$80295[ebp+4]
  0041b	1b 45 c4	 sbb	 eax, DWORD PTR _uTotalOutBefore$80294[ebp+4]
  0041e	89 55 d8	 mov	 DWORD PTR _uOutThis$80297[ebp], edx
  00421	89 45 dc	 mov	 DWORD PTR _uOutThis$80297[ebp+4], eax

; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;

  00424	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00427	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0042a	03 55 d8	 add	 edx, DWORD PTR _uOutThis$80297[ebp]
  0042d	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00430	13 45 dc	 adc	 eax, DWORD PTR _uOutThis$80297[ebp+4]
  00433	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00436	89 51 68	 mov	 DWORD PTR [ecx+104], edx
  00439	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =
; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));

  0043c	8b 55 d8	 mov	 edx, DWORD PTR _uOutThis$80297[ebp]
  0043f	52		 push	 edx
  00440	8b 45 e0	 mov	 eax, DWORD PTR _bufBefore$80296[ebp]
  00443	50		 push	 eax
  00444	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00447	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0044a	52		 push	 edx
  0044b	e8 00 00 00 00	 call	 _crc32@12
  00450	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00453	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=
; 1869 :                 uOutThis;

  00456	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00459	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0045f	2b 45 d8	 sub	 eax, DWORD PTR _uOutThis$80297[ebp]
  00462	8b 8a 84 00 00
	00		 mov	 ecx, DWORD PTR [edx+132]
  00468	1b 4d dc	 sbb	 ecx, DWORD PTR _uOutThis$80297[ebp+4]
  0046b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0046e	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax
  00474	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  0047a	8b 45 c8	 mov	 eax, DWORD PTR _uTotalOutAfter$80295[ebp]
  0047d	2b 45 c0	 sub	 eax, DWORD PTR _uTotalOutBefore$80294[ebp]
  00480	8b 4d cc	 mov	 ecx, DWORD PTR _uTotalOutAfter$80295[ebp+4]
  00483	1b 4d c4	 sbb	 ecx, DWORD PTR _uTotalOutBefore$80294[ebp+4]
  00486	03 45 f4	 add	 eax, DWORD PTR _iRead$[ebp]
  00489	89 45 f4	 mov	 DWORD PTR _iRead$[ebp], eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  0048c	83 7d f0 01	 cmp	 DWORD PTR _err$[ebp], 1
  00490	75 0c		 jne	 SHORT $LN3@unzReadCur

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;

  00492	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  00495	f7 d8		 neg	 eax
  00497	1b c0		 sbb	 eax, eax
  00499	23 45 f4	 and	 eax, DWORD PTR _iRead$[ebp]
  0049c	eb 1b		 jmp	 SHORT $LN29@unzReadCur
$LN3@unzReadCur:

; 1875 :             if (err!=Z_OK)

  0049e	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  004a2	74 02		 je	 SHORT $LN7@unzReadCur

; 1876 :                 break;

  004a4	eb 05		 jmp	 SHORT $LN21@unzReadCur
$LN7@unzReadCur:

; 1877 :         }
; 1878 :     }

  004a6	e9 6c fc ff ff	 jmp	 $LN22@unzReadCur
$LN21@unzReadCur:

; 1879 : 
; 1880 :     if (err==Z_OK)

  004ab	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  004af	75 05		 jne	 SHORT $LN1@unzReadCur

; 1881 :         return iRead;

  004b1	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  004b4	eb 03		 jmp	 SHORT $LN29@unzReadCur
$LN1@unzReadCur:

; 1882 :     return err;

  004b6	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
$LN29@unzReadCur:

; 1883 : }

  004b9	5f		 pop	 edi
  004ba	5e		 pop	 esi
  004bb	8b e5		 mov	 esp, ebp
  004bd	5d		 pop	 ebp
  004be	c2 0c 00	 ret	 12			; 0000000cH
_unzReadCurrentFile@12 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToFilePos64@8
; Function compile flags: /Odtp
;	COMDAT _unzGoToFilePos64@8
_TEXT	SEGMENT
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos64@8 PROC				; COMDAT

; 1339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	74 06		 je	 SHORT $LN1@unzGoToFil
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  00010	75 07		 jne	 SHORT $LN2@unzGoToFil
$LN1@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00017	eb 6d		 jmp	 SHORT $LN3@unzGoToFil
$LN2@unzGoToFil:

; 1345 :     s=(unz64_s*)file;

  00019	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001c	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0002a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0002d	89 51 5c	 mov	 DWORD PTR [ecx+92], edx

; 1349 :     s->num_file           = file_pos->num_of_file;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _file_pos$[ebp]
  00036	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00039	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0003c	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0003f	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);

  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00051	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00057	52		 push	 edx
  00058	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005b	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0006a	83 c4 24	 add	 esp, 36			; 00000024H
  0006d	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  00070	33 c0		 xor	 eax, eax
  00072	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00076	0f 94 c0	 sete	 al
  00079	99		 cdq
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0007d	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00080	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1357 :     return err;

  00083	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN3@unzGoToFil:

; 1358 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
_unzGoToFilePos64@8 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToNextFile@4
; Function compile flags: /Odtp
;	COMDAT _unzGoToNextFile@4
_TEXT	SEGMENT
tv164 = -28						; size = 4
tv161 = -24						; size = 8
tv149 = -16						; size = 4
tv141 = -12						; size = 4
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToNextFile@4 PROC					; COMDAT

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN4@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	e9 0b 01 00 00	 jmp	 $LN5@unzGoToNex
$LN4@unzGoToNex:

; 1206 :     s=(unz64_s*)file;

  00016	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1207 :     if (!s->current_file_ok)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001f	89 4d f4	 mov	 DWORD PTR tv141[ebp], ecx
  00022	8b 55 f4	 mov	 edx, DWORD PTR tv141[ebp]
  00025	8b 45 f4	 mov	 eax, DWORD PTR tv141[ebp]
  00028	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  0002b	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  0002e	75 0a		 jne	 SHORT $LN3@unzGoToNex

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  00030	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00035	e9 e7 00 00 00	 jmp	 $LN5@unzGoToNex
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0003d	89 55 f0	 mov	 DWORD PTR tv149[ebp], edx
  00040	8b 45 f0	 mov	 eax, DWORD PTR tv149[ebp]
  00043	81 78 38 ff ff
	00 00		 cmp	 DWORD PTR [eax+56], 65535 ; 0000ffffH
  0004a	75 09		 jne	 SHORT $LN7@unzGoToNex
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR tv149[ebp]
  0004f	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  00053	74 3b		 je	 SHORT $LN2@unzGoToNex
$LN7@unzGoToNex:

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  00055	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00058	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0005b	83 c0 01	 add	 eax, 1
  0005e	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00061	83 d1 00	 adc	 ecx, 0
  00064	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00067	89 45 e8	 mov	 DWORD PTR tv161[ebp], eax
  0006a	89 4d ec	 mov	 DWORD PTR tv161[ebp+4], ecx
  0006d	89 55 e4	 mov	 DWORD PTR tv164[ebp], edx
  00070	8b 45 e4	 mov	 eax, DWORD PTR tv164[ebp]
  00073	8b 4d e8	 mov	 ecx, DWORD PTR tv161[ebp]
  00076	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  00079	75 15		 jne	 SHORT $LN2@unzGoToNex
  0007b	8b 55 e4	 mov	 edx, DWORD PTR tv164[ebp]
  0007e	8b 45 ec	 mov	 eax, DWORD PTR tv161[ebp+4]
  00081	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  00084	75 0a		 jne	 SHORT $LN2@unzGoToNex

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;

  00086	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0008b	e9 91 00 00 00	 jmp	 $LN5@unzGoToNex
$LN2@unzGoToNex:

; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;

  00090	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00093	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00099	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0009c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  000a2	8d 54 0a 2e	 lea	 edx, DWORD PTR [edx+ecx+46]
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000a9	03 90 b0 00 00
	00		 add	 edx, DWORD PTR [eax+176]
  000af	33 c9		 xor	 ecx, ecx
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b4	03 50 58	 add	 edx, DWORD PTR [eax+88]
  000b7	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  000ba	13 c1		 adc	 eax, ecx
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000bf	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  000c2	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1215 :     s->num_file++;

  000c5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000c8	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000cb	83 c0 01	 add	 eax, 1
  000ce	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  000d1	83 d1 00	 adc	 ecx, 0
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000d7	89 42 50	 mov	 DWORD PTR [edx+80], eax
  000da	89 4a 54	 mov	 DWORD PTR [edx+84], ecx

; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);

  000dd	6a 00		 push	 0
  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000ec	05 d8 00 00 00	 add	 eax, 216		; 000000d8H
  000f1	50		 push	 eax
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000f5	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000fb	51		 push	 ecx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  00105	83 c4 24	 add	 esp, 36			; 00000024H
  00108	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1219 :     s->current_file_ok = (err == UNZ_OK);

  0010b	33 c0		 xor	 eax, eax
  0010d	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00111	0f 94 c0	 sete	 al
  00114	99		 cdq
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00118	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0011b	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1220 :     return err;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN5@unzGoToNex:

; 1221 : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
_unzGoToNextFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToFirstFile@4
; Function compile flags: /Odtp
;	COMDAT _unzGoToFirstFile@4
_TEXT	SEGMENT
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToFirstFile@4 PROC				; COMDAT

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1180 :     int err=UNZ_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 07		 jne	 SHORT $LN1@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	eb 6e		 jmp	 SHORT $LN2@unzGoToFir
$LN1@unzGoToFir:

; 1184 :     s=(unz64_s*)file;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001d	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00026	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00029	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0002c	8b 52 7c	 mov	 edx, DWORD PTR [edx+124]
  0002f	89 51 5c	 mov	 DWORD PTR [ecx+92], edx

; 1186 :     s->num_file=0;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00035	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0003c	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);

  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00052	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  00058	51		 push	 ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005c	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0006c	83 c4 24	 add	 esp, 36			; 00000024H
  0006f	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1190 :     s->current_file_ok = (err == UNZ_OK);

  00072	33 c0		 xor	 eax, eax
  00074	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00078	0f 94 c0	 sete	 al
  0007b	99		 cdq
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0007f	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00082	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 1191 :     return err;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN2@unzGoToFir:

; 1192 : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_unzGoToFirstFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGetCurrentFileInfo@32
; Function compile flags: /Odtp
;	COMDAT _unzGetCurrentFileInfo@32
_TEXT	SEGMENT
_err$ = -92						; size = 4
_file_info64$ = -88					; size = 88
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo@32 PROC				; COMDAT

; 1141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,
; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);

  00006	8b 45 24	 mov	 eax, DWORD PTR _commentBufferSize$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 20	 mov	 ecx, DWORD PTR _szComment$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 1c	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  00011	52		 push	 edx
  00012	8b 45 18	 mov	 eax, DWORD PTR _extraField$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 14	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 10	 mov	 edx, DWORD PTR _szFileName$[ebp]
  0001d	52		 push	 edx
  0001e	6a 00		 push	 0
  00020	8d 45 a8	 lea	 eax, DWORD PTR _file_info64$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0002d	83 c4 24	 add	 esp, 36			; 00000024H
  00030	89 45 a4	 mov	 DWORD PTR _err$[ebp], eax

; 1148 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  00033	83 7d a4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00037	0f 85 b0 00 00
	00		 jne	 $LN1@unzGetCurr@2
  0003d	83 7d 0c 00	 cmp	 DWORD PTR _pfile_info$[ebp], 0
  00041	0f 84 a6 00 00
	00		 je	 $LN1@unzGetCurr@2

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;

  00047	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  0004a	8b 45 a8	 mov	 eax, DWORD PTR _file_info64$[ebp]
  0004d	89 02		 mov	 DWORD PTR [edx], eax

; 1151 :         pfile_info->version_needed = file_info64.version_needed;

  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  00052	8b 55 ac	 mov	 edx, DWORD PTR _file_info64$[ebp+4]
  00055	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1152 :         pfile_info->flag = file_info64.flag;

  00058	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  0005b	8b 4d b0	 mov	 ecx, DWORD PTR _file_info64$[ebp+8]
  0005e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1153 :         pfile_info->compression_method = file_info64.compression_method;

  00061	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  00064	8b 45 b4	 mov	 eax, DWORD PTR _file_info64$[ebp+12]
  00067	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1154 :         pfile_info->dosDate = file_info64.dosDate;

  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  0006d	8b 55 b8	 mov	 edx, DWORD PTR _file_info64$[ebp+16]
  00070	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1155 :         pfile_info->crc = file_info64.crc;

  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00076	8b 4d bc	 mov	 ecx, DWORD PTR _file_info64$[ebp+20]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;

  0007c	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  0007f	8b 45 d0	 mov	 eax, DWORD PTR _file_info64$[ebp+40]
  00082	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;

  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  00088	8b 55 d4	 mov	 edx, DWORD PTR _file_info64$[ebp+44]
  0008b	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00091	8b 4d d8	 mov	 ecx, DWORD PTR _file_info64$[ebp+48]
  00094	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;

  00097	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  0009a	8b 45 dc	 mov	 eax, DWORD PTR _file_info64$[ebp+52]
  0009d	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;

  000a0	8b 4d 0c	 mov	 ecx, DWORD PTR _pfile_info$[ebp]
  000a3	8b 55 e0	 mov	 edx, DWORD PTR _file_info64$[ebp+56]
  000a6	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 1163 :         pfile_info->external_fa = file_info64.external_fa;

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  000ac	8b 4d e4	 mov	 ecx, DWORD PTR _file_info64$[ebp+60]
  000af	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,
; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;

  000b2	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  000b5	83 c2 38	 add	 edx, 56			; 00000038H
  000b8	8b 45 e8	 mov	 eax, DWORD PTR _file_info64$[ebp+64]
  000bb	89 02		 mov	 DWORD PTR [edx], eax
  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _file_info64$[ebp+68]
  000c0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000c3	8b 45 f0	 mov	 eax, DWORD PTR _file_info64$[ebp+72]
  000c6	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR _file_info64$[ebp+76]
  000cc	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  000cf	8b 45 f8	 mov	 eax, DWORD PTR _file_info64$[ebp+80]
  000d2	89 42 10	 mov	 DWORD PTR [edx+16], eax
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _file_info64$[ebp+84]
  000d8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000db	8b 55 c0	 mov	 edx, DWORD PTR _file_info64$[ebp+24]
  000de	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  000e1	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  000e4	8b 4d c8	 mov	 ecx, DWORD PTR _file_info64$[ebp+32]
  000e7	8b 55 0c	 mov	 edx, DWORD PTR _pfile_info$[ebp]
  000ea	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN1@unzGetCurr@2:

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  000ed	8b 45 a4	 mov	 eax, DWORD PTR _err$[ebp]

; 1173 : }

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo@32 ENDP
_TEXT	ENDS
PUBLIC	_unzGetCurrentFileInfo64@32
; Function compile flags: /Odtp
;	COMDAT _unzGetCurrentFileInfo64@32
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo64@32 PROC			; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,
; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);

  00003	8b 45 24	 mov	 eax, DWORD PTR _commentBufferSize$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 20	 mov	 ecx, DWORD PTR _szComment$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 1c	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 18	 mov	 eax, DWORD PTR _extraField$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 10	 mov	 edx, DWORD PTR _szFileName$[ebp]
  0001a	52		 push	 edx
  0001b	6a 00		 push	 0
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _unz64local_GetCurrentFileInfoInternal
  0002a	83 c4 24	 add	 esp, 36			; 00000024H

; 1134 : }

  0002d	5d		 pop	 ebp
  0002e	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo64@32 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzOpenInternal
_TEXT	SEGMENT
tv406 = -300						; size = 8
_uS$79730 = -292					; size = 4
_uL64$79731 = -288					; size = 8
_central_pos$ = -280					; size = 8
_us$ = -272						; size = 240
_number_disk_with_CD$ = -28				; size = 4
_number_entry_CD$ = -24					; size = 8
_err$ = -16						; size = 4
_uL$ = -12						; size = 4
_s$ = -8						; size = 4
_number_disk$ = -4					; size = 4
_path$ = 8						; size = 4
_pzlib_filefunc64_32_def$ = 12				; size = 4
_is64bitOpenFunction$ = 16				; size = 4
_unzOpenInternal PROC					; COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;

  0000b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 602  : 
; 603  :     if (unz_copyright[0]!=' ')

  00012	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _unz_copyright
  00019	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001c	74 07		 je	 SHORT $LN34@unzOpenInt

; 604  :         return NULL;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 97 05 00 00	 jmp	 $LN35@unzOpenInt
$LN34@unzOpenInt:

; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;

  00025	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+40], 0

; 607  :     us.z_filefunc.ztell32_file = NULL;

  0002f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+36], 0

; 608  :     if (pzlib_filefunc64_32_def==NULL)

  00039	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc64_32_def$[ebp], 0
  0003d	75 11		 jne	 SHORT $LN33@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  0003f	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  0004b	83 c4 04	 add	 esp, 4

; 610  :     else

  0004e	eb 10		 jmp	 SHORT $LN32@unzOpenInt
$LN33@unzOpenInt:

; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00050	8b 75 0c	 mov	 esi, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00053	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00058	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR _us$[ebp]
  0005e	f3 a5		 rep movsd
$LN32@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  00060	8b 55 10	 mov	 edx, DWORD PTR _is64bitOpenFunction$[ebp]
  00063	89 95 1c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+44], edx

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,
; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);

  00069	6a 05		 push	 5
  0006b	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0006e	50		 push	 eax
  0006f	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _call_zopen64
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	89 85 20 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+48], eax

; 620  :     if (us.filestream==NULL)

  00084	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _us$[ebp+48], 0
  0008b	75 07		 jne	 SHORT $LN31@unzOpenInt

; 621  :         return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	e9 28 05 00 00	 jmp	 $LN35@unzOpenInt
$LN31@unzOpenInt:

; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  00094	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  0009a	52		 push	 edx
  0009b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir64
  000a7	83 c4 08	 add	 esp, 8
  000aa	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp], eax
  000b0	89 95 ec fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 624  :     if (central_pos)

  000b6	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp]
  000bc	0b 8d ec fe ff
	ff		 or	 ecx, DWORD PTR _central_pos$[ebp+4]
  000c2	0f 84 f4 01 00
	00		 je	 $LN30@unzOpenInt

; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;

  000c8	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 1

; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000cf	6a 00		 push	 0
  000d1	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp+4]
  000d7	52		 push	 edx
  000d8	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  000de	50		 push	 eax
  000df	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  000e5	51		 push	 ecx
  000e6	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 _call_zseek64
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
  000f5	85 c0		 test	 eax, eax
  000f7	74 07		 je	 SHORT $LN29@unzOpenInt

; 633  :         err=UNZ_ERRNO;

  000f9	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN29@unzOpenInt:

; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00100	8d 45 f4	 lea	 eax, DWORD PTR _uL$[ebp]
  00103	50		 push	 eax
  00104	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  0010a	51		 push	 ecx
  0010b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _unz64local_getLong
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	85 c0		 test	 eax, eax
  0011c	74 07		 je	 SHORT $LN28@unzOpenInt

; 637  :             err=UNZ_ERRNO;

  0011e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN28@unzOpenInt:

; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  00125	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _uL64$79731[ebp]
  0012b	50		 push	 eax
  0012c	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00132	51		 push	 ecx
  00133	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 _unz64local_getLong64
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	85 c0		 test	 eax, eax
  00144	74 07		 je	 SHORT $LN27@unzOpenInt

; 641  :             err=UNZ_ERRNO;

  00146	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN27@unzOpenInt:

; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  0014d	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _uS$79730[ebp]
  00153	50		 push	 eax
  00154	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  0015a	51		 push	 ecx
  0015b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 _unz64local_getShort
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	85 c0		 test	 eax, eax
  0016c	74 07		 je	 SHORT $LN26@unzOpenInt

; 645  :             err=UNZ_ERRNO;

  0016e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@unzOpenInt:

; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00175	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _uS$79730[ebp]
  0017b	50		 push	 eax
  0017c	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00182	51		 push	 ecx
  00183	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00189	52		 push	 edx
  0018a	e8 00 00 00 00	 call	 _unz64local_getShort
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00192	85 c0		 test	 eax, eax
  00194	74 07		 je	 SHORT $LN25@unzOpenInt

; 649  :             err=UNZ_ERRNO;

  00196	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN25@unzOpenInt:

; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  0019d	8d 45 fc	 lea	 eax, DWORD PTR _number_disk$[ebp]
  001a0	50		 push	 eax
  001a1	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  001a7	51		 push	 ecx
  001a8	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  001ae	52		 push	 edx
  001af	e8 00 00 00 00	 call	 _unz64local_getLong
  001b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b7	85 c0		 test	 eax, eax
  001b9	74 07		 je	 SHORT $LN24@unzOpenInt

; 653  :             err=UNZ_ERRNO;

  001bb	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@unzOpenInt:

; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  001c2	8d 45 e4	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  001c5	50		 push	 eax
  001c6	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  001cc	51		 push	 ecx
  001cd	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  001d3	52		 push	 edx
  001d4	e8 00 00 00 00	 call	 _unz64local_getLong
  001d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001dc	85 c0		 test	 eax, eax
  001de	74 07		 je	 SHORT $LN23@unzOpenInt

; 657  :             err=UNZ_ERRNO;

  001e0	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN23@unzOpenInt:

; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  001e7	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+56]
  001ed	50		 push	 eax
  001ee	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  001f4	51		 push	 ecx
  001f5	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  001fb	52		 push	 edx
  001fc	e8 00 00 00 00	 call	 _unz64local_getLong64
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
  00204	85 c0		 test	 eax, eax
  00206	74 07		 je	 SHORT $LN22@unzOpenInt

; 661  :             err=UNZ_ERRNO;

  00208	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN22@unzOpenInt:

; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  0020f	8d 45 e8	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  00212	50		 push	 eax
  00213	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00219	51		 push	 ecx
  0021a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 _unz64local_getLong64
  00226	83 c4 0c	 add	 esp, 12			; 0000000cH
  00229	85 c0		 test	 eax, eax
  0022b	74 07		 je	 SHORT $LN21@unzOpenInt

; 665  :             err=UNZ_ERRNO;

  0022d	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN21@unzOpenInt:

; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||
; 669  :             (number_disk!=0))

  00234	8b 45 e8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  00237	3b 85 28 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+56]
  0023d	75 17		 jne	 SHORT $LN19@unzOpenInt
  0023f	8b 4d ec	 mov	 ecx, DWORD PTR _number_entry_CD$[ebp+4]
  00242	3b 8d 2c ff ff
	ff		 cmp	 ecx, DWORD PTR _us$[ebp+60]
  00248	75 0c		 jne	 SHORT $LN19@unzOpenInt
  0024a	83 7d e4 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0024e	75 06		 jne	 SHORT $LN19@unzOpenInt
  00250	83 7d fc 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00254	74 07		 je	 SHORT $LN20@unzOpenInt
$LN19@unzOpenInt:

; 670  :             err=UNZ_BADZIPFILE;

  00256	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN20@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  0025d	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp+112]
  00263	52		 push	 edx
  00264	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  0026a	50		 push	 eax
  0026b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 _unz64local_getLong64
  00277	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027a	85 c0		 test	 eax, eax
  0027c	74 07		 je	 SHORT $LN18@unzOpenInt

; 674  :             err=UNZ_ERRNO;

  0027e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN18@unzOpenInt:

; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  00285	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp+120]
  0028b	52		 push	 edx
  0028c	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00292	50		 push	 eax
  00293	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00299	51		 push	 ecx
  0029a	e8 00 00 00 00	 call	 _unz64local_getLong64
  0029f	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a2	85 c0		 test	 eax, eax
  002a4	74 07		 je	 SHORT $LN17@unzOpenInt

; 679  :             err=UNZ_ERRNO;

  002a6	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN17@unzOpenInt:

; 680  : 
; 681  :         us.gi.size_comment = 0;

  002ad	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _us$[ebp+64], 0

; 682  :     }
; 683  :     else

  002b7	e9 01 02 00 00	 jmp	 $LN16@unzOpenInt
$LN30@unzOpenInt:

; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  002bc	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  002c2	52		 push	 edx
  002c3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 _unz64local_SearchCentralDir
  002cf	83 c4 08	 add	 esp, 8
  002d2	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp], eax
  002d8	89 95 ec fe ff
	ff		 mov	 DWORD PTR _central_pos$[ebp+4], edx

; 686  :         if (central_pos==0)

  002de	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp]
  002e4	0b 8d ec fe ff
	ff		 or	 ecx, DWORD PTR _central_pos$[ebp+4]
  002ea	75 07		 jne	 SHORT $LN15@unzOpenInt

; 687  :             err=UNZ_ERRNO;

  002ec	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN15@unzOpenInt:

; 688  : 
; 689  :         us.isZip64 = 0;

  002f3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+232], 0

; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002fa	6a 00		 push	 0
  002fc	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp+4]
  00302	52		 push	 edx
  00303	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  00309	50		 push	 eax
  0030a	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00310	51		 push	 ecx
  00311	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00317	52		 push	 edx
  00318	e8 00 00 00 00	 call	 _call_zseek64
  0031d	83 c4 14	 add	 esp, 20			; 00000014H
  00320	85 c0		 test	 eax, eax
  00322	74 07		 je	 SHORT $LN14@unzOpenInt

; 693  :             err=UNZ_ERRNO;

  00324	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unzOpenInt:

; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0032b	8d 45 f4	 lea	 eax, DWORD PTR _uL$[ebp]
  0032e	50		 push	 eax
  0032f	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00335	51		 push	 ecx
  00336	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  0033c	52		 push	 edx
  0033d	e8 00 00 00 00	 call	 _unz64local_getLong
  00342	83 c4 0c	 add	 esp, 12			; 0000000cH
  00345	85 c0		 test	 eax, eax
  00347	74 07		 je	 SHORT $LN13@unzOpenInt

; 697  :             err=UNZ_ERRNO;

  00349	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@unzOpenInt:

; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00350	8d 45 fc	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00353	50		 push	 eax
  00354	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  0035a	51		 push	 ecx
  0035b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00361	52		 push	 edx
  00362	e8 00 00 00 00	 call	 _unz64local_getShort
  00367	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036a	85 c0		 test	 eax, eax
  0036c	74 07		 je	 SHORT $LN12@unzOpenInt

; 701  :             err=UNZ_ERRNO;

  0036e	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@unzOpenInt:

; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00375	8d 45 e4	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00378	50		 push	 eax
  00379	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  0037f	51		 push	 ecx
  00380	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00386	52		 push	 edx
  00387	e8 00 00 00 00	 call	 _unz64local_getShort
  0038c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038f	85 c0		 test	 eax, eax
  00391	74 07		 je	 SHORT $LN11@unzOpenInt

; 705  :             err=UNZ_ERRNO;

  00393	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN11@unzOpenInt:

; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0039a	8d 45 f4	 lea	 eax, DWORD PTR _uL$[ebp]
  0039d	50		 push	 eax
  0039e	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  003a4	51		 push	 ecx
  003a5	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  003ab	52		 push	 edx
  003ac	e8 00 00 00 00	 call	 _unz64local_getShort
  003b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b4	85 c0		 test	 eax, eax
  003b6	74 07		 je	 SHORT $LN10@unzOpenInt

; 709  :             err=UNZ_ERRNO;

  003b8	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@unzOpenInt:

; 710  :         us.gi.number_entry = uL;

  003bf	8b 45 f4	 mov	 eax, DWORD PTR _uL$[ebp]
  003c2	33 c9		 xor	 ecx, ecx
  003c4	89 85 28 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+56], eax
  003ca	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+60], ecx

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  003d0	8d 55 f4	 lea	 edx, DWORD PTR _uL$[ebp]
  003d3	52		 push	 edx
  003d4	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  003da	50		 push	 eax
  003db	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  003e1	51		 push	 ecx
  003e2	e8 00 00 00 00	 call	 _unz64local_getShort
  003e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ea	85 c0		 test	 eax, eax
  003ec	74 07		 je	 SHORT $LN9@unzOpenInt

; 714  :             err=UNZ_ERRNO;

  003ee	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@unzOpenInt:

; 715  :         number_entry_CD = uL;

  003f5	8b 55 f4	 mov	 edx, DWORD PTR _uL$[ebp]
  003f8	33 c0		 xor	 eax, eax
  003fa	89 55 e8	 mov	 DWORD PTR _number_entry_CD$[ebp], edx
  003fd	89 45 ec	 mov	 DWORD PTR _number_entry_CD$[ebp+4], eax

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||
; 719  :             (number_disk!=0))

  00400	8b 4d e8	 mov	 ecx, DWORD PTR _number_entry_CD$[ebp]
  00403	3b 8d 28 ff ff
	ff		 cmp	 ecx, DWORD PTR _us$[ebp+56]
  00409	75 17		 jne	 SHORT $LN7@unzOpenInt
  0040b	8b 55 ec	 mov	 edx, DWORD PTR _number_entry_CD$[ebp+4]
  0040e	3b 95 2c ff ff
	ff		 cmp	 edx, DWORD PTR _us$[ebp+60]
  00414	75 0c		 jne	 SHORT $LN7@unzOpenInt
  00416	83 7d e4 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0041a	75 06		 jne	 SHORT $LN7@unzOpenInt
  0041c	83 7d fc 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00420	74 07		 je	 SHORT $LN8@unzOpenInt
$LN7@unzOpenInt:

; 720  :             err=UNZ_BADZIPFILE;

  00422	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN8@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00429	8d 45 f4	 lea	 eax, DWORD PTR _uL$[ebp]
  0042c	50		 push	 eax
  0042d	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+48]
  00433	51		 push	 ecx
  00434	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  0043a	52		 push	 edx
  0043b	e8 00 00 00 00	 call	 _unz64local_getLong
  00440	83 c4 0c	 add	 esp, 12			; 0000000cH
  00443	85 c0		 test	 eax, eax
  00445	74 07		 je	 SHORT $LN6@unzOpenInt

; 724  :             err=UNZ_ERRNO;

  00447	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN6@unzOpenInt:

; 725  :         us.size_central_dir = uL;

  0044e	8b 45 f4	 mov	 eax, DWORD PTR _uL$[ebp]
  00451	33 c9		 xor	 ecx, ecx
  00453	89 85 60 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+112], eax
  00459	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+116], ecx

; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0045f	8d 55 f4	 lea	 edx, DWORD PTR _uL$[ebp]
  00462	52		 push	 edx
  00463	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+48]
  00469	50		 push	 eax
  0046a	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00470	51		 push	 ecx
  00471	e8 00 00 00 00	 call	 _unz64local_getLong
  00476	83 c4 0c	 add	 esp, 12			; 0000000cH
  00479	85 c0		 test	 eax, eax
  0047b	74 07		 je	 SHORT $LN5@unzOpenInt

; 730  :             err=UNZ_ERRNO;

  0047d	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@unzOpenInt:

; 731  :         us.offset_central_dir = uL;

  00484	8b 55 f4	 mov	 edx, DWORD PTR _uL$[ebp]
  00487	33 c0		 xor	 eax, eax
  00489	89 95 68 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+120], edx
  0048f	89 85 6c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+124], eax

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  00495	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp+64]
  0049b	51		 push	 ecx
  0049c	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  004a2	52		 push	 edx
  004a3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 _unz64local_getShort
  004af	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b2	85 c0		 test	 eax, eax
  004b4	74 07		 je	 SHORT $LN16@unzOpenInt

; 735  :             err=UNZ_ERRNO;

  004b6	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN16@unzOpenInt:

; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
; 739  :         (err==UNZ_OK))

  004bd	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+120]
  004c3	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _us$[ebp+112]
  004c9	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+124]
  004cf	13 95 64 ff ff
	ff		 adc	 edx, DWORD PTR _us$[ebp+116]
  004d5	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv406[ebp], ecx
  004db	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv406[ebp+4], edx
  004e1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  004e7	3b 85 d8 fe ff
	ff		 cmp	 eax, DWORD PTR tv406[ebp+4]
  004ed	77 1d		 ja	 SHORT $LN3@unzOpenInt
  004ef	72 0e		 jb	 SHORT $LN37@unzOpenInt
  004f1	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp]
  004f7	3b 8d d4 fe ff
	ff		 cmp	 ecx, DWORD PTR tv406[ebp]
  004fd	73 0d		 jae	 SHORT $LN3@unzOpenInt
$LN37@unzOpenInt:
  004ff	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00503	75 07		 jne	 SHORT $LN3@unzOpenInt

; 740  :         err=UNZ_BADZIPFILE;

  00505	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN3@unzOpenInt:

; 741  : 
; 742  :     if (err!=UNZ_OK)

  0050c	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00510	74 1e		 je	 SHORT $LN2@unzOpenInt

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  00512	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+48]
  00518	52		 push	 edx
  00519	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+28]
  0051f	50		 push	 eax
  00520	ff 95 04 ff ff
	ff		 call	 DWORD PTR _us$[ebp+20]
  00526	83 c4 08	 add	 esp, 8

; 745  :         return NULL;

  00529	33 c0		 xor	 eax, eax
  0052b	e9 8c 00 00 00	 jmp	 $LN35@unzOpenInt
$LN2@unzOpenInt:

; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -
; 749  :                             (us.offset_central_dir+us.size_central_dir);

  00530	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+120]
  00536	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _us$[ebp+112]
  0053c	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+124]
  00542	13 95 64 ff ff
	ff		 adc	 edx, DWORD PTR _us$[ebp+116]
  00548	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  0054e	2b c1		 sub	 eax, ecx
  00550	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _central_pos$[ebp+4]
  00556	1b ca		 sbb	 ecx, edx
  00558	89 85 38 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+72], eax
  0055e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+76], ecx

; 750  :     us.central_pos = central_pos;

  00564	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp]
  0056a	89 95 58 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+104], edx
  00570	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp+4]
  00576	89 85 5c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+108], eax

; 751  :     us.pfile_in_zip_read = NULL;

  0057c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+224], 0

; 752  :     us.encrypted = 0;

  00583	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+228], 0

; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  0058a	68 f0 00 00 00	 push	 240			; 000000f0H
  0058f	e8 00 00 00 00	 call	 _malloc
  00594	83 c4 04	 add	 esp, 4
  00597	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 756  :     if( s != NULL)

  0059a	83 7d f8 00	 cmp	 DWORD PTR _s$[ebp], 0
  0059e	74 19		 je	 SHORT $LN1@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  005a0	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  005a5	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR _us$[ebp]
  005ab	8b 7d f8	 mov	 edi, DWORD PTR _s$[ebp]
  005ae	f3 a5		 rep movsd

; 759  :         unzGoToFirstFile((unzFile)s);

  005b0	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  005b3	51		 push	 ecx
  005b4	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
$LN1@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  005b9	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
$LN35@unzOpenInt:

; 762  : }

  005bc	5f		 pop	 edi
  005bd	5e		 pop	 esi
  005be	8b e5		 mov	 esp, ebp
  005c0	5d		 pop	 ebp
  005c1	c3		 ret	 0
_unzOpenInternal ENDP
PUBLIC	_unzGoToFilePos@8
; Function compile flags: /Odtp
;	COMDAT _unzGoToFilePos@8
_TEXT	SEGMENT
_file_pos64$ = -16					; size = 16
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos@8 PROC					; COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN1@unzGoToFil@2

; 1366 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	eb 28		 jmp	 SHORT $LN2@unzGoToFil@2
$LN1@unzGoToFil@2:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	33 d2		 xor	 edx, edx
  0001a	89 4d f0	 mov	 DWORD PTR _file_pos64$[ebp], ecx
  0001d	89 55 f4	 mov	 DWORD PTR _file_pos64$[ebp+4], edx

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _file_pos$[ebp]
  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00026	33 d2		 xor	 edx, edx
  00028	89 4d f8	 mov	 DWORD PTR _file_pos64$[ebp+8], ecx
  0002b	89 55 fc	 mov	 DWORD PTR _file_pos64$[ebp+12], edx

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  0002e	8d 45 f0	 lea	 eax, DWORD PTR _file_pos64$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _unzGoToFilePos64@8
$LN2@unzGoToFil@2:

; 1371 : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
_unzGoToFilePos@8 ENDP
_TEXT	ENDS
PUBLIC	_unzLocateFile@12
; Function compile flags: /Odtp
;	COMDAT _unzLocateFile@12
_TEXT	SEGMENT
tv138 = -396						; size = 4
_szCurrentFileName$80056 = -392				; size = 257
_err$ = -124						; size = 4
_num_fileSaved$ = -120					; size = 8
_cur_file_info_internalSaved$ = -112			; size = 8
_s$ = -100						; size = 4
_pos_in_central_dirSaved$ = -96				; size = 8
_cur_file_infoSaved$ = -88				; size = 88
_file$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzLocateFile@12 PROC					; COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  0000b	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000f	75 0a		 jne	 SHORT $LN7@unzLocateF

; 1247 :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00016	e9 3d 01 00 00	 jmp	 $LN8@unzLocateF
$LN7@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _szFileName$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _strlen
  00024	83 c4 04	 add	 esp, 4
  00027	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0002c	72 0a		 jb	 SHORT $LN6@unzLocateF

; 1250 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 20 01 00 00	 jmp	 $LN8@unzLocateF
$LN6@unzLocateF:

; 1251 : 
; 1252 :     s=(unz64_s*)file;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0003b	89 4d 9c	 mov	 DWORD PTR _s$[ebp], ecx

; 1253 :     if (!s->current_file_ok)

  0003e	8b 55 9c	 mov	 edx, DWORD PTR _s$[ebp]
  00041	89 95 74 fe ff
	ff		 mov	 DWORD PTR tv138[ebp], edx
  00047	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  0004d	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR tv138[ebp]
  00053	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  00056	0b 51 64	 or	 edx, DWORD PTR [ecx+100]
  00059	75 0a		 jne	 SHORT $LN5@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  0005b	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00060	e9 f3 00 00 00	 jmp	 $LN8@unzLocateF
$LN5@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;

  00065	8b 45 9c	 mov	 eax, DWORD PTR _s$[ebp]
  00068	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0006b	89 4d 88	 mov	 DWORD PTR _num_fileSaved$[ebp], ecx
  0006e	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  00071	89 55 8c	 mov	 DWORD PTR _num_fileSaved$[ebp+4], edx

; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;

  00074	8b 45 9c	 mov	 eax, DWORD PTR _s$[ebp]
  00077	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0007a	89 4d a0	 mov	 DWORD PTR _pos_in_central_dirSaved$[ebp], ecx
  0007d	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  00080	89 55 a4	 mov	 DWORD PTR _pos_in_central_dirSaved$[ebp+4], edx

; 1259 :     cur_file_infoSaved = s->cur_file_info;

  00083	8b 75 9c	 mov	 esi, DWORD PTR _s$[ebp]
  00086	81 c6 80 00 00
	00		 add	 esi, 128		; 00000080H
  0008c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00091	8d 7d a8	 lea	 edi, DWORD PTR _cur_file_infoSaved$[ebp]
  00094	f3 a5		 rep movsd

; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  00096	8b 45 9c	 mov	 eax, DWORD PTR _s$[ebp]
  00099	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0009f	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  000a5	89 4d 90	 mov	 DWORD PTR _cur_file_info_internalSaved$[ebp], ecx
  000a8	89 55 94	 mov	 DWORD PTR _cur_file_info_internalSaved$[ebp+4], edx

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  000ab	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
  000b4	89 45 84	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unzLocateF:

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  000b7	83 7d 84 00	 cmp	 DWORD PTR _err$[ebp], 0
  000bb	75 52		 jne	 SHORT $LN3@unzLocateF

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,
; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);

  000bd	6a 00		 push	 0
  000bf	6a 00		 push	 0
  000c1	6a 00		 push	 0
  000c3	6a 00		 push	 0
  000c5	68 00 01 00 00	 push	 256			; 00000100H
  000ca	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _szCurrentFileName$80056[ebp]
  000d0	51		 push	 ecx
  000d1	6a 00		 push	 0
  000d3	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 _unzGetCurrentFileInfo64@32
  000dc	89 45 84	 mov	 DWORD PTR _err$[ebp], eax

; 1270 :         if (err == UNZ_OK)

  000df	83 7d 84 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e3	75 28		 jne	 SHORT $LN2@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _iCaseSensitivity$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _szFileName$[ebp]
  000ec	51		 push	 ecx
  000ed	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _szCurrentFileName$80056[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 _unzStringFileNameCompare@12
  000f9	85 c0		 test	 eax, eax
  000fb	75 04		 jne	 SHORT $LN1@unzLocateF

; 1274 :                 return UNZ_OK;

  000fd	33 c0		 xor	 eax, eax
  000ff	eb 57		 jmp	 SHORT $LN8@unzLocateF
$LN1@unzLocateF:

; 1275 :             err = unzGoToNextFile(file);

  00101	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _unzGoToNextFile@4
  0010a	89 45 84	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unzLocateF:

; 1276 :         }
; 1277 :     }

  0010d	eb a8		 jmp	 SHORT $LN4@unzLocateF
$LN3@unzLocateF:

; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;

  0010f	8b 4d 9c	 mov	 ecx, DWORD PTR _s$[ebp]
  00112	8b 55 88	 mov	 edx, DWORD PTR _num_fileSaved$[ebp]
  00115	89 51 50	 mov	 DWORD PTR [ecx+80], edx
  00118	8b 45 8c	 mov	 eax, DWORD PTR _num_fileSaved$[ebp+4]
  0011b	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;

  0011e	8b 4d 9c	 mov	 ecx, DWORD PTR _s$[ebp]
  00121	8b 55 a0	 mov	 edx, DWORD PTR _pos_in_central_dirSaved$[ebp]
  00124	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  00127	8b 45 a4	 mov	 eax, DWORD PTR _pos_in_central_dirSaved$[ebp+4]
  0012a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1284 :     s->cur_file_info = cur_file_infoSaved;

  0012d	8b 7d 9c	 mov	 edi, DWORD PTR _s$[ebp]
  00130	81 c7 80 00 00
	00		 add	 edi, 128		; 00000080H
  00136	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0013b	8d 75 a8	 lea	 esi, DWORD PTR _cur_file_infoSaved$[ebp]
  0013e	f3 a5		 rep movsd

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  00140	8b 4d 9c	 mov	 ecx, DWORD PTR _s$[ebp]
  00143	8b 55 90	 mov	 edx, DWORD PTR _cur_file_info_internalSaved$[ebp]
  00146	89 91 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], edx
  0014c	8b 45 94	 mov	 eax, DWORD PTR _cur_file_info_internalSaved$[ebp+4]
  0014f	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax

; 1286 :     return err;

  00155	8b 45 84	 mov	 eax, DWORD PTR _err$[ebp]
$LN8@unzLocateF:

; 1287 : }

  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 0c 00	 ret	 12			; 0000000cH
_unzLocateFile@12 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen64@4
; Function compile flags: /Odtp
;	COMDAT _unzOpen64@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen64@4 PROC					; COMDAT

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  :     return unzOpenInternal(path, NULL, 1);

  00003	6a 01		 push	 1
  00005	6a 00		 push	 0
  00007	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _unzOpenInternal
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
_unzOpen64@4 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen@4
; Function compile flags: /Odtp
;	COMDAT _unzOpen@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen@4 PROC						; COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 795  :     return unzOpenInternal(path, NULL, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _unzOpenInternal
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
_unzOpen@4 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen2_64@8
; Function compile flags: /Odtp
;	COMDAT _unzOpen2_64@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$79785 = -44		; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc_def$ = 12				; size = 4
_unzOpen2_64@8 PROC					; COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 781  :     if (pzlib_filefunc_def != NULL)

  00008	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  0000c	74 31		 je	 SHORT $LN2@unzOpen2_6

; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000e	8b 75 0c	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	8d 7d d4	 lea	 edi, DWORD PTR _zlib_filefunc64_32_def_fill$79785[ebp]
  00019	f3 a5		 rep movsd

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$79785[ebp+36], 0

; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$79785[ebp+40], 0

; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00029	6a 01		 push	 1
  0002b	8d 45 d4	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$79785[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 _unzOpenInternal
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	eb 12		 jmp	 SHORT $LN3@unzOpen2_6

; 788  :     }
; 789  :     else

  0003d	eb 10		 jmp	 SHORT $LN3@unzOpen2_6
$LN2@unzOpen2_6:

; 790  :         return unzOpenInternal(path, NULL, 1);

  0003f	6a 01		 push	 1
  00041	6a 00		 push	 0
  00043	8b 55 08	 mov	 edx, DWORD PTR _path$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _unzOpenInternal
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@unzOpen2_6:

; 791  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
_unzOpen2_64@8 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen2@8
; Function compile flags: /Odtp
;	COMDAT _unzOpen2@8
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$79775 = -44		; size = 44
_path$ = 8						; size = 4
_pzlib_filefunc32_def$ = 12				; size = 4
_unzOpen2@8 PROC					; COMDAT

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 768  :     if (pzlib_filefunc32_def != NULL)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc32_def$[ebp], 0
  0000a	74 26		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc32_def$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$79775[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32
  00019	83 c4 08	 add	 esp, 8

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  0001c	6a 00		 push	 0
  0001e	8d 55 d4	 lea	 edx, DWORD PTR _zlib_filefunc64_32_def_fill$79775[ebp]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _unzOpenInternal
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	eb 12		 jmp	 SHORT $LN3@unzOpen2

; 773  :     }
; 774  :     else

  00030	eb 10		 jmp	 SHORT $LN3@unzOpen2
$LN2@unzOpen2:

; 775  :         return unzOpenInternal(path, NULL, 0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _unzOpenInternal
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@unzOpen2:

; 776  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
_unzOpen2@8 ENDP
PUBLIC	_unzOpenCurrentFile3@20
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile3@20
_TEXT	SEGMENT
tv95 = -40						; size = 4
tv188 = -36						; size = 4
_offset_local_extrafield$ = -32				; size = 8
_err$ = -20						; size = 4
_iSizeVar$ = -16					; size = 4
_pfile_in_zip_read_info$ = -12				; size = 4
_size_local_extrafield$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_password$ = 24						; size = 4
_unzOpenCurrentFile3@20 PROC				; COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1475 :     int err=UNZ_OK;

  00008	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  0000f	83 7d 18 00	 cmp	 DWORD PTR _password$[ebp], 0
  00013	74 0a		 je	 SHORT $LN22@unzOpenCur

; 1485 :         return UNZ_PARAMERROR;

  00015	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001a	e9 42 03 00 00	 jmp	 $LN23@unzOpenCur
$LN22@unzOpenCur:

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  0001f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00023	75 0a		 jne	 SHORT $LN21@unzOpenCur

; 1489 :         return UNZ_PARAMERROR;

  00025	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002a	e9 32 03 00 00	 jmp	 $LN23@unzOpenCur
$LN21@unzOpenCur:

; 1490 :     s=(unz64_s*)file;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00032	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1491 :     if (!s->current_file_ok)

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00038	89 4d dc	 mov	 DWORD PTR tv188[ebp], ecx
  0003b	8b 55 dc	 mov	 edx, DWORD PTR tv188[ebp]
  0003e	8b 45 dc	 mov	 eax, DWORD PTR tv188[ebp]
  00041	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00044	0b 48 64	 or	 ecx, DWORD PTR [eax+100]
  00047	75 0a		 jne	 SHORT $LN20@unzOpenCur

; 1492 :         return UNZ_PARAMERROR;

  00049	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0004e	e9 0e 03 00 00	 jmp	 $LN23@unzOpenCur
$LN20@unzOpenCur:

; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  00053	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00056	83 ba e0 00 00
	00 00		 cmp	 DWORD PTR [edx+224], 0
  0005d	74 09		 je	 SHORT $LN19@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  0005f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN19@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00068	8d 4d f8	 lea	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  0006b	51		 push	 ecx
  0006c	8d 55 e0	 lea	 edx, DWORD PTR _offset_local_extrafield$[ebp]
  0006f	52		 push	 edx
  00070	8d 45 f0	 lea	 eax, DWORD PTR _iSizeVar$[ebp]
  00073	50		 push	 eax
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _unz64local_CheckCurrentFileCoherencyHeader
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	85 c0		 test	 eax, eax
  00082	74 0a		 je	 SHORT $LN18@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  00084	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  00089	e9 d3 02 00 00	 jmp	 $LN23@unzOpenCur
$LN18@unzOpenCur:

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  0008e	68 d0 00 00 00	 push	 208			; 000000d0H
  00093	e8 00 00 00 00	 call	 _malloc
  00098	83 c4 04	 add	 esp, 4
  0009b	89 45 f4	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], eax

; 1501 :     if (pfile_in_zip_read_info==NULL)

  0009e	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000a2	75 0a		 jne	 SHORT $LN17@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;

  000a4	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000a9	e9 b3 02 00 00	 jmp	 $LN23@unzOpenCur
$LN17@unzOpenCur:

; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  000ae	68 00 40 00 00	 push	 16384			; 00004000H
  000b3	e8 00 00 00 00	 call	 _malloc
  000b8	83 c4 04	 add	 esp, 4
  000bb	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000be	89 02		 mov	 DWORD PTR [edx], eax

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  000c0	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c3	8b 4d e0	 mov	 ecx, DWORD PTR _offset_local_extrafield$[ebp]
  000c6	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _offset_local_extrafield$[ebp+4]
  000cc	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;

  000cf	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  000d5	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  000d8	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000db	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0
  000e2	c7 42 64 00 00
	00 00		 mov	 DWORD PTR [edx+100], 0

; 1508 :     pfile_in_zip_read_info->raw=raw;

  000e9	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000ec	8b 4d 14	 mov	 ecx, DWORD PTR _raw$[ebp]
  000ef	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000f5	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000f8	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000fb	75 1c		 jne	 SHORT $LN16@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  000fd	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00101	74 0c		 je	 SHORT $LN15@unzOpenCur
  00103	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _free
  0010c	83 c4 04	 add	 esp, 4
$LN15@unzOpenCur:

; 1513 :         return UNZ_INTERNALERROR;

  0010f	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00114	e9 48 02 00 00	 jmp	 $LN23@unzOpenCur
$LN16@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;

  00119	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0011c	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1517 : 
; 1518 :     if (method!=NULL)

  00123	83 7d 0c 00	 cmp	 DWORD PTR _method$[ebp], 0
  00127	74 0e		 je	 SHORT $LN14@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  00129	8b 55 0c	 mov	 edx, DWORD PTR _method$[ebp]
  0012c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0012f	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00135	89 0a		 mov	 DWORD PTR [edx], ecx
$LN14@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  00137	83 7d 10 00	 cmp	 DWORD PTR _level$[ebp], 0
  0013b	74 4b		 je	 SHORT $LN13@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  0013d	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  00140	c7 02 06 00 00
	00		 mov	 DWORD PTR [edx], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  00146	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00149	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0014f	83 e1 06	 and	 ecx, 6
  00152	89 4d d8	 mov	 DWORD PTR tv95[ebp], ecx
  00155	83 7d d8 02	 cmp	 DWORD PTR tv95[ebp], 2
  00159	74 24		 je	 SHORT $LN8@unzOpenCur
  0015b	83 7d d8 04	 cmp	 DWORD PTR tv95[ebp], 4
  0015f	74 13		 je	 SHORT $LN9@unzOpenCur
  00161	83 7d d8 06	 cmp	 DWORD PTR tv95[ebp], 6
  00165	74 02		 je	 SHORT $LN10@unzOpenCur
  00167	eb 1f		 jmp	 SHORT $LN13@unzOpenCur
$LN10@unzOpenCur:

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  00169	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  0016c	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1
  00172	eb 14		 jmp	 SHORT $LN13@unzOpenCur
$LN9@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  00174	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  00177	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  0017d	eb 09		 jmp	 SHORT $LN13@unzOpenCur
$LN8@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  0017f	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  00182	c7 01 09 00 00
	00		 mov	 DWORD PTR [ecx], 9
$LN13@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))

  00188	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0018b	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  00192	74 1f		 je	 SHORT $LN7@unzOpenCur
  00194	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00197	83 b8 8c 00 00
	00 0c		 cmp	 DWORD PTR [eax+140], 12	; 0000000cH
  0019e	74 13		 je	 SHORT $LN7@unzOpenCur
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a3	83 b9 8c 00 00
	00 08		 cmp	 DWORD PTR [ecx+140], 8
  001aa	74 07		 je	 SHORT $LN7@unzOpenCur

; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;

  001ac	c7 45 ec 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN7@unzOpenCur:

; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  001b3	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001b6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001b9	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001bf	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1541 :     pfile_in_zip_read_info->crc32=0;

  001c2	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001c5	c7 42 70 00 00
	00 00		 mov	 DWORD PTR [edx+112], 0

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001cf	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
  001d6	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  001dd	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001e0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001e3	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  001e9	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;

  001ef	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001f2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001f5	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  001f8	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  001fe	8b 75 fc	 mov	 esi, DWORD PTR _s$[ebp]
  00201	8b 7d f4	 mov	 edi, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00204	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0020a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0020f	f3 a5		 rep movsd

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  00211	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00214	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00217	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0021a	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax
  00220	8b 52 4c	 mov	 edx, DWORD PTR [edx+76]
  00223	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  00229	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0022c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  00233	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00236	83 b9 8c 00 00
	00 0c		 cmp	 DWORD PTR [ecx+140], 12	; 0000000cH
  0023d	75 18		 jne	 SHORT $LN6@unzOpenCur
  0023f	83 7d 14 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00243	75 12		 jne	 SHORT $LN6@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  00245	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00248	c7 82 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+200], 1
  00252	e9 88 00 00 00	 jmp	 $LN5@unzOpenCur
$LN6@unzOpenCur:

; 1574 : #endif
; 1575 :     }
; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  00257	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0025a	83 b8 8c 00 00
	00 08		 cmp	 DWORD PTR [eax+140], 8
  00261	75 7c		 jne	 SHORT $LN5@unzOpenCur
  00263	83 7d 14 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00267	75 76		 jne	 SHORT $LN5@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;

  00269	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0026c	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;

  00273	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00276	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;

  0027d	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00280	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;

  00287	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0028a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;

  00291	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00294	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  0029b	6a 38		 push	 56			; 00000038H
  0029d	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  002a2	6a f1		 push	 -15			; fffffff1H
  002a4	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002a7	83 c0 04	 add	 eax, 4
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 _inflateInit2_@16
  002b0	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1585 :       if (err == Z_OK)

  002b3	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  002b7	75 0c		 jne	 SHORT $LN3@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  002b9	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002bc	c7 41 48 08 00
	00 00		 mov	 DWORD PTR [ecx+72], 8

; 1587 :       else

  002c3	eb 1a		 jmp	 SHORT $LN5@unzOpenCur
$LN3@unzOpenCur:

; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  002c5	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  002c9	74 0c		 je	 SHORT $LN1@unzOpenCur
  002cb	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _free
  002d4	83 c4 04	 add	 esp, 4
$LN1@unzOpenCur:

; 1590 :         return err;

  002d7	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]
  002da	e9 82 00 00 00	 jmp	 $LN23@unzOpenCur
$LN5@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =
; 1601 :             s->cur_file_info.compressed_size ;

  002df	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002e2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002e5	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  002eb	89 50 78	 mov	 DWORD PTR [eax+120], edx
  002ee	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  002f4	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1603 :             s->cur_file_info.uncompressed_size ;

  002f7	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002fa	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002fd	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00303	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx
  00309	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0030f	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =
; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;

  00315	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00318	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  0031e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00321	8b 81 dc 00 00
	00		 mov	 eax, DWORD PTR [ecx+220]
  00327	83 d0 00	 adc	 eax, 0
  0032a	8b 4d f0	 mov	 ecx, DWORD PTR _iSizeVar$[ebp]
  0032d	33 f6		 xor	 esi, esi
  0032f	03 d1		 add	 edx, ecx
  00331	13 c6		 adc	 eax, esi
  00333	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00336	89 51 40	 mov	 DWORD PTR [ecx+64], edx
  00339	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  0033c	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0033f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  00346	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00349	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0034c	89 88 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ecx

; 1613 :                 s->encrypted = 0;

  00352	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00355	c7 82 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+228], 0

; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  0035f	33 c0		 xor	 eax, eax
$LN23@unzOpenCur:

; 1639 : }

  00361	5f		 pop	 edi
  00362	5e		 pop	 esi
  00363	8b e5		 mov	 esp, ebp
  00365	5d		 pop	 ebp
  00366	c2 14 00	 ret	 20			; 00000014H
_unzOpenCurrentFile3@20 ENDP
PUBLIC	_unzOpenCurrentFile2@16
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile2@16
_TEXT	SEGMENT
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_unzOpenCurrentFile2@16 PROC				; COMDAT

; 1652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00003	6a 00		 push	 0
  00005	8b 45 14	 mov	 eax, DWORD PTR _raw$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _method$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1654 : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_unzOpenCurrentFile2@16 ENDP
_TEXT	ENDS
PUBLIC	_unzOpenCurrentFilePassword@8
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFilePassword@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_password$ = 12						; size = 4
_unzOpenCurrentFilePassword@8 PROC			; COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _password$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1649 : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_unzOpenCurrentFilePassword@8 ENDP
_TEXT	ENDS
PUBLIC	_unzOpenCurrentFile@4
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzOpenCurrentFile@4 PROC				; COMDAT

; 1642 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1644 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
_unzOpenCurrentFile@4 ENDP
END
