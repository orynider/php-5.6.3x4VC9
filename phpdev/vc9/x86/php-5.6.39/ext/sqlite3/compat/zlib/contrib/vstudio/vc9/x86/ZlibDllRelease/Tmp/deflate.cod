; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
EXTRN	_match_init:PROC
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
EXTRN	_longest_match:PROC
	ORG $+2
_deflate_copyright DB ' deflate 1.2.11 Copyright 1995-2017 Jean-loup Gail'
	DB	'ly and Mark Adler ', 00H
	ORG $+3
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC						; COMDAT

; 1196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1197 :     s->window_size = (ulg)2L*s->w_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00009	d1 e1		 shl	 ecx, 1
  0000b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0000e	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00011	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00014	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00017	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0001d	33 d2		 xor	 edx, edx
  0001f	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00024	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00027	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0002a	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  0002e	52		 push	 edx
  0002f	6a 00		 push	 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  00040	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00043	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00049	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0004c	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+2]
  00053	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00056	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00065	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00068	0f b7 91 00 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[ecx]
  0006f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00072	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00081	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00084	0f b7 82 04 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+4]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008e	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0009d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000a0	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+6]
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 1207 : 
; 1208 :     s->strstart = 0;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 1209 :     s->block_start = 0L;

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 1210 :     s->lookahead = 0;

  000c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c4	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], 0

; 1211 :     s->insert = 0;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ce	c7 80 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000db	c7 41 78 02 00
	00 00		 mov	 DWORD PTR [ecx+120], 2
  000e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e5	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 1213 :     s->match_available = 0;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ef	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0

; 1214 :     s->ins_h = 0;

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f9	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */

  00100	e8 00 00 00 00	 call	 _match_init

; 1218 : #endif
; 1219 : #endif
; 1220 : }

  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_lm_init ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _flush_pending
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC					; COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000c	89 4d fc	 mov	 DWORD PTR _s$[ebp], ecx

; 735  : 
; 736  :     _tr_flush_bits(s);

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __tr_flush_bits
  00018	83 c4 04	 add	 esp, 4

; 737  :     len = s->pending;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0001e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00021	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  00024	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00027	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0002a	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0002d	76 09		 jbe	 SHORT $LN3@flush_pend
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00032	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00035	89 55 f8	 mov	 DWORD PTR _len$[ebp], edx
$LN3@flush_pend:

; 739  :     if (len == 0) return;

  00038	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  0003c	75 02		 jne	 SHORT $LN2@flush_pend
  0003e	eb 7a		 jmp	 SHORT $LN4@flush_pend
$LN2@flush_pend:

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  00043	50		 push	 eax
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00047	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004a	52		 push	 edx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0004e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _memcpy
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 742  :     strm->next_out  += len;

  0005a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0005d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00060	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00066	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 743  :     s->pending_out  += len;

  00069	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0006f	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00075	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 744  :     strm->total_out += len;

  00078	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0007b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007e	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00084	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 745  :     strm->avail_out -= len;

  00087	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0008a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008d	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00093	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 746  :     s->pending      -= len;

  00096	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00099	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009c	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000a2	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 747  :     if (s->pending == 0) {

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a8	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  000ac	75 0c		 jne	 SHORT $LN4@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000b4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b7	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN4@flush_pend:

; 749  :     }
; 750  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_flush_pending ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC					; COMDAT

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  :     put_byte(s, (Byte)(b >> 8));

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	c1 e8 08	 shr	 eax, 8
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00015	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00018	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001e	83 c0 01	 add	 eax, 1
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00024	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00027	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0002a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	83 c2 01	 add	 edx, 1
  00048	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 722  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_putShortMSB ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateStateCheck PROC					; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00004	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00008	74 12		 je	 SHORT $LN3@deflateSta
  0000a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000d	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00011	74 09		 je	 SHORT $LN3@deflateSta
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00016	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0001a	75 07		 jne	 SHORT $LN4@deflateSta
$LN3@deflateSta:

; 359  :         return 1;

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	eb 6d		 jmp	 SHORT $LN5@deflateSta
$LN4@deflateSta:

; 360  :     s = strm->state;

  00023	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00026	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00029	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&
; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))

  0002c	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00030	74 55		 je	 SHORT $LN1@deflateSta
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	3b 55 08	 cmp	 edx, DWORD PTR _strm$[ebp]
  0003a	75 4b		 jne	 SHORT $LN1@deflateSta
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003f	83 78 04 2a	 cmp	 DWORD PTR [eax+4], 42	; 0000002aH
  00043	74 49		 je	 SHORT $LN2@deflateSta
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00048	83 79 04 39	 cmp	 DWORD PTR [ecx+4], 57	; 00000039H
  0004c	74 40		 je	 SHORT $LN2@deflateSta
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00051	83 7a 04 45	 cmp	 DWORD PTR [edx+4], 69	; 00000045H
  00055	74 37		 je	 SHORT $LN2@deflateSta
  00057	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005a	83 78 04 49	 cmp	 DWORD PTR [eax+4], 73	; 00000049H
  0005e	74 2e		 je	 SHORT $LN2@deflateSta
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00063	83 79 04 5b	 cmp	 DWORD PTR [ecx+4], 91	; 0000005bH
  00067	74 25		 je	 SHORT $LN2@deflateSta
  00069	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	83 7a 04 67	 cmp	 DWORD PTR [edx+4], 103	; 00000067H
  00070	74 1c		 je	 SHORT $LN2@deflateSta
  00072	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00075	83 78 04 71	 cmp	 DWORD PTR [eax+4], 113	; 00000071H
  00079	74 13		 je	 SHORT $LN2@deflateSta
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0007e	81 79 04 9a 02
	00 00		 cmp	 DWORD PTR [ecx+4], 666	; 0000029aH
  00085	74 07		 je	 SHORT $LN2@deflateSta
$LN1@deflateSta:

; 371  :         return 1;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	eb 02		 jmp	 SHORT $LN5@deflateSta
$LN2@deflateSta:

; 372  :     return 0;

  0008e	33 c0		 xor	 eax, eax
$LN5@deflateSta:

; 373  : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_deflateStateCheck ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv84 = -24						; size = 4
tv73 = -20						; size = 4
_m$ = -16						; size = 4
_wsize$ = -12						; size = 4
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_s$ = 8							; size = 4
_slide_hash PROC					; COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000c	89 4d f4	 mov	 DWORD PTR _wsize$[ebp], ecx

; 207  : 
; 208  :     n = s->hash_size;

  0000f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00012	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00015	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 209  :     p = &s->head[n];

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0001b	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00021	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00024	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx
$LN6@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00027	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0002a	83 ea 02	 sub	 edx, 2
  0002d	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00033	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00036	89 4d f0	 mov	 DWORD PTR _m$[ebp], ecx

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00039	8b 55 f0	 mov	 edx, DWORD PTR _m$[ebp]
  0003c	3b 55 f4	 cmp	 edx, DWORD PTR _wsize$[ebp]
  0003f	72 0b		 jb	 SHORT $LN9@slide_hash
  00041	8b 45 f0	 mov	 eax, DWORD PTR _m$[ebp]
  00044	2b 45 f4	 sub	 eax, DWORD PTR _wsize$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  0004a	eb 07		 jmp	 SHORT $LN10@slide_hash
$LN9@slide_hash:
  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN10@slide_hash:
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00056	66 8b 55 ec	 mov	 dx, WORD PTR tv73[ebp]
  0005a	66 89 11	 mov	 WORD PTR [ecx], dx

; 213  :     } while (--n);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00060	83 e8 01	 sub	 eax, 1
  00063	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00066	75 bf		 jne	 SHORT $LN6@slide_hash

; 214  :     n = wsize;

  00068	8b 4d f4	 mov	 ecx, DWORD PTR _wsize$[ebp]
  0006b	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx

; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  0006e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00071	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00077	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0007a	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$LN3@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00080	83 e8 02	 sub	 eax, 2
  00083	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00089	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0008c	89 55 f0	 mov	 DWORD PTR _m$[ebp], edx

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _m$[ebp]
  00092	3b 45 f4	 cmp	 eax, DWORD PTR _wsize$[ebp]
  00095	72 0b		 jb	 SHORT $LN11@slide_hash
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _m$[ebp]
  0009a	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  0009d	89 4d e8	 mov	 DWORD PTR tv84[ebp], ecx
  000a0	eb 07		 jmp	 SHORT $LN12@slide_hash
$LN11@slide_hash:
  000a2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN12@slide_hash:
  000a9	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  000ac	66 8b 45 e8	 mov	 ax, WORD PTR tv84[ebp]
  000b0	66 89 02	 mov	 WORD PTR [edx], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000b6	83 e9 01	 sub	 ecx, 1
  000b9	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
  000bc	75 bf		 jne	 SHORT $LN3@slide_hash

; 224  : #endif
; 225  : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_slide_hash ENDP
PUBLIC	_deflateEnd@4
; Function compile flags: /Odtp
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 0a		 je	 SHORT $LN5@deflateEnd
  00014	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00019	e9 de 00 00 00	 jmp	 $LN6@deflateEnd
$LN5@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00021	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00024	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00027	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00030	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00034	74 1c		 je	 SHORT $LN4@deflateEnd
  00036	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00039	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003f	52		 push	 edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00043	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00046	51		 push	 ecx
  00047	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0004a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0004d	ff d0		 call	 eax
  0004f	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00055	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00058	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  0005c	74 1c		 je	 SHORT $LN3@deflateEnd
  0005e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00061	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00064	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00067	52		 push	 edx
  00068	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0006b	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0006e	51		 push	 ecx
  0006f	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00072	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00075	ff d0		 call	 eax
  00077	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0007d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00080	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00084	74 1c		 je	 SHORT $LN2@deflateEnd
  00086	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00089	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0008c	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00093	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00096	51		 push	 ecx
  00097	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0009a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0009d	ff d0		 call	 eax
  0009f	83 c4 08	 add	 esp, 8
$LN2@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000a5	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000a8	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  000ac	74 1c		 je	 SHORT $LN1@deflateEnd
  000ae	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000b1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000b4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000b7	52		 push	 edx
  000b8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000bb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000be	51		 push	 ecx
  000bf	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000c2	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000c5	ff d0		 call	 eax
  000c7	83 c4 08	 add	 esp, 8
$LN1@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000cd	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000d0	52		 push	 edx
  000d1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000d4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000d7	51		 push	 ecx
  000d8	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000db	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000de	ff d0		 call	 eax
  000e0	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;

  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000e6	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  000ed	33 c0		 xor	 eax, eax
  000ef	83 7d fc 71	 cmp	 DWORD PTR _status$[ebp], 113 ; 00000071H
  000f3	0f 95 c0	 setne	 al
  000f6	83 e8 01	 sub	 eax, 1
  000f9	83 e0 fd	 and	 eax, -3			; fffffffdH
$LN6@deflateEnd:

; 1095 : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
PUBLIC	_deflateBound@8
; Function compile flags: /Odtp
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
tv77 = -20						; size = 4
_str$77927 = -16					; size = 4
_wraplen$ = -12						; size = 4
_complen$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00009	83 c0 07	 add	 eax, 7
  0000c	c1 e8 03	 shr	 eax, 3
  0000f	03 45 0c	 add	 eax, DWORD PTR _sourceLen$[ebp]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00015	83 c1 3f	 add	 ecx, 63			; 0000003fH
  00018	c1 e9 06	 shr	 ecx, 6
  0001b	8d 54 08 05	 lea	 edx, DWORD PTR [eax+ecx+5]
  0001f	89 55 f8	 mov	 DWORD PTR _complen$[ebp], edx

; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00022	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _deflateStateCheck
  0002b	83 c4 04	 add	 esp, 4
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN20@deflateBou

; 665  :         return complen + 6;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  00035	83 c0 06	 add	 eax, 6
  00038	e9 32 01 00 00	 jmp	 $LN21@deflateBou
$LN20@deflateBou:

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00040	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00043	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 669  :     switch (s->wrap) {

  00046	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004c	89 4d ec	 mov	 DWORD PTR tv77[ebp], ecx
  0004f	83 7d ec 00	 cmp	 DWORD PTR tv77[ebp], 0
  00053	74 11		 je	 SHORT $LN17@deflateBou
  00055	83 7d ec 01	 cmp	 DWORD PTR tv77[ebp], 1
  00059	74 17		 je	 SHORT $LN16@deflateBou
  0005b	83 7d ec 02	 cmp	 DWORD PTR tv77[ebp], 2
  0005f	74 29		 je	 SHORT $LN15@deflateBou
  00061	e9 ca 00 00 00	 jmp	 $LN3@deflateBou
$LN17@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  00066	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 0

; 672  :         break;

  0006d	e9 c5 00 00 00	 jmp	 $LN18@deflateBou
$LN16@deflateBou:

; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00072	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00075	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00078	f7 d8		 neg	 eax
  0007a	1b c0		 sbb	 eax, eax
  0007c	83 e0 04	 and	 eax, 4
  0007f	83 c0 06	 add	 eax, 6
  00082	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 675  :         break;

  00085	e9 ad 00 00 00	 jmp	 $LN18@deflateBou
$LN15@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;

  0008a	c7 45 f4 12 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 18 ; 00000012H

; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00094	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00098	0f 84 90 00 00
	00		 je	 $LN14@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000a4	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000a8	74 13		 je	 SHORT $LN13@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ad	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000b0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b3	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  000b6	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  000ba	89 55 f4	 mov	 DWORD PTR _wraplen$[ebp], edx
$LN13@deflateBou:

; 683  :             str = s->gzhead->name;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c0	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000c3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c6	89 55 f0	 mov	 DWORD PTR _str$77927[ebp], edx

; 684  :             if (str != Z_NULL)

  000c9	83 7d f0 00	 cmp	 DWORD PTR _str$77927[ebp], 0
  000cd	74 1c		 je	 SHORT $LN12@deflateBou
$LN11@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;

  000cf	8b 45 f4	 mov	 eax, DWORD PTR _wraplen$[ebp]
  000d2	83 c0 01	 add	 eax, 1
  000d5	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 687  :                 } while (*str++);

  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _str$77927[ebp]
  000db	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000de	8b 45 f0	 mov	 eax, DWORD PTR _str$77927[ebp]
  000e1	83 c0 01	 add	 eax, 1
  000e4	89 45 f0	 mov	 DWORD PTR _str$77927[ebp], eax
  000e7	85 d2		 test	 edx, edx
  000e9	75 e4		 jne	 SHORT $LN11@deflateBou
$LN12@deflateBou:

; 688  :             str = s->gzhead->comment;

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ee	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000f1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f4	89 45 f0	 mov	 DWORD PTR _str$77927[ebp], eax

; 689  :             if (str != Z_NULL)

  000f7	83 7d f0 00	 cmp	 DWORD PTR _str$77927[ebp], 0
  000fb	74 1c		 je	 SHORT $LN8@deflateBou
$LN7@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  00100	83 c1 01	 add	 ecx, 1
  00103	89 4d f4	 mov	 DWORD PTR _wraplen$[ebp], ecx

; 692  :                 } while (*str++);

  00106	8b 55 f0	 mov	 edx, DWORD PTR _str$77927[ebp]
  00109	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0010c	8b 4d f0	 mov	 ecx, DWORD PTR _str$77927[ebp]
  0010f	83 c1 01	 add	 ecx, 1
  00112	89 4d f0	 mov	 DWORD PTR _str$77927[ebp], ecx
  00115	85 c0		 test	 eax, eax
  00117	75 e4		 jne	 SHORT $LN7@deflateBou
$LN8@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  00119	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0011c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0011f	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00123	74 09		 je	 SHORT $LN14@deflateBou

; 694  :                 wraplen += 2;

  00125	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  00128	83 c1 02	 add	 ecx, 2
  0012b	89 4d f4	 mov	 DWORD PTR _wraplen$[ebp], ecx
$LN14@deflateBou:

; 695  :         }
; 696  :         break;

  0012e	eb 07		 jmp	 SHORT $LN18@deflateBou
$LN3@deflateBou:

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00130	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 6
$LN18@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  00137	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0013a	83 7a 30 0f	 cmp	 DWORD PTR [edx+48], 15	; 0000000fH
  0013e	75 09		 jne	 SHORT $LN1@deflateBou
  00140	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00143	83 78 50 0f	 cmp	 DWORD PTR [eax+80], 15	; 0000000fH
  00147	74 08		 je	 SHORT $LN2@deflateBou
$LN1@deflateBou:

; 704  :         return complen + wraplen;

  00149	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  0014c	03 45 f4	 add	 eax, DWORD PTR _wraplen$[ebp]
  0014f	eb 1e		 jmp	 SHORT $LN21@deflateBou
$LN2@deflateBou:

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;

  00151	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00154	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00157	03 4d 0c	 add	 ecx, DWORD PTR _sourceLen$[ebp]
  0015a	8b 55 0c	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  0015d	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  00160	03 ca		 add	 ecx, edx
  00162	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00165	c1 e8 19	 shr	 eax, 25			; 00000019H
  00168	03 4d f4	 add	 ecx, DWORD PTR _wraplen$[ebp]
  0016b	8d 44 08 07	 lea	 eax, DWORD PTR [eax+ecx+7]
$LN21@deflateBou:

; 709  : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateTune@20
; Function compile flags: /Odtp
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 07		 je	 SHORT $LN1@deflateTun
  00014	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00019	eb 38		 jmp	 SHORT $LN2@deflateTun
$LN1@deflateTun:

; 627  :     s = strm->state;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0001e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00021	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 628  :     s->good_match = (uInt)good_length;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _good_length$[ebp]
  0002a	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00030	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00033	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00036	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax

; 630  :     s->nice_match = nice_length;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003f	8b 55 14	 mov	 edx, DWORD PTR _nice_length$[ebp]
  00042	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 631  :     s->max_chain_length = (uInt)max_chain;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	8b 4d 18	 mov	 ecx, DWORD PTR _max_chain$[ebp]
  0004e	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 632  :     return Z_OK;

  00051	33 c0		 xor	 eax, eax
$LN2@deflateTun:

; 633  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
PUBLIC	_deflatePrime@12
; Function compile flags: /Odtp
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_s$ = -8						; size = 4
_put$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	74 0a		 je	 SHORT $LN6@deflatePri
  00016	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0001b	e9 b7 00 00 00	 jmp	 $LN7@deflatePri
$LN6@deflatePri:

; 551  :     s = strm->state;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00023	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00026	89 55 f8	 mov	 DWORD PTR _s$[ebp], edx

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  00029	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0002c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002f	83 c1 02	 add	 ecx, 2
  00032	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00035	39 8a a4 16 00
	00		 cmp	 DWORD PTR [edx+5796], ecx
  0003b	73 0a		 jae	 SHORT $LN4@deflatePri

; 553  :         return Z_BUF_ERROR;

  0003d	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00042	e9 90 00 00 00	 jmp	 $LN7@deflatePri
$LN4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0004a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0004f	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00055	89 4d fc	 mov	 DWORD PTR _put$[ebp], ecx

; 556  :         if (put > bits)

  00058	8b 55 fc	 mov	 edx, DWORD PTR _put$[ebp]
  0005b	3b 55 0c	 cmp	 edx, DWORD PTR _bits$[ebp]
  0005e	7e 06		 jle	 SHORT $LN1@deflatePri

; 557  :             put = bits;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _bits$[ebp]
  00063	89 45 fc	 mov	 DWORD PTR _put$[ebp], eax
$LN1@deflatePri:

; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  00066	ba 01 00 00 00	 mov	 edx, 1
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _put$[ebp]
  0006e	d3 e2		 shl	 edx, cl
  00070	83 ea 01	 sub	 edx, 1
  00073	23 55 10	 and	 edx, DWORD PTR _value$[ebp]
  00076	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00079	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0007f	d3 e2		 shl	 edx, cl
  00081	0f b7 ca	 movzx	 ecx, dx
  00084	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00087	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0008e	0b c1		 or	 eax, ecx
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00093	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 559  :         s->bi_valid += put;

  0009a	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0009d	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000a3	03 45 fc	 add	 eax, DWORD PTR _put$[ebp]
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000a9	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 560  :         _tr_flush_bits(s);

  000af	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 __tr_flush_bits
  000b8	83 c4 04	 add	 esp, 4

; 561  :         value >>= put;

  000bb	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _put$[ebp]
  000c1	d3 f8		 sar	 eax, cl
  000c3	89 45 10	 mov	 DWORD PTR _value$[ebp], eax

; 562  :         bits -= put;

  000c6	8b 4d 0c	 mov	 ecx, DWORD PTR _bits$[ebp]
  000c9	2b 4d fc	 sub	 ecx, DWORD PTR _put$[ebp]
  000cc	89 4d 0c	 mov	 DWORD PTR _bits$[ebp], ecx

; 563  :     } while (bits);

  000cf	0f 85 72 ff ff
	ff		 jne	 $LN4@deflatePri

; 564  :     return Z_OK;

  000d5	33 c0		 xor	 eax, eax
$LN7@deflatePri:

; 565  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
PUBLIC	_deflatePending@12
; Function compile flags: /Odtp
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 07		 je	 SHORT $LN3@deflatePen
  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00018	eb 2d		 jmp	 SHORT $LN4@deflatePen
$LN3@deflatePen:

; 534  :     if (pending != Z_NULL)

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _pending$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN2@deflatePen

; 535  :         *pending = strm->state->pending;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00023	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _pending$[ebp]
  00029	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0002c	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@deflatePen:

; 536  :     if (bits != Z_NULL)

  0002e	83 7d 10 00	 cmp	 DWORD PTR _bits$[ebp], 0
  00032	74 11		 je	 SHORT $LN1@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  00034	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00037	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  0003d	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00043	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@deflatePen:

; 538  :     return Z_OK;

  00045	33 c0		 xor	 eax, eax
$LN4@deflatePen:

; 539  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetHeader@8
; Function compile flags: /Odtp
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	75 0c		 jne	 SHORT $LN1@deflateSet
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00016	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00019	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  0001d	74 07		 je	 SHORT $LN2@deflateSet
$LN1@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  0001f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00024	eb 0e		 jmp	 SHORT $LN3@deflateSet
$LN2@deflateSet:

; 523  :     strm->state->gzhead = head;

  00026	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00029	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0002c	8b 55 0c	 mov	 edx, DWORD PTR _head$[ebp]
  0002f	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 524  :     return Z_OK;

  00032	33 c0		 xor	 eax, eax
$LN3@deflateSet:

; 525  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateGetDictionary@12
; Function compile flags: /Odtp
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN4@deflateGet

; 454  :         return Z_STREAM_ERROR;

  00016	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0001b	eb 6e		 jmp	 SHORT $LN5@deflateGet
$LN4@deflateGet:

; 455  :     s = strm->state;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00020	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00023	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 456  :     len = s->strstart + s->lookahead;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00029	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0002f	03 4a 74	 add	 ecx, DWORD PTR [edx+116]
  00032	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx

; 457  :     if (len > s->w_size)

  00035	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0003b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0003e	76 09		 jbe	 SHORT $LN3@deflateGet

; 458  :         len = s->w_size;

  00040	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00043	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00046	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
$LN3@deflateGet:

; 459  :     if (dictionary != Z_NULL && len)

  00049	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0004d	74 2c		 je	 SHORT $LN2@deflateGet
  0004f	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  00053	74 26		 je	 SHORT $LN2@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00055	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  00058	51		 push	 ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00062	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  00065	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00068	03 42 74	 add	 eax, DWORD PTR [edx+116]
  0006b	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  0006e	50		 push	 eax
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _dictionary$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _memcpy
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  0007b	83 7d 10 00	 cmp	 DWORD PTR _dictLength$[ebp], 0
  0007f	74 08		 je	 SHORT $LN1@deflateGet

; 462  :         *dictLength = len;

  00081	8b 4d 10	 mov	 ecx, DWORD PTR _dictLength$[ebp]
  00084	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  00087	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@deflateGet:

; 463  :     return Z_OK;

  00089	33 c0		 xor	 eax, eax
$LN5@deflateGet:

; 464  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
; Function compile flags: /Odtp
;	COMDAT _read_buf
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC						; COMDAT

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1169 :     unsigned len = strm->avail_in;

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000a	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 1170 : 
; 1171 :     if (len > size) len = size;

  0000d	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00010	3b 55 10	 cmp	 edx, DWORD PTR _size$[ebp]
  00013	76 06		 jbe	 SHORT $LN5@read_buf
  00015	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
$LN5@read_buf:

; 1172 :     if (len == 0) return 0;

  0001b	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  0001f	75 07		 jne	 SHORT $LN4@read_buf
  00021	33 c0		 xor	 eax, eax
  00023	e9 92 00 00 00	 jmp	 $LN6@read_buf
$LN4@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002e	2b 55 fc	 sub	 edx, DWORD PTR _len$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00034	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0003e	8b 02		 mov	 eax, DWORD PTR [edx]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _memcpy
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1177 :     if (strm->state->wrap == 1) {

  0004d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00050	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00053	83 78 18 01	 cmp	 DWORD PTR [eax+24], 1
  00057	75 1c		 jne	 SHORT $LN3@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00060	52		 push	 edx
  00061	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00064	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _adler32@12
  0006d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00070	89 42 30	 mov	 DWORD PTR [edx+48], eax
  00073	eb 26		 jmp	 SHORT $LN2@read_buf
$LN3@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00075	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00078	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0007b	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  0007f	75 1a		 jne	 SHORT $LN2@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  00081	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00084	52		 push	 edx
  00085	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0008c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _crc32@12
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00098	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN2@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  0009b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0009e	8b 02		 mov	 eax, DWORD PTR [edx]
  000a0	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax

; 1186 :     strm->total_in += len;

  000a8	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000ab	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ae	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000b4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1187 : 
; 1188 :     return len;

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
$LN6@read_buf:

; 1189 : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
PUBLIC	_deflateCopy@8
; Function compile flags: /Odtp
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_ss$ = -12						; size = 4
_ds$ = -8						; size = 4
_overlay$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00006	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	75 06		 jne	 SHORT $LN4@deflateCop
  00016	83 7d 08 00	 cmp	 DWORD PTR _dest$[ebp], 0
  0001a	75 0a		 jne	 SHORT $LN5@deflateCop
$LN4@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  0001c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00021	e9 2f 02 00 00	 jmp	 $LN6@deflateCop
$LN5@deflateCop:

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00029	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002c	89 55 f4	 mov	 DWORD PTR _ss$[ebp], edx

; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0002f	6a 38		 push	 56			; 00000038H
  00031	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _memcpy
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00041	68 c4 16 00 00	 push	 5828			; 000016c4H
  00046	6a 01		 push	 1
  00048	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0004b	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0004e	50		 push	 eax
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00052	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00055	ff d2		 call	 edx
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	89 45 f8	 mov	 DWORD PTR _ds$[ebp], eax

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  0005d	83 7d f8 00	 cmp	 DWORD PTR _ds$[ebp], 0
  00061	75 0a		 jne	 SHORT $LN3@deflateCop
  00063	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00068	e9 e8 01 00 00	 jmp	 $LN6@deflateCop
$LN3@deflateCop:

; 1124 :     dest->state = (struct internal_state FAR *) ds;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00073	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00076	68 c4 16 00 00	 push	 5828			; 000016c4H
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _memcpy
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1126 :     ds->strm = dest;

  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0008e	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00091	89 11		 mov	 DWORD PTR [ecx], edx

; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00093	6a 02		 push	 2
  00095	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00098	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0009b	51		 push	 ecx
  0009c	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0009f	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000a2	50		 push	 eax
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000a6	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a9	ff d2		 call	 edx
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  000b1	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  000b4	6a 02		 push	 2
  000b6	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000b9	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000bc	50		 push	 eax
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000c0	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000c3	52		 push	 edx
  000c4	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  000c7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000ca	ff d1		 call	 ecx
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000d2	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  000d5	6a 02		 push	 2
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  000da	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000dd	51		 push	 ecx
  000de	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  000e1	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000e4	50		 push	 eax
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000e8	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000eb	ff d2		 call	 edx
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  000f3	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  000f6	6a 04		 push	 4
  000f8	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000fb	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00105	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00108	52		 push	 edx
  00109	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0010c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0010f	ff d1		 call	 ecx
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	89 45 fc	 mov	 DWORD PTR _overlay$[ebp], eax

; 1132 :     ds->pending_buf = (uchf *) overlay;

  00117	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  0011a	8b 45 fc	 mov	 eax, DWORD PTR _overlay$[ebp]
  0011d	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 1135 :         ds->pending_buf == Z_NULL) {

  00120	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00123	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00127	74 1b		 je	 SHORT $LN1@deflateCop
  00129	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  0012c	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00130	74 12		 je	 SHORT $LN1@deflateCop
  00132	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00135	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00139	74 09		 je	 SHORT $LN1@deflateCop
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0013e	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00142	75 13		 jne	 SHORT $LN2@deflateCop
$LN1@deflateCop:

; 1136 :         deflateEnd (dest);

  00144	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 _deflateEnd@4

; 1137 :         return Z_MEM_ERROR;

  0014d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00152	e9 fe 00 00 00	 jmp	 $LN6@deflateCop
$LN2@deflateCop:

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  00157	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  0015a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0015d	d1 e1		 shl	 ecx, 1
  0015f	51		 push	 ecx
  00160	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  00163	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00166	50		 push	 eax
  00167	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0016a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0016d	52		 push	 edx
  0016e	e8 00 00 00 00	 call	 _memcpy
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  00176	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00179	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0017c	d1 e1		 shl	 ecx, 1
  0017e	51		 push	 ecx
  0017f	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  00182	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00185	50		 push	 eax
  00186	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00189	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0018c	52		 push	 edx
  0018d	e8 00 00 00 00	 call	 _memcpy
  00192	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00195	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00198	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0019b	d1 e1		 shl	 ecx, 1
  0019d	51		 push	 ecx
  0019e	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  001a1	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001a4	50		 push	 eax
  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001a8	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001ab	52		 push	 edx
  001ac	e8 00 00 00 00	 call	 _memcpy
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  001b4	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001b7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ba	51		 push	 ecx
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  001be	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c1	50		 push	 eax
  001c2	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001c5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 _memcpy
  001ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  001d1	8b 45 f4	 mov	 eax, DWORD PTR _ss$[ebp]
  001d4	8b 4d f4	 mov	 ecx, DWORD PTR _ss$[ebp]
  001d7	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001da	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  001dd	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001e0	03 50 08	 add	 edx, DWORD PTR [eax+8]
  001e3	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001e6	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  001e9	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  001ec	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  001f2	d1 e8		 shr	 eax, 1
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _overlay$[ebp]
  001f7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001fa	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001fd	89 90 a4 16 00
	00		 mov	 DWORD PTR [eax+5796], edx

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00203	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00206	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  0020c	6b d2 03	 imul	 edx, 3
  0020f	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00212	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00215	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00218	89 91 98 16 00
	00		 mov	 DWORD PTR [ecx+5784], edx

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  0021e	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  00221	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00227	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  0022a	89 90 18 0b 00
	00		 mov	 DWORD PTR [eax+2840], edx

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00230	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00233	81 c1 88 09 00
	00		 add	 ecx, 2440		; 00000988H
  00239	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  0023c	89 8a 24 0b 00
	00		 mov	 DWORD PTR [edx+2852], ecx

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  00242	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00245	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  0024a	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0024d	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  00253	33 c0		 xor	 eax, eax
$LN6@deflateCop:

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateResetKeep@4
; Function compile flags: /Odtp
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv86 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	74 0a		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00016	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0001b	e9 d4 00 00 00	 jmp	 $LN3@deflateRes
$LN2@deflateRes:

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00023	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0002d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

  00034	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00037	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 478  :     strm->data_type = Z_UNKNOWN;

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00041	c7 41 2c 02 00
	00 00		 mov	 DWORD PTR [ecx+44], 2

; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  00048	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0004b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004e	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 481  :     s->pending = 0;

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00054	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 482  :     s->pending_out = s->pending_buf;

  0005b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00061	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00064	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 483  : 
; 484  :     if (s->wrap < 0) {

  00067	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006a	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0006e	7d 0e		 jge	 SHORT $LN1@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00070	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00073	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00076	f7 d9		 neg	 ecx
  00078	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN1@deflateRes:

; 486  :     }
; 487  :     s->status =
; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00081	83 78 18 02	 cmp	 DWORD PTR [eax+24], 2
  00085	75 09		 jne	 SHORT $LN5@deflateRes
  00087	c7 45 f8 39 00
	00 00		 mov	 DWORD PTR tv86[ebp], 57	; 00000039H
  0008e	eb 13		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00093	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00096	f7 da		 neg	 edx
  00098	1b d2		 sbb	 edx, edx
  0009a	83 e2 b9	 and	 edx, -71		; ffffffb9H
  0009d	83 c2 71	 add	 edx, 113		; 00000071H
  000a0	89 55 f8	 mov	 DWORD PTR tv86[ebp], edx
$LN6@deflateRes:
  000a3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR tv86[ebp]
  000a9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 492  :     strm->adler =
; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);

  000ac	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000af	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  000b3	75 10		 jne	 SHORT $LN7@deflateRes
  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 _crc32@12
  000c0	89 45 f4	 mov	 DWORD PTR tv130[ebp], eax
  000c3	eb 0e		 jmp	 SHORT $LN8@deflateRes
$LN7@deflateRes:
  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 _adler32@12
  000d0	89 45 f4	 mov	 DWORD PTR tv130[ebp], eax
$LN8@deflateRes:
  000d3	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR tv130[ebp]
  000d9	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 497  :     s->last_flush = Z_NO_FLUSH;

  000dc	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000df	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 498  : 
; 499  :     _tr_init(s);

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 __tr_init
  000ef	83 c4 04	 add	 esp, 4

; 500  : 
; 501  :     return Z_OK;

  000f2	33 c0		 xor	 eax, eax
$LN3@deflateRes:

; 502  : }

  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
; Function compile flags: /Odtp
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv353 = -52						; size = 4
tv348 = -48						; size = 4
tv336 = -44						; size = 4
tv332 = -40						; size = 4
tv257 = -36						; size = 4
tv132 = -32						; size = 4
tv71 = -28						; size = 4
_used$ = -24						; size = 4
_len$ = -20						; size = 4
_left$ = -16						; size = 4
_min_block$ = -12					; size = 4
_have$ = -8						; size = 4
_last$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000c	83 e9 05	 sub	 ecx, 5
  0000f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00012	3b 4a 2c	 cmp	 ecx, DWORD PTR [edx+44]
  00015	76 0b		 jbe	 SHORT $LN31@deflate_st
  00017	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0001a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001d	89 4d e4	 mov	 DWORD PTR tv71[ebp], ecx
  00020	eb 0c		 jmp	 SHORT $LN32@deflate_st
$LN31@deflate_st:
  00022	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00025	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00028	83 e8 05	 sub	 eax, 5
  0002b	89 45 e4	 mov	 DWORD PTR tv71[ebp], eax
$LN32@deflate_st:
  0002e	8b 4d e4	 mov	 ecx, DWORD PTR tv71[ebp]
  00031	89 4d f4	 mov	 DWORD PTR _min_block$[ebp], ecx

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0

; 1658 :     unsigned used = s->strm->avail_in;

  0003b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003e	8b 02		 mov	 eax, DWORD PTR [edx]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d e8	 mov	 DWORD PTR _used$[ebp], ecx
$LN28@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */

  00046	c7 45 ec ff ff
	00 00		 mov	 DWORD PTR _len$[ebp], 65535 ; 0000ffffH

; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  0004d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00050	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00056	83 c0 2a	 add	 eax, 42			; 0000002aH
  00059	c1 f8 03	 sar	 eax, 3
  0005c	89 45 f8	 mov	 DWORD PTR _have$[ebp], eax

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00067	3b 45 f8	 cmp	 eax, DWORD PTR _have$[ebp]
  0006a	73 05		 jae	 SHORT $LN25@deflate_st

; 1667 :             break;

  0006c	e9 0b 02 00 00	 jmp	 $LN26@deflate_st
$LN25@deflate_st:

; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;

  00071	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00079	2b 45 f8	 sub	 eax, DWORD PTR _have$[ebp]
  0007c	89 45 f8	 mov	 DWORD PTR _have$[ebp], eax

; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00082	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00085	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00088	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  0008b	89 45 f0	 mov	 DWORD PTR _left$[ebp], eax

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  00096	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00099	39 45 ec	 cmp	 DWORD PTR _len$[ebp], eax
  0009c	76 0e		 jbe	 SHORT $LN24@deflate_st

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */

  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a3	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  000a6	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000a9	89 45 ec	 mov	 DWORD PTR _len$[ebp], eax
$LN24@deflate_st:

; 1673 :         if (len > have)

  000ac	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  000af	3b 4d f8	 cmp	 ecx, DWORD PTR _have$[ebp]
  000b2	76 06		 jbe	 SHORT $LN23@deflate_st

; 1674 :             len = have;                         /* limit len to the output */

  000b4	8b 55 f8	 mov	 edx, DWORD PTR _have$[ebp]
  000b7	89 55 ec	 mov	 DWORD PTR _len$[ebp], edx
$LN23@deflate_st:

; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||
; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  000bd	3b 45 f4	 cmp	 eax, DWORD PTR _min_block$[ebp]
  000c0	73 27		 jae	 SHORT $LN22@deflate_st
  000c2	83 7d ec 00	 cmp	 DWORD PTR _len$[ebp], 0
  000c6	75 06		 jne	 SHORT $LN20@deflate_st
  000c8	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  000cc	75 16		 jne	 SHORT $LN21@deflate_st
$LN20@deflate_st:
  000ce	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  000d2	74 10		 je	 SHORT $LN21@deflate_st
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d9	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  000dc	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000df	39 45 ec	 cmp	 DWORD PTR _len$[ebp], eax
  000e2	74 05		 je	 SHORT $LN22@deflate_st
$LN21@deflate_st:

; 1684 :             break;

  000e4	e9 93 01 00 00	 jmp	 $LN26@deflate_st
$LN22@deflate_st:

; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  000e9	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  000ed	75 19		 jne	 SHORT $LN33@deflate_st
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f4	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  000f7	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000fa	39 45 ec	 cmp	 DWORD PTR _len$[ebp], eax
  000fd	75 09		 jne	 SHORT $LN33@deflate_st
  000ff	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  00106	eb 07		 jmp	 SHORT $LN34@deflate_st
$LN33@deflate_st:
  00108	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN34@deflate_st:
  0010f	8b 4d e0	 mov	 ecx, DWORD PTR tv132[ebp]
  00112	89 4d fc	 mov	 DWORD PTR _last$[ebp], ecx

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  00115	8b 55 fc	 mov	 edx, DWORD PTR _last$[ebp]
  00118	52		 push	 edx
  00119	6a 00		 push	 0
  0011b	6a 00		 push	 0
  0011d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __tr_stored_block
  00126	83 c4 10	 add	 esp, 16			; 00000010H

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  00129	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0012f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00132	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00135	8a 45 ec	 mov	 al, BYTE PTR _len$[ebp]
  00138	88 44 0a fc	 mov	 BYTE PTR [edx+ecx-4], al

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  0013c	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  0013f	c1 e9 08	 shr	 ecx, 8
  00142	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00145	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00148	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0014b	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0014e	88 4c 10 fd	 mov	 BYTE PTR [eax+edx-3], cl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  00152	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  00155	f7 d0		 not	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00160	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00163	88 44 0a fe	 mov	 BYTE PTR [edx+ecx-2], al

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  00167	8b 55 ec	 mov	 edx, DWORD PTR _len$[ebp]
  0016a	f7 d2		 not	 edx
  0016c	c1 ea 08	 shr	 edx, 8
  0016f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00172	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00175	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00178	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0017b	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  0017f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00182	8b 11		 mov	 edx, DWORD PTR [ecx]
  00184	52		 push	 edx
  00185	e8 00 00 00 00	 call	 _flush_pending
  0018a	83 c4 04	 add	 esp, 4

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  0018d	83 7d f0 00	 cmp	 DWORD PTR _left$[ebp], 0
  00191	0f 84 81 00 00
	00		 je	 $LN19@deflate_st

; 1709 :             if (left > len)

  00197	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  0019a	3b 45 ec	 cmp	 eax, DWORD PTR _len$[ebp]
  0019d	76 06		 jbe	 SHORT $LN18@deflate_st

; 1710 :                 left = len;

  0019f	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  001a2	89 4d f0	 mov	 DWORD PTR _left$[ebp], ecx
$LN18@deflate_st:

; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  001a5	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  001a8	52		 push	 edx
  001a9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ac	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001af	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b2	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  001b5	51		 push	 ecx
  001b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 _memcpy
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1712 :             s->strm->next_out += left;

  001c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cc	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001cf	03 55 f0	 add	 edx, DWORD PTR _left$[ebp]
  001d2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d7	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1713 :             s->strm->avail_out -= left;

  001da	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001dd	8b 02		 mov	 eax, DWORD PTR [edx]
  001df	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001e2	2b 4d f0	 sub	 ecx, DWORD PTR _left$[ebp]
  001e5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ea	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1714 :             s->strm->total_out += left;

  001ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001f5	03 45 f0	 add	 eax, DWORD PTR _left$[ebp]
  001f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fd	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1715 :             s->block_start += left;

  00200	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00203	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00206	03 4d f0	 add	 ecx, DWORD PTR _left$[ebp]
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1716 :             len -= left;

  0020f	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  00212	2b 45 f0	 sub	 eax, DWORD PTR _left$[ebp]
  00215	89 45 ec	 mov	 DWORD PTR _len$[ebp], eax
$LN19@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00218	83 7d ec 00	 cmp	 DWORD PTR _len$[ebp], 0
  0021c	74 54		 je	 SHORT $LN27@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  0021e	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  00221	51		 push	 ecx
  00222	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00225	8b 02		 mov	 eax, DWORD PTR [edx]
  00227	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0022a	51		 push	 ecx
  0022b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022e	8b 02		 mov	 eax, DWORD PTR [edx]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 _read_buf
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1724 :             s->strm->next_out += len;

  00239	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0023c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00241	03 45 ec	 add	 eax, DWORD PTR _len$[ebp]
  00244	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00247	8b 11		 mov	 edx, DWORD PTR [ecx]
  00249	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1725 :             s->strm->avail_out -= len;

  0024c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0024f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00251	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00254	2b 55 ec	 sub	 edx, DWORD PTR _len$[ebp]
  00257	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025c	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1726 :             s->strm->total_out += len;

  0025f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00262	8b 02		 mov	 eax, DWORD PTR [edx]
  00264	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00267	03 4d ec	 add	 ecx, DWORD PTR _len$[ebp]
  0026a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026d	8b 02		 mov	 eax, DWORD PTR [edx]
  0026f	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN27@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  00272	83 7d fc 00	 cmp	 DWORD PTR _last$[ebp], 0
  00276	0f 84 ca fd ff
	ff		 je	 $LN28@deflate_st
$LN26@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00281	8b 45 e8	 mov	 eax, DWORD PTR _used$[ebp]
  00284	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00287	89 45 e8	 mov	 DWORD PTR _used$[ebp], eax

; 1737 :     if (used) {

  0028a	0f 84 36 01 00
	00		 je	 $LN16@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  00290	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00293	8b 55 e8	 mov	 edx, DWORD PTR _used$[ebp]
  00296	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  00299	72 42		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  0029b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029e	c7 80 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  002a8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ab	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002ae	52		 push	 edx
  002af	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b9	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  002bc	50		 push	 eax
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c0	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002c3	52		 push	 edx
  002c4	e8 00 00 00 00	 call	 _memcpy
  002c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1744 :             s->strstart = s->w_size;

  002cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002d5	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1745 :         }
; 1746 :         else {

  002d8	e9 9a 00 00 00	 jmp	 $LN14@deflate_st
$LN15@deflate_st:

; 1747 :             if (s->window_size - s->strstart <= used) {

  002dd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e3	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  002e6	2b 51 6c	 sub	 edx, DWORD PTR [ecx+108]
  002e9	3b 55 e8	 cmp	 edx, DWORD PTR _used$[ebp]
  002ec	77 56		 ja	 SHORT $LN13@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;

  002ee	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f4	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  002f7	2b 51 2c	 sub	 edx, DWORD PTR [ecx+44]
  002fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fd	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00300	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00303	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00306	52		 push	 edx
  00307	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0030d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00310	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  00313	51		 push	 ecx
  00314	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00317	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0031a	51		 push	 ecx
  0031b	e8 00 00 00 00	 call	 _memcpy
  00320	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1751 :                 if (s->matches < 2)

  00323	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00326	83 ba b0 16 00
	00 02		 cmp	 DWORD PTR [edx+5808], 2
  0032d	73 15		 jae	 SHORT $LN13@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  0032f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00332	8b 88 b0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5808]
  00338	83 c1 01	 add	 ecx, 1
  0033b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033e	89 8a b0 16 00
	00		 mov	 DWORD PTR [edx+5808], ecx
$LN13@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  00344	8b 45 e8	 mov	 eax, DWORD PTR _used$[ebp]
  00347	50		 push	 eax
  00348	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0034d	8b 02		 mov	 eax, DWORD PTR [edx]
  0034f	2b 45 e8	 sub	 eax, DWORD PTR _used$[ebp]
  00352	50		 push	 eax
  00353	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00356	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00359	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035c	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  0035f	52		 push	 edx
  00360	e8 00 00 00 00	 call	 _memcpy
  00365	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  00368	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0036e	03 55 e8	 add	 edx, DWORD PTR _used$[ebp]
  00371	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00374	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN14@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  00377	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0037a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00380	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  00383	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00386	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00389	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0038c	2b 82 b4 16 00
	00		 sub	 eax, DWORD PTR [edx+5812]
  00392	39 45 e8	 cmp	 DWORD PTR _used$[ebp], eax
  00395	76 14		 jbe	 SHORT $LN35@deflate_st
  00397	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0039a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0039d	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  003a0	2b 82 b4 16 00
	00		 sub	 eax, DWORD PTR [edx+5812]
  003a6	89 45 dc	 mov	 DWORD PTR tv257[ebp], eax
  003a9	eb 06		 jmp	 SHORT $LN36@deflate_st
$LN35@deflate_st:
  003ab	8b 4d e8	 mov	 ecx, DWORD PTR _used$[ebp]
  003ae	89 4d dc	 mov	 DWORD PTR tv257[ebp], ecx
$LN36@deflate_st:
  003b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003b4	8b 82 b4 16 00
	00		 mov	 eax, DWORD PTR [edx+5812]
  003ba	03 45 dc	 add	 eax, DWORD PTR tv257[ebp]
  003bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003c0	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax
$LN16@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  003c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003cc	8b 8a c0 16 00
	00		 mov	 ecx, DWORD PTR [edx+5824]
  003d2	3b 48 6c	 cmp	 ecx, DWORD PTR [eax+108]
  003d5	73 0f		 jae	 SHORT $LN11@deflate_st

; 1761 :         s->high_water = s->strstart;

  003d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003dd	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003e0	89 8a c0 16 00
	00		 mov	 DWORD PTR [edx+5824], ecx
$LN11@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  003e6	83 7d fc 00	 cmp	 DWORD PTR _last$[ebp], 0
  003ea	74 0a		 je	 SHORT $LN10@deflate_st

; 1765 :         return finish_done;

  003ec	b8 03 00 00 00	 mov	 eax, 3
  003f1	e9 7f 02 00 00	 jmp	 $LN29@deflate_st
$LN10@deflate_st:

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  003f6	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  003fa	74 29		 je	 SHORT $LN9@deflate_st
  003fc	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00400	74 23		 je	 SHORT $LN9@deflate_st
  00402	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00405	8b 02		 mov	 eax, DWORD PTR [edx]
  00407	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0040b	75 18		 jne	 SHORT $LN9@deflate_st
  0040d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00410	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00413	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00416	3b 42 5c	 cmp	 eax, DWORD PTR [edx+92]
  00419	75 0a		 jne	 SHORT $LN9@deflate_st

; 1770 :         return block_done;

  0041b	b8 01 00 00 00	 mov	 eax, 1
  00420	e9 50 02 00 00	 jmp	 $LN29@deflate_st
$LN9@deflate_st:

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  00425	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00428	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0042b	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0042e	2b 42 6c	 sub	 eax, DWORD PTR [edx+108]
  00431	83 e8 01	 sub	 eax, 1
  00434	89 45 f8	 mov	 DWORD PTR _have$[ebp], eax

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00437	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0043a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0043c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0043f	3b 45 f8	 cmp	 eax, DWORD PTR _have$[ebp]
  00442	0f 86 82 00 00
	00		 jbe	 $LN8@deflate_st
  00448	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044e	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00451	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00454	7c 74		 jl	 SHORT $LN8@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  00456	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00459	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0045c	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0045f	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  00462	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00465	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1777 :         s->strstart -= s->w_size;

  00468	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0046e	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00471	2b 48 2c	 sub	 ecx, DWORD PTR [eax+44]
  00474	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00477	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0047a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0047d	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00480	51		 push	 ecx
  00481	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00484	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00487	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048a	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  0048d	50		 push	 eax
  0048e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00491	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00494	50		 push	 eax
  00495	e8 00 00 00 00	 call	 _memcpy
  0049a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1779 :         if (s->matches < 2)

  0049d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a0	83 b9 b0 16 00
	00 02		 cmp	 DWORD PTR [ecx+5808], 2
  004a7	73 15		 jae	 SHORT $LN7@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  004a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ac	8b 82 b0 16 00
	00		 mov	 eax, DWORD PTR [edx+5808]
  004b2	83 c0 01	 add	 eax, 1
  004b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b8	89 81 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], eax
$LN7@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  004be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004c1	8b 45 f8	 mov	 eax, DWORD PTR _have$[ebp]
  004c4	03 42 2c	 add	 eax, DWORD PTR [edx+44]
  004c7	89 45 f8	 mov	 DWORD PTR _have$[ebp], eax
$LN8@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  004ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  004cf	8b 45 f8	 mov	 eax, DWORD PTR _have$[ebp]
  004d2	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  004d5	76 0b		 jbe	 SHORT $LN6@deflate_st

; 1784 :         have = s->strm->avail_in;

  004d7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004da	8b 11		 mov	 edx, DWORD PTR [ecx]
  004dc	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004df	89 45 f8	 mov	 DWORD PTR _have$[ebp], eax
$LN6@deflate_st:

; 1785 :     if (have) {

  004e2	83 7d f8 00	 cmp	 DWORD PTR _have$[ebp], 0
  004e6	74 2e		 je	 SHORT $LN5@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  004e8	8b 4d f8	 mov	 ecx, DWORD PTR _have$[ebp]
  004eb	51		 push	 ecx
  004ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ef	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004f2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f5	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  004f8	50		 push	 eax
  004f9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004fc	8b 02		 mov	 eax, DWORD PTR [edx]
  004fe	50		 push	 eax
  004ff	e8 00 00 00 00	 call	 _read_buf
  00504	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1787 :         s->strstart += have;

  00507	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0050a	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0050d	03 55 f8	 add	 edx, DWORD PTR _have$[ebp]
  00510	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00513	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN5@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  00516	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00519	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0051c	8b 81 c0 16 00
	00		 mov	 eax, DWORD PTR [ecx+5824]
  00522	3b 42 6c	 cmp	 eax, DWORD PTR [edx+108]
  00525	73 0f		 jae	 SHORT $LN4@deflate_st

; 1790 :         s->high_water = s->strstart;

  00527	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0052a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00530	89 81 c0 16 00
	00		 mov	 DWORD PTR [ecx+5824], eax
$LN4@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00536	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00539	8b 91 bc 16 00
	00		 mov	 edx, DWORD PTR [ecx+5820]
  0053f	83 c2 2a	 add	 edx, 42			; 0000002aH
  00542	c1 fa 03	 sar	 edx, 3
  00545	89 55 f8	 mov	 DWORD PTR _have$[ebp], edx

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  00548	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0054b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0054e	2b 4d f8	 sub	 ecx, DWORD PTR _have$[ebp]
  00551	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00557	76 09		 jbe	 SHORT $LN37@deflate_st
  00559	c7 45 d8 ff ff
	00 00		 mov	 DWORD PTR tv332[ebp], 65535 ; 0000ffffH
  00560	eb 0c		 jmp	 SHORT $LN38@deflate_st
$LN37@deflate_st:
  00562	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00565	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00568	2b 45 f8	 sub	 eax, DWORD PTR _have$[ebp]
  0056b	89 45 d8	 mov	 DWORD PTR tv332[ebp], eax
$LN38@deflate_st:
  0056e	8b 4d d8	 mov	 ecx, DWORD PTR tv332[ebp]
  00571	89 4d f8	 mov	 DWORD PTR _have$[ebp], ecx

; 1800 :     min_block = MIN(have, s->w_size);

  00574	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00577	8b 45 f8	 mov	 eax, DWORD PTR _have$[ebp]
  0057a	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  0057d	76 0b		 jbe	 SHORT $LN39@deflate_st
  0057f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00582	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00585	89 55 d4	 mov	 DWORD PTR tv336[ebp], edx
  00588	eb 06		 jmp	 SHORT $LN40@deflate_st
$LN39@deflate_st:
  0058a	8b 45 f8	 mov	 eax, DWORD PTR _have$[ebp]
  0058d	89 45 d4	 mov	 DWORD PTR tv336[ebp], eax
$LN40@deflate_st:
  00590	8b 4d d4	 mov	 ecx, DWORD PTR tv336[ebp]
  00593	89 4d f4	 mov	 DWORD PTR _min_block$[ebp], ecx

; 1801 :     left = s->strstart - s->block_start;

  00596	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00599	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0059c	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0059f	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  005a2	89 4d f0	 mov	 DWORD PTR _left$[ebp], ecx

; 1802 :     if (left >= min_block ||
; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {

  005a5	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  005a8	3b 55 f4	 cmp	 edx, DWORD PTR _min_block$[ebp]
  005ab	73 35		 jae	 SHORT $LN2@deflate_st
  005ad	83 7d f0 00	 cmp	 DWORD PTR _left$[ebp], 0
  005b1	75 0a		 jne	 SHORT $LN1@deflate_st
  005b3	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  005b7	0f 85 ae 00 00
	00		 jne	 $LN3@deflate_st
$LN1@deflate_st:
  005bd	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  005c1	0f 84 a4 00 00
	00		 je	 $LN3@deflate_st
  005c7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  005cc	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  005d0	0f 85 95 00 00
	00		 jne	 $LN3@deflate_st
  005d6	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  005d9	3b 55 f8	 cmp	 edx, DWORD PTR _have$[ebp]
  005dc	0f 87 89 00 00
	00		 ja	 $LN3@deflate_st
$LN2@deflate_st:

; 1805 :         len = MIN(left, have);

  005e2	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  005e5	3b 45 f8	 cmp	 eax, DWORD PTR _have$[ebp]
  005e8	76 08		 jbe	 SHORT $LN41@deflate_st
  005ea	8b 4d f8	 mov	 ecx, DWORD PTR _have$[ebp]
  005ed	89 4d d0	 mov	 DWORD PTR tv348[ebp], ecx
  005f0	eb 06		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  005f2	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  005f5	89 55 d0	 mov	 DWORD PTR tv348[ebp], edx
$LN42@deflate_st:
  005f8	8b 45 d0	 mov	 eax, DWORD PTR tv348[ebp]
  005fb	89 45 ec	 mov	 DWORD PTR _len$[ebp], eax

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&
; 1807 :                len == left ? 1 : 0;

  005fe	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00602	75 1c		 jne	 SHORT $LN43@deflate_st
  00604	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00607	8b 11		 mov	 edx, DWORD PTR [ecx]
  00609	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0060d	75 11		 jne	 SHORT $LN43@deflate_st
  0060f	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  00612	3b 45 f0	 cmp	 eax, DWORD PTR _left$[ebp]
  00615	75 09		 jne	 SHORT $LN43@deflate_st
  00617	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv353[ebp], 1
  0061e	eb 07		 jmp	 SHORT $LN44@deflate_st
$LN43@deflate_st:
  00620	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv353[ebp], 0
$LN44@deflate_st:
  00627	8b 4d cc	 mov	 ecx, DWORD PTR tv353[ebp]
  0062a	89 4d fc	 mov	 DWORD PTR _last$[ebp], ecx

; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  0062d	8b 55 fc	 mov	 edx, DWORD PTR _last$[ebp]
  00630	52		 push	 edx
  00631	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  00634	50		 push	 eax
  00635	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00638	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0063b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0063e	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00641	52		 push	 edx
  00642	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00645	51		 push	 ecx
  00646	e8 00 00 00 00	 call	 __tr_stored_block
  0064b	83 c4 10	 add	 esp, 16			; 00000010H

; 1809 :         s->block_start += len;

  0064e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00651	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00654	03 45 ec	 add	 eax, DWORD PTR _len$[ebp]
  00657	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0065a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1810 :         flush_pending(s->strm);

  0065d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00660	8b 02		 mov	 eax, DWORD PTR [edx]
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 _flush_pending
  00668	83 c4 04	 add	 esp, 4
$LN3@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  0066b	8b 45 fc	 mov	 eax, DWORD PTR _last$[ebp]
  0066e	f7 d8		 neg	 eax
  00670	1b c0		 sbb	 eax, eax
  00672	83 e0 02	 and	 eax, 2
$LN29@deflate_st:

; 1815 : }

  00675	8b e5		 mov	 esp, ebp
  00677	5d		 pop	 ebp
  00678	c3		 ret	 0
_deflate_stored ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fill_window
_TEXT	SEGMENT
_curr$78223 = -24					; size = 4
_init$78225 = -20					; size = 4
_str$78215 = -16					; size = 4
_wsize$ = -12						; size = 4
_more$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC					; COMDAT

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000d	89 4d f4	 mov	 DWORD PTR _wsize$[ebp], ecx
$LN20@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00010	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00013	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00016	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00019	2b 48 74	 sub	 ecx, DWORD PTR [eax+116]
  0001c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001f	2b 4a 6c	 sub	 ecx, DWORD PTR [edx+108]
  00022	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {

  00025	33 c0		 xor	 eax, eax
  00027	74 2f		 je	 SHORT $LN17@fill_windo

; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

  00029	83 7d f8 00	 cmp	 DWORD PTR _more$[ebp], 0
  0002d	75 1a		 jne	 SHORT $LN16@fill_windo
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00032	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  00036	75 11		 jne	 SHORT $LN16@fill_windo
  00038	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003b	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  0003f	75 08		 jne	 SHORT $LN16@fill_windo

; 1497 :                 more = wsize;

  00041	8b 45 f4	 mov	 eax, DWORD PTR _wsize$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR _more$[ebp], eax
  00047	eb 0f		 jmp	 SHORT $LN17@fill_windo
$LN16@fill_windo:

; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {

  00049	83 7d f8 ff	 cmp	 DWORD PTR _more$[ebp], -1
  0004d	75 09		 jne	 SHORT $LN17@fill_windo

; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  00052	83 e9 01	 sub	 ecx, 1
  00055	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx
$LN17@fill_windo:

; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00058	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00061	8d 94 01 fa fe
	ff ff		 lea	 edx, DWORD PTR [ecx+eax-262]
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	39 50 6c	 cmp	 DWORD PTR [eax+108], edx
  0006e	72 62		 jb	 SHORT $LN13@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00070	8b 4d f4	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00073	2b 4d f8	 sub	 ecx, DWORD PTR _more$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007a	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0007d	03 45 f4	 add	 eax, DWORD PTR _wsize$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00084	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 _memcpy
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1513 :             s->match_start -= wsize;

  00090	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00093	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00096	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	89 4a 70	 mov	 DWORD PTR [edx+112], ecx

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  0009f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a2	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000a5	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1515 :             s->block_start -= (long) wsize;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000b4	2b 4d f4	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000b7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ba	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1516 :             slide_hash(s);

  000bd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _slide_hash
  000c6	83 c4 04	 add	 esp, 4

; 1517 :             more += wsize;

  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  000cc	03 4d f4	 add	 ecx, DWORD PTR _wsize$[ebp]
  000cf	89 4d f8	 mov	 DWORD PTR _more$[ebp], ecx
$LN13@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	8b 02		 mov	 eax, DWORD PTR [edx]
  000d7	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000db	75 05		 jne	 SHORT $LN12@fill_windo
  000dd	e9 63 01 00 00	 jmp	 $LN18@fill_windo
$LN12@fill_windo:

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _more$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e9	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ef	03 41 6c	 add	 eax, DWORD PTR [ecx+108]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f5	03 42 74	 add	 eax, DWORD PTR [edx+116]
  000f8	50		 push	 eax
  000f9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 _read_buf
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 1535 :         s->lookahead += n;

  0010a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010d	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00110	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00116	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00119	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011c	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00122	03 81 b4 16 00
	00		 add	 eax, DWORD PTR [ecx+5812]
  00128	83 f8 03	 cmp	 eax, 3
  0012b	0f 82 f9 00 00
	00		 jb	 $LN19@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00131	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00134	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00137	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0013a	2b 88 b4 16 00
	00		 sub	 ecx, DWORD PTR [eax+5812]
  00140	89 4d f0	 mov	 DWORD PTR _str$78215[ebp], ecx

; 1540 :             s->ins_h = s->window[str];

  00143	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00146	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00149	8b 4d f0	 mov	 ecx, DWORD PTR _str$78215[ebp]
  0014c	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00150	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00153	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  00156	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00159	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0015c	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  0015f	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00162	d3 e0		 shl	 eax, cl
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00167	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0016a	8b 4d f0	 mov	 ecx, DWORD PTR _str$78215[ebp]
  0016d	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  00172	33 c2		 xor	 eax, edx
  00174	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00177	23 41 54	 and	 eax, DWORD PTR [ecx+84]
  0017a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017d	89 42 48	 mov	 DWORD PTR [edx+72], eax
$LN10@fill_windo:

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  00180	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00183	83 b8 b4 16 00
	00 00		 cmp	 DWORD PTR [eax+5812], 0
  0018a	0f 84 9a 00 00
	00		 je	 $LN19@fill_windo

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00190	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00193	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00196	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00199	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  0019c	d3 e0		 shl	 eax, cl
  0019e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a1	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001a4	8b 4d f0	 mov	 ecx, DWORD PTR _str$78215[ebp]
  001a7	0f b6 54 0a 02	 movzx	 edx, BYTE PTR [edx+ecx+2]
  001ac	33 c2		 xor	 eax, edx
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b1	23 41 54	 and	 eax, DWORD PTR [ecx+84]
  001b4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b7	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  001ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001bd	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c3	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c9	8b 75 f0	 mov	 esi, DWORD PTR _str$78215[ebp]
  001cc	23 72 34	 and	 esi, DWORD PTR [edx+52]
  001cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d2	8b 52 40	 mov	 edx, DWORD PTR [edx+64]
  001d5	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]
  001d9	66 89 04 72	 mov	 WORD PTR [edx+esi*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  001dd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e0	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  001e3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e6	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  001e9	66 8b 45 f0	 mov	 ax, WORD PTR _str$78215[ebp]
  001ed	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1551 :                 str++;

  001f1	8b 4d f0	 mov	 ecx, DWORD PTR _str$78215[ebp]
  001f4	83 c1 01	 add	 ecx, 1
  001f7	89 4d f0	 mov	 DWORD PTR _str$78215[ebp], ecx

; 1552 :                 s->insert--;

  001fa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001fd	8b 82 b4 16 00
	00		 mov	 eax, DWORD PTR [edx+5812]
  00203	83 e8 01	 sub	 eax, 1
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00209	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  0020f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00212	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00215	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00218	03 81 b4 16 00
	00		 add	 eax, DWORD PTR [ecx+5812]
  0021e	83 f8 03	 cmp	 eax, 3
  00221	73 02		 jae	 SHORT $LN8@fill_windo

; 1554 :                     break;

  00223	eb 05		 jmp	 SHORT $LN19@fill_windo
$LN8@fill_windo:

; 1555 :             }

  00225	e9 56 ff ff ff	 jmp	 $LN10@fill_windo
$LN19@fill_windo:

; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  0022a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022d	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00234	73 0f		 jae	 SHORT $LN18@fill_windo
  00236	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00239	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0023f	0f 85 cb fd ff
	ff		 jne	 $LN20@fill_windo
$LN18@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  00245	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00248	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0024b	8b 8a c0 16 00
	00		 mov	 ecx, DWORD PTR [edx+5824]
  00251	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00254	0f 83 e7 00 00
	00		 jae	 $LN21@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0025a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00260	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00263	03 41 74	 add	 eax, DWORD PTR [ecx+116]
  00266	89 45 e8	 mov	 DWORD PTR _curr$78223[ebp], eax

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00269	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026c	8b 82 c0 16 00
	00		 mov	 eax, DWORD PTR [edx+5824]
  00272	3b 45 e8	 cmp	 eax, DWORD PTR _curr$78223[ebp]
  00275	73 48		 jae	 SHORT $LN5@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;

  00277	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0027d	2b 55 e8	 sub	 edx, DWORD PTR _curr$78223[ebp]
  00280	89 55 ec	 mov	 DWORD PTR _init$78225[ebp], edx

; 1579 :             if (init > WIN_INIT)

  00283	81 7d ec 02 01
	00 00		 cmp	 DWORD PTR _init$78225[ebp], 258 ; 00000102H
  0028a	76 07		 jbe	 SHORT $LN4@fill_windo

; 1580 :                 init = WIN_INIT;

  0028c	c7 45 ec 02 01
	00 00		 mov	 DWORD PTR _init$78225[ebp], 258 ; 00000102H
$LN4@fill_windo:

; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  00293	8b 45 ec	 mov	 eax, DWORD PTR _init$78225[ebp]
  00296	50		 push	 eax
  00297	6a 00		 push	 0
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0029c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0029f	03 55 e8	 add	 edx, DWORD PTR _curr$78223[ebp]
  002a2	52		 push	 edx
  002a3	e8 00 00 00 00	 call	 _memset
  002a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  002ab	8b 45 e8	 mov	 eax, DWORD PTR _curr$78223[ebp]
  002ae	03 45 ec	 add	 eax, DWORD PTR _init$78225[ebp]
  002b1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b4	89 81 c0 16 00
	00		 mov	 DWORD PTR [ecx+5824], eax
  002ba	e9 82 00 00 00	 jmp	 $LN21@fill_windo
$LN5@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  002bf	8b 55 e8	 mov	 edx, DWORD PTR _curr$78223[ebp]
  002c2	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	39 90 c0 16 00
	00		 cmp	 DWORD PTR [eax+5824], edx
  002d1	73 6e		 jae	 SHORT $LN21@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  002d3	8b 4d e8	 mov	 ecx, DWORD PTR _curr$78223[ebp]
  002d6	81 c1 02 01 00
	00		 add	 ecx, 258		; 00000102H
  002dc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002df	2b 8a c0 16 00
	00		 sub	 ecx, DWORD PTR [edx+5824]
  002e5	89 4d ec	 mov	 DWORD PTR _init$78225[ebp], ecx

; 1590 :             if (init > s->window_size - s->high_water)

  002e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ee	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  002f1	2b 91 c0 16 00
	00		 sub	 edx, DWORD PTR [ecx+5824]
  002f7	39 55 ec	 cmp	 DWORD PTR _init$78225[ebp], edx
  002fa	76 12		 jbe	 SHORT $LN1@fill_windo

; 1591 :                 init = s->window_size - s->high_water;

  002fc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00302	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00305	2b 91 c0 16 00
	00		 sub	 edx, DWORD PTR [ecx+5824]
  0030b	89 55 ec	 mov	 DWORD PTR _init$78225[ebp], edx
$LN1@fill_windo:

; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  0030e	8b 45 ec	 mov	 eax, DWORD PTR _init$78225[ebp]
  00311	50		 push	 eax
  00312	6a 00		 push	 0
  00314	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00317	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0031a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031d	03 90 c0 16 00
	00		 add	 edx, DWORD PTR [eax+5824]
  00323	52		 push	 edx
  00324	e8 00 00 00 00	 call	 _memset
  00329	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  0032c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032f	8b 91 c0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5824]
  00335	03 55 ec	 add	 edx, DWORD PTR _init$78225[ebp]
  00338	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0033b	89 90 c0 16 00
	00		 mov	 DWORD PTR [eax+5824], edx
$LN21@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00341	5e		 pop	 esi
  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
PUBLIC	_deflateReset@4
; Function compile flags: /Odtp
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000d	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 511  :     if (ret == Z_OK)

  00010	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00014	75 0f		 jne	 SHORT $LN1@deflateRes@2

; 512  :         lm_init(strm->state);

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00019	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 _lm_init
  00022	83 c4 04	 add	 esp, 4
$LN1@deflateRes@2:

; 513  :     return ret;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 514  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetDictionary@12
; Function compile flags: /Odtp
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_str$ = -24						; size = 4
_avail$ = -20						; size = 4
_next$ = -16						; size = 4
_wrap$ = -12						; size = 4
_s$ = -8						; size = 4
_n$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00007	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 06		 jne	 SHORT $LN12@deflateSet@2
  00017	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0001b	75 0a		 jne	 SHORT $LN13@deflateSet@2
$LN12@deflateSet@2:

; 388  :         return Z_STREAM_ERROR;

  0001d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00022	e9 37 02 00 00	 jmp	 $LN14@deflateSet@2
$LN13@deflateSet@2:

; 389  :     s = strm->state;

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002d	89 55 f8	 mov	 DWORD PTR _s$[ebp], edx

; 390  :     wrap = s->wrap;

  00030	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00036	89 4d f4	 mov	 DWORD PTR _wrap$[ebp], ecx

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  00039	83 7d f4 02	 cmp	 DWORD PTR _wrap$[ebp], 2
  0003d	74 18		 je	 SHORT $LN10@deflateSet@2
  0003f	83 7d f4 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00043	75 09		 jne	 SHORT $LN9@deflateSet@2
  00045	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00048	83 7a 04 2a	 cmp	 DWORD PTR [edx+4], 42	; 0000002aH
  0004c	75 09		 jne	 SHORT $LN10@deflateSet@2
$LN9@deflateSet@2:
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00051	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00055	74 0a		 je	 SHORT $LN11@deflateSet@2
$LN10@deflateSet@2:

; 392  :         return Z_STREAM_ERROR;

  00057	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005c	e9 fd 01 00 00	 jmp	 $LN14@deflateSet@2
$LN11@deflateSet@2:

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  00061	83 7d f4 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00065	75 1a		 jne	 SHORT $LN8@deflateSet@2

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00067	8b 4d 10	 mov	 ecx, DWORD PTR _dictLength$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _dictionary$[ebp]
  0006e	52		 push	 edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00072	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _adler32@12
  0007b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0007e	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN8@deflateSet@2:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  00081	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00084	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0008e	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  00091	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  00094	72 6e		 jb	 SHORT $LN7@deflateSet@2

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  00096	83 7d f4 00	 cmp	 DWORD PTR _wrap$[ebp], 0
  0009a	75 50		 jne	 SHORT $LN6@deflateSet@2

; 402  :             CLEAR_HASH(s);

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0009f	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000a5	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000a8	33 d2		 xor	 edx, edx
  000aa	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  000af	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000b2	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000b5	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  000b9	52		 push	 edx
  000ba	6a 00		 push	 0
  000bc	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000bf	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _memset
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  :             s->strstart = 0;

  000cb	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000ce	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 404  :             s->block_start = 0L;

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000d8	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 405  :             s->insert = 0;

  000df	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000e2	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0
$LN6@deflateSet@2:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000ec	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  000f2	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  000f5	03 45 0c	 add	 eax, DWORD PTR _dictionary$[ebp]
  000f8	89 45 0c	 mov	 DWORD PTR _dictionary$[ebp], eax

; 408  :         dictLength = s->w_size;

  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000fe	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00101	89 55 10	 mov	 DWORD PTR _dictLength$[ebp], edx
$LN7@deflateSet@2:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  00104	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00107	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010a	89 4d ec	 mov	 DWORD PTR _avail$[ebp], ecx

; 413  :     next = strm->next_in;

  0010d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	89 45 f0	 mov	 DWORD PTR _next$[ebp], eax

; 414  :     strm->avail_in = dictLength;

  00115	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00118	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  0011b	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 415  :     strm->next_in = (z_const Bytef *)dictionary;

  0011e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00121	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00124	89 08		 mov	 DWORD PTR [eax], ecx

; 416  :     fill_window(s);

  00126	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00129	52		 push	 edx
  0012a	e8 00 00 00 00	 call	 _fill_window
  0012f	83 c4 04	 add	 esp, 4
$LN5@deflateSet@2:

; 417  :     while (s->lookahead >= MIN_MATCH) {

  00132	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00135	83 78 74 03	 cmp	 DWORD PTR [eax+116], 3
  00139	0f 82 ae 00 00
	00		 jb	 $LN4@deflateSet@2

; 418  :         str = s->strstart;

  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00142	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00145	89 55 e8	 mov	 DWORD PTR _str$[ebp], edx

; 419  :         n = s->lookahead - (MIN_MATCH-1);

  00148	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0014b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0014e	83 e9 02	 sub	 ecx, 2
  00151	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN3@deflateSet@2:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00154	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00157	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0015a	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0015d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00160	d3 e2		 shl	 edx, cl
  00162	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00165	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00168	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  0016b	0f b6 4c 01 02	 movzx	 ecx, BYTE PTR [ecx+eax+2]
  00170	33 d1		 xor	 edx, ecx
  00172	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00175	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00178	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0017b	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  0017e	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00181	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00184	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00187	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0018a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0018d	8b 75 e8	 mov	 esi, DWORD PTR _str$[ebp]
  00190	23 71 34	 and	 esi, DWORD PTR [ecx+52]
  00193	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00196	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00199	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  0019d	66 89 14 71	 mov	 WORD PTR [ecx+esi*2], dx

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  001a1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001a4	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001a7	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001aa	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001ad	66 8b 55 e8	 mov	 dx, WORD PTR _str$[ebp]
  001b1	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 426  :             str++;

  001b5	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  001b8	83 c0 01	 add	 eax, 1
  001bb	89 45 e8	 mov	 DWORD PTR _str$[ebp], eax

; 427  :         } while (--n);

  001be	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001c1	83 e9 01	 sub	 ecx, 1
  001c4	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
  001c7	75 8b		 jne	 SHORT $LN3@deflateSet@2

; 428  :         s->strstart = str;

  001c9	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001cc	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  001cf	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 429  :         s->lookahead = MIN_MATCH-1;

  001d2	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  001d5	c7 41 74 02 00
	00 00		 mov	 DWORD PTR [ecx+116], 2

; 430  :         fill_window(s);

  001dc	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001df	52		 push	 edx
  001e0	e8 00 00 00 00	 call	 _fill_window
  001e5	83 c4 04	 add	 esp, 4

; 431  :     }

  001e8	e9 45 ff ff ff	 jmp	 $LN5@deflateSet@2
$LN4@deflateSet@2:

; 432  :     s->strstart += s->lookahead;

  001ed	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001f0	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001f3	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001f6	03 4a 74	 add	 ecx, DWORD PTR [edx+116]
  001f9	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001fc	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 433  :     s->block_start = (long)s->strstart;

  001ff	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00202	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00205	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00208	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 434  :     s->insert = s->lookahead;

  0020b	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00211	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00214	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 435  :     s->lookahead = 0;

  0021a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0021d	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;

  00224	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00227	c7 42 78 02 00
	00 00		 mov	 DWORD PTR [edx+120], 2
  0022e	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00231	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 437  :     s->match_available = 0;

  00238	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0023b	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 438  :     strm->next_in = next;

  00242	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00245	8b 45 f0	 mov	 eax, DWORD PTR _next$[ebp]
  00248	89 02		 mov	 DWORD PTR [edx], eax

; 439  :     strm->avail_in = avail;

  0024a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0024d	8b 55 ec	 mov	 edx, DWORD PTR _avail$[ebp]
  00250	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 440  :     s->wrap = wrap;

  00253	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00256	8b 4d f4	 mov	 ecx, DWORD PTR _wrap$[ebp]
  00259	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 441  :     return Z_OK;

  0025c	33 c0		 xor	 eax, eax
$LN14@deflateSet@2:

; 442  : }

  0025e	5e		 pop	 esi
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
PUBLIC	_deflateInit2_@32
; Function compile flags: /Odtp
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_wrap$ = -12						; size = 4
_overlay$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;

  00006	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 1

; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 261  :         stream_size != sizeof(z_stream)) {

  0000d	83 7d 20 00	 cmp	 DWORD PTR _version$[ebp], 0
  00011	74 17		 je	 SHORT $LN14@deflateIni
  00013	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00016	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00019	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9
  00020	3b ca		 cmp	 ecx, edx
  00022	75 06		 jne	 SHORT $LN14@deflateIni
  00024	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00028	74 0a		 je	 SHORT $LN15@deflateIni
$LN14@deflateIni:

; 262  :         return Z_VERSION_ERROR;

  0002a	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0002f	e9 13 03 00 00	 jmp	 $LN16@deflateIni
$LN15@deflateIni:

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00034	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00038	75 0a		 jne	 SHORT $LN13@deflateIni
  0003a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0003f	e9 03 03 00 00	 jmp	 $LN16@deflateIni
$LN13@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;

  00044	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00047	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 267  :     if (strm->zalloc == (alloc_func)0) {

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00051	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00055	75 14		 jne	 SHORT $LN12@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00057	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0005a	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  00061	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00064	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN12@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0006e	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00072	75 0a		 jne	 SHORT $LN11@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  00074	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00077	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], OFFSET _zcfree
$LN11@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0007e	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00082	75 07		 jne	 SHORT $LN10@deflateIni
  00084	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN10@deflateIni:

; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0008b	83 7d 14 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  0008f	7d 11		 jge	 SHORT $LN9@deflateIni

; 289  :         wrap = 0;

  00091	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 0

; 290  :         windowBits = -windowBits;

  00098	8b 45 14	 mov	 eax, DWORD PTR _windowBits$[ebp]
  0009b	f7 d8		 neg	 eax
  0009d	89 45 14	 mov	 DWORD PTR _windowBits$[ebp], eax
  000a0	eb 16		 jmp	 SHORT $LN8@deflateIni
$LN9@deflateIni:

; 291  :     }
; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  000a2	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  000a6	7e 10		 jle	 SHORT $LN8@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  000a8	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 2

; 295  :         windowBits -= 16;

  000af	8b 4d 14	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  000b2	83 e9 10	 sub	 ecx, 16			; 00000010H
  000b5	89 4d 14	 mov	 DWORD PTR _windowBits$[ebp], ecx
$LN8@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  000b8	83 7d 18 01	 cmp	 DWORD PTR _memLevel$[ebp], 1
  000bc	7c 3c		 jl	 SHORT $LN5@deflateIni
  000be	83 7d 18 09	 cmp	 DWORD PTR _memLevel$[ebp], 9
  000c2	7f 36		 jg	 SHORT $LN5@deflateIni
  000c4	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  000c8	75 30		 jne	 SHORT $LN5@deflateIni
  000ca	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  000ce	7c 2a		 jl	 SHORT $LN5@deflateIni
  000d0	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  000d4	7f 24		 jg	 SHORT $LN5@deflateIni
  000d6	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  000da	7c 1e		 jl	 SHORT $LN5@deflateIni
  000dc	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  000e0	7f 18		 jg	 SHORT $LN5@deflateIni
  000e2	83 7d 1c 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  000e6	7c 12		 jl	 SHORT $LN5@deflateIni
  000e8	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000ec	7f 0c		 jg	 SHORT $LN5@deflateIni
  000ee	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  000f2	75 10		 jne	 SHORT $LN6@deflateIni
  000f4	83 7d f4 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  000f8	74 0a		 je	 SHORT $LN6@deflateIni
$LN5@deflateIni:

; 301  :         return Z_STREAM_ERROR;

  000fa	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000ff	e9 43 02 00 00	 jmp	 $LN16@deflateIni
$LN6@deflateIni:

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  00104	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  00108	75 07		 jne	 SHORT $LN4@deflateIni
  0010a	c7 45 14 09 00
	00 00		 mov	 DWORD PTR _windowBits$[ebp], 9
$LN4@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  00111	68 c4 16 00 00	 push	 5828			; 000016c4H
  00116	6a 01		 push	 1
  00118	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0011b	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0011e	50		 push	 eax
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00122	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00125	ff d2		 call	 edx
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  0012d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00131	75 0a		 jne	 SHORT $LN3@deflateIni
  00133	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00138	e9 0a 02 00 00	 jmp	 $LN16@deflateIni
$LN3@deflateIni:

; 306  :     strm->state = (struct internal_state FAR *)s;

  0013d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00140	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00143	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 307  :     s->strm = strm;

  00146	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00149	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0014c	89 02		 mov	 DWORD PTR [edx], eax

; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00151	c7 41 04 2a 00
	00 00		 mov	 DWORD PTR [ecx+4], 42	; 0000002aH

; 309  : 
; 310  :     s->wrap = wrap;

  00158	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0015b	8b 45 f4	 mov	 eax, DWORD PTR _wrap$[ebp]
  0015e	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 311  :     s->gzhead = Z_NULL;

  00161	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00164	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 312  :     s->w_bits = (uInt)windowBits;

  0016b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0016e	8b 45 14	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00171	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 313  :     s->w_size = 1 << s->w_bits;

  00174	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00177	ba 01 00 00 00	 mov	 edx, 1
  0017c	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0017f	d3 e2		 shl	 edx, cl
  00181	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00184	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 314  :     s->w_mask = s->w_size - 1;

  00187	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0018a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0018d	83 ea 01	 sub	 edx, 1
  00190	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00193	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  00196	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00199	83 c1 07	 add	 ecx, 7
  0019c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0019f	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 317  :     s->hash_size = 1 << s->hash_bits;

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001a5	ba 01 00 00 00	 mov	 edx, 1
  001aa	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001ad	d3 e2		 shl	 edx, cl
  001af	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001b2	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 318  :     s->hash_mask = s->hash_size - 1;

  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001b8	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  001bb	83 ea 01	 sub	 edx, 1
  001be	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001c1	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  001c4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001c7	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  001ca	83 c0 02	 add	 eax, 2
  001cd	33 d2		 xor	 edx, edx
  001cf	b9 03 00 00 00	 mov	 ecx, 3
  001d4	f7 f1		 div	 ecx
  001d6	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001d9	89 42 58	 mov	 DWORD PTR [edx+88], eax

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  001dc	6a 02		 push	 2
  001de	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001e1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001e4	51		 push	 ecx
  001e5	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  001e8	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  001eb	50		 push	 eax
  001ec	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  001ef	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001f2	ff d2		 call	 edx
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001fa	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  001fd	6a 02		 push	 2
  001ff	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00202	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00205	50		 push	 eax
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00209	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0020c	52		 push	 edx
  0020d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00210	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00213	ff d1		 call	 ecx
  00215	83 c4 0c	 add	 esp, 12			; 0000000cH
  00218	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0021b	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0021e	6a 02		 push	 2
  00220	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00223	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00226	51		 push	 ecx
  00227	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0022a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0022d	50		 push	 eax
  0022e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00231	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00234	ff d2		 call	 edx
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH
  00239	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0023c	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */

  0023f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00242	c7 82 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5824], 0

; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0024c	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0024f	83 c1 06	 add	 ecx, 6
  00252	b8 01 00 00 00	 mov	 eax, 1
  00257	d3 e0		 shl	 eax, cl
  00259	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0025c	89 81 9c 16 00
	00		 mov	 DWORD PTR [ecx+5788], eax

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00262	6a 04		 push	 4
  00264	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00267	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  0026d	50		 push	 eax
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00271	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00274	52		 push	 edx
  00275	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00278	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0027b	ff d1		 call	 ecx
  0027d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00280	89 45 f8	 mov	 DWORD PTR _overlay$[ebp], eax

; 330  :     s->pending_buf = (uchf *) overlay;

  00283	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00286	8b 45 f8	 mov	 eax, DWORD PTR _overlay$[ebp]
  00289	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  0028c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0028f	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  00295	c1 e2 02	 shl	 edx, 2
  00298	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0029b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 334  :         s->pending_buf == Z_NULL) {

  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002a1	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  002a5	74 1b		 je	 SHORT $LN1@deflateIni
  002a7	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002aa	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  002ae	74 12		 je	 SHORT $LN1@deflateIni
  002b0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002b3	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  002b7	74 09		 je	 SHORT $LN1@deflateIni
  002b9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002bc	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  002c0	75 26		 jne	 SHORT $LN2@deflateIni
$LN1@deflateIni:

; 335  :         s->status = FINISH_STATE;

  002c2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002c5	c7 42 04 9a 02
	00 00		 mov	 DWORD PTR [edx+4], 666	; 0000029aH

; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  002cc	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  002cf	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _z_errmsg+24
  002d5	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 337  :         deflateEnd (strm);

  002d8	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  002db	52		 push	 edx
  002dc	e8 00 00 00 00	 call	 _deflateEnd@4

; 338  :         return Z_MEM_ERROR;

  002e1	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  002e6	eb 5f		 jmp	 SHORT $LN16@deflateIni
$LN2@deflateIni:

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  002e8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002eb	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  002f1	d1 e9		 shr	 ecx, 1
  002f3	8b 55 f8	 mov	 edx, DWORD PTR _overlay$[ebp]
  002f6	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002fc	89 81 a4 16 00
	00		 mov	 DWORD PTR [ecx+5796], eax

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

  00302	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00305	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  0030b	6b c0 03	 imul	 eax, 3
  0030e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00311	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00314	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00317	89 82 98 16 00
	00		 mov	 DWORD PTR [edx+5784], eax

; 342  : 
; 343  :     s->level = level;

  0031d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00320	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  00323	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx

; 344  :     s->strategy = strategy;

  00329	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0032c	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  0032f	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 345  :     s->method = (Byte)method;

  00335	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00338	8a 55 10	 mov	 dl, BYTE PTR _method$[ebp]
  0033b	88 51 24	 mov	 BYTE PTR [ecx+36], dl

; 346  : 
; 347  :     return deflateReset(strm);

  0033e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 _deflateReset@4
$LN16@deflateIni:

; 348  : }

  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
PUBLIC	_deflateInit_@16
; Function compile flags: /Odtp
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);

  00003	8b 45 14	 mov	 eax, DWORD PTR _stream_size$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _version$[ebp]
  0000a	51		 push	 ecx
  0000b	6a 00		 push	 0
  0000d	6a 08		 push	 8
  0000f	6a 0f		 push	 15			; 0000000fH
  00011	6a 08		 push	 8
  00013	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _deflateInit2_@32

; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
; Function compile flags: /Odtp
;	COMDAT _deflate_huff
_TEXT	SEGMENT
tv193 = -20						; size = 4
tv173 = -16						; size = 4
tv153 = -12						; size = 4
_cc$78450 = -5						; size = 1
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC					; COMDAT

; 2133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
$LN11@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0000d	75 27		 jne	 SHORT $LN9@deflate_hu

; 2139 :             fill_window(s);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _fill_window
  00018	83 c4 04	 add	 esp, 4

; 2140 :             if (s->lookahead == 0) {

  0001b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001e	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00022	75 12		 jne	 SHORT $LN9@deflate_hu

; 2141 :                 if (flush == Z_NO_FLUSH)

  00024	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00028	75 07		 jne	 SHORT $LN7@deflate_hu

; 2142 :                     return need_more;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 3d 02 00 00	 jmp	 $LN12@deflate_hu
$LN7@deflate_hu:

; 2143 :                 break;      /* flush the current block */

  00031	e9 35 01 00 00	 jmp	 $LN10@deflate_hu
$LN9@deflate_hu:

; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;

  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00043	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00046	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0004c	8a 14 0a	 mov	 dl, BYTE PTR [edx+ecx]
  0004f	88 55 fb	 mov	 BYTE PTR _cc$78450[ebp], dl
  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  00064	33 d2		 xor	 edx, edx
  00066	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006d	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00073	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00076	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0007c	8a 55 fb	 mov	 dl, BYTE PTR _cc$78450[ebp]
  0007f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00082	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00085	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0008b	83 c1 01	 add	 ecx, 1
  0008e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00091	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  00097	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$78450[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  000a6	66 83 c2 01	 add	 dx, 1
  000aa	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$78450[ebp]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b1	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  000b9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bc	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  000c2	83 e8 01	 sub	 eax, 1
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c8	33 d2		 xor	 edx, edx
  000ca	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  000d0	0f 94 c2	 sete	 dl
  000d3	89 55 fc	 mov	 DWORD PTR _bflush$[ebp], edx

; 2151 :         s->lookahead--;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000dc	83 e9 01	 sub	 ecx, 1
  000df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e2	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2152 :         s->strstart++;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e8	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000eb	83 c1 01	 add	 ecx, 1
  000ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f1	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  000f4	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  000f8	74 6c		 je	 SHORT $LN6@deflate_hu
  000fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fd	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00101	7c 11		 jl	 SHORT $LN14@deflate_hu
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00106	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00109	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010c	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0010f	89 55 f4	 mov	 DWORD PTR tv153[ebp], edx
  00112	eb 07		 jmp	 SHORT $LN15@deflate_hu
$LN14@deflate_hu:
  00114	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN15@deflate_hu:
  0011b	6a 00		 push	 0
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00120	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00123	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00126	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00129	50		 push	 eax
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR tv153[ebp]
  0012d	51		 push	 ecx
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 __tr_flush_block
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00140	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00143	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00146	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 _flush_pending
  00151	83 c4 04	 add	 esp, 4
  00154	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0015d	75 07		 jne	 SHORT $LN6@deflate_hu
  0015f	33 c0		 xor	 eax, eax
  00161	e9 08 01 00 00	 jmp	 $LN12@deflate_hu
$LN6@deflate_hu:

; 2154 :     }

  00166	e9 9b fe ff ff	 jmp	 $LN11@deflate_hu
$LN10@deflate_hu:

; 2155 :     s->insert = 0;

  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0016e	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  00178	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0017c	75 76		 jne	 SHORT $LN4@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  0017e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00181	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  00185	7c 11		 jl	 SHORT $LN16@deflate_hu
  00187	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0018d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00190	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  00193	89 4d f0	 mov	 DWORD PTR tv173[ebp], ecx
  00196	eb 07		 jmp	 SHORT $LN17@deflate_hu
$LN16@deflate_hu:
  00198	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN17@deflate_hu:
  0019f	6a 01		 push	 1
  001a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a7	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  001aa	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  001ad	52		 push	 edx
  001ae	8b 45 f0	 mov	 eax, DWORD PTR tv173[ebp]
  001b1	50		 push	 eax
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 __tr_flush_block
  001bb	83 c4 10	 add	 esp, 16			; 00000010H
  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c4	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001c7	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  001ca	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cd	8b 02		 mov	 eax, DWORD PTR [edx]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _flush_pending
  001d5	83 c4 04	 add	 esp, 4
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001db	8b 11		 mov	 edx, DWORD PTR [ecx]
  001dd	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  001e1	75 0a		 jne	 SHORT $LN3@deflate_hu
  001e3	b8 02 00 00 00	 mov	 eax, 2
  001e8	e9 81 00 00 00	 jmp	 $LN12@deflate_hu
$LN3@deflate_hu:

; 2158 :         return finish_done;

  001ed	b8 03 00 00 00	 mov	 eax, 3
  001f2	eb 7a		 jmp	 SHORT $LN12@deflate_hu
$LN4@deflate_hu:

; 2159 :     }
; 2160 :     if (s->last_lit)

  001f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f7	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  001fe	74 69		 je	 SHORT $LN2@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00200	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00203	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00207	7c 11		 jl	 SHORT $LN18@deflate_hu
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0020f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00212	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00215	89 45 ec	 mov	 DWORD PTR tv193[ebp], eax
  00218	eb 07		 jmp	 SHORT $LN19@deflate_hu
$LN18@deflate_hu:
  0021a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN19@deflate_hu:
  00221	6a 00		 push	 0
  00223	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00226	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00229	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0022c	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  0022f	51		 push	 ecx
  00230	8b 55 ec	 mov	 edx, DWORD PTR tv193[ebp]
  00233	52		 push	 edx
  00234	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 __tr_flush_block
  0023d	83 c4 10	 add	 esp, 16			; 00000010H
  00240	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00243	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00246	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00249	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00251	52		 push	 edx
  00252	e8 00 00 00 00	 call	 _flush_pending
  00257	83 c4 04	 add	 esp, 4
  0025a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025f	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00263	75 04		 jne	 SHORT $LN2@deflate_hu
  00265	33 c0		 xor	 eax, eax
  00267	eb 05		 jmp	 SHORT $LN12@deflate_hu
$LN2@deflate_hu:

; 2162 :     return block_done;

  00269	b8 01 00 00 00	 mov	 eax, 1
$LN12@deflate_hu:

; 2163 : }

  0026e	8b e5		 mov	 esp, ebp
  00270	5d		 pop	 ebp
  00271	c3		 ret	 0
_deflate_huff ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv324 = -44						; size = 4
tv304 = -40						; size = 4
tv284 = -36						; size = 4
tv210 = -32						; size = 4
_cc$78417 = -25						; size = 1
_dist$78414 = -24					; size = 2
_len$78412 = -17					; size = 1
_strend$ = -16						; size = 4
_bflush$ = -12						; size = 4
_scan$ = -8						; size = 4
_prev$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC					; COMDAT

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
$LN20@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	81 78 74 02 01
	00 00		 cmp	 DWORD PTR [eax+116], 258 ; 00000102H
  00010	77 33		 ja	 SHORT $LN18@deflate_rl

; 2071 :             fill_window(s);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _fill_window
  0001b	83 c4 04	 add	 esp, 4

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  0001e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00021	81 7a 74 02 01
	00 00		 cmp	 DWORD PTR [edx+116], 258 ; 00000102H
  00028	77 0d		 ja	 SHORT $LN17@deflate_rl
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002e	75 07		 jne	 SHORT $LN17@deflate_rl

; 2073 :                 return need_more;

  00030	33 c0		 xor	 eax, eax
  00032	e9 fc 04 00 00	 jmp	 $LN21@deflate_rl
$LN17@deflate_rl:

; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003e	75 05		 jne	 SHORT $LN18@deflate_rl
  00040	e9 eb 03 00 00	 jmp	 $LN19@deflate_rl
$LN18@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00048	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  0004f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00052	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00056	0f 82 68 01 00
	00		 jb	 $LN15@deflate_rl
  0005c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005f	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  00063	0f 86 5b 01 00
	00		 jbe	 $LN15@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0006f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00072	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00075	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00079	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx

; 2082 :             prev = *scan;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  0007f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00082	89 4d fc	 mov	 DWORD PTR _prev$[ebp], ecx

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00085	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00088	83 c2 01	 add	 edx, 1
  0008b	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  00097	0f 85 27 01 00
	00		 jne	 $LN15@deflate_rl
  0009d	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000a0	83 c2 01	 add	 edx, 1
  000a3	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  000a9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ac	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  000af	0f 85 0f 01 00
	00		 jne	 $LN15@deflate_rl
  000b5	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000b8	83 c2 01	 add	 edx, 1
  000bb	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  000be	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  000c1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000c4	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  000c7	0f 85 f7 00 00
	00		 jne	 $LN15@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  000cd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d6	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  000d9	8d 84 10 02 01
	00 00		 lea	 eax, DWORD PTR [eax+edx+258]
  000e0	89 45 f0	 mov	 DWORD PTR _strend$[ebp], eax
$LN12@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&
; 2090 :                          scan < strend);

  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  000e6	83 c1 01	 add	 ecx, 1
  000e9	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  000ec	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000ef	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000f2	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  000f5	0f 85 9c 00 00
	00		 jne	 $LN11@deflate_rl
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  000fe	83 c1 01	 add	 ecx, 1
  00101	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00104	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00107	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0010a	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  0010d	0f 85 84 00 00
	00		 jne	 $LN11@deflate_rl
  00113	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00116	83 c1 01	 add	 ecx, 1
  00119	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  0011c	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0011f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00122	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00125	75 70		 jne	 SHORT $LN11@deflate_rl
  00127	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0012a	83 c1 01	 add	 ecx, 1
  0012d	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00130	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00133	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00136	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00139	75 5c		 jne	 SHORT $LN11@deflate_rl
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0013e	83 c1 01	 add	 ecx, 1
  00141	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00144	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00147	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0014a	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  0014d	75 48		 jne	 SHORT $LN11@deflate_rl
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00152	83 c1 01	 add	 ecx, 1
  00155	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00158	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0015b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0015e	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00161	75 34		 jne	 SHORT $LN11@deflate_rl
  00163	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00166	83 c1 01	 add	 ecx, 1
  00169	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  0016c	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0016f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00172	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00175	75 20		 jne	 SHORT $LN11@deflate_rl
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0017a	83 c1 01	 add	 ecx, 1
  0017d	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00180	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00183	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00186	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00189	75 0c		 jne	 SHORT $LN11@deflate_rl
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0018e	3b 4d f0	 cmp	 ecx, DWORD PTR _strend$[ebp]
  00191	0f 82 4c ff ff
	ff		 jb	 $LN12@deflate_rl
$LN11@deflate_rl:

; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  00197	8b 55 f0	 mov	 edx, DWORD PTR _strend$[ebp]
  0019a	2b 55 f8	 sub	 edx, DWORD PTR _scan$[ebp]
  0019d	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  001a2	2b c2		 sub	 eax, edx
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a7	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 2092 :                 if (s->match_length > s->lookahead)

  001aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b0	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  001b3	3b 48 74	 cmp	 ecx, DWORD PTR [eax+116]
  001b6	76 0c		 jbe	 SHORT $LN15@deflate_rl

; 2093 :                     s->match_length = s->lookahead;

  001b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001bb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001be	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001c1	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN15@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  001c4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c7	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  001cb	0f 82 34 01 00
	00		 jb	 $LN8@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  001d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001d7	83 e9 03	 sub	 ecx, 3
  001da	88 4d ef	 mov	 BYTE PTR _len$78412[ebp], cl
  001dd	ba 01 00 00 00	 mov	 edx, 1
  001e2	66 89 55 e8	 mov	 WORD PTR _dist$78414[ebp], dx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  001ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f2	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  001f8	66 8b 55 e8	 mov	 dx, WORD PTR _dist$78414[ebp]
  001fc	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00200	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00203	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00212	8a 55 ef	 mov	 dl, BYTE PTR _len$78412[ebp]
  00215	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00218	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0021b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00221	83 c1 01	 add	 ecx, 1
  00224	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00227	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  0022d	66 8b 45 e8	 mov	 ax, WORD PTR _dist$78414[ebp]
  00231	66 83 e8 01	 sub	 ax, 1
  00235	66 89 45 e8	 mov	 WORD PTR _dist$78414[ebp], ax
  00239	0f b6 4d ef	 movzx	 ecx, BYTE PTR _len$78412[ebp]
  0023d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  00244	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00247	66 8b 8c 90 98
	04 00 00	 mov	 cx, WORD PTR [eax+edx*4+1176]
  0024f	66 83 c1 01	 add	 cx, 1
  00253	0f b6 55 ef	 movzx	 edx, BYTE PTR _len$78412[ebp]
  00257	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[edx]
  0025e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00261	66 89 8c 82 98
	04 00 00	 mov	 WORD PTR [edx+eax*4+1176], cx
  00269	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$78414[ebp]
  0026d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00272	7d 10		 jge	 SHORT $LN23@deflate_rl
  00274	0f b7 4d e8	 movzx	 ecx, WORD PTR _dist$78414[ebp]
  00278	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __dist_code[ecx]
  0027f	89 55 e0	 mov	 DWORD PTR tv210[ebp], edx
  00282	eb 11		 jmp	 SHORT $LN24@deflate_rl
$LN23@deflate_rl:
  00284	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$78414[ebp]
  00288	c1 f8 07	 sar	 eax, 7
  0028b	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax+256]
  00292	89 4d e0	 mov	 DWORD PTR tv210[ebp], ecx
$LN24@deflate_rl:
  00295	8b 55 e0	 mov	 edx, DWORD PTR tv210[ebp]
  00298	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029b	66 8b 8c 90 88
	09 00 00	 mov	 cx, WORD PTR [eax+edx*4+2440]
  002a3	66 83 c1 01	 add	 cx, 1
  002a7	8b 55 e0	 mov	 edx, DWORD PTR tv210[ebp]
  002aa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ad	66 89 8c 90 88
	09 00 00	 mov	 WORD PTR [eax+edx*4+2440], cx
  002b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b8	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  002be	83 ea 01	 sub	 edx, 1
  002c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c4	33 c9		 xor	 ecx, ecx
  002c6	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  002cc	0f 94 c1	 sete	 cl
  002cf	89 4d f4	 mov	 DWORD PTR _bflush$[ebp], ecx

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  002d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d8	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  002db	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  002de	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e1	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2105 :             s->strstart += s->match_length;

  002e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e7	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ed	03 4a 60	 add	 ecx, DWORD PTR [edx+96]
  002f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f3	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 2106 :             s->match_length = 0;

  002f6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f9	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 2107 :         } else {

  00300	e9 b4 00 00 00	 jmp	 $LN7@deflate_rl
$LN8@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00305	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00308	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0030e	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00311	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  00314	88 45 e7	 mov	 BYTE PTR _cc$78417[ebp], al
  00317	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00320	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00323	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00329	33 c0		 xor	 eax, eax
  0032b	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00332	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  00338	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0033b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00341	8a 45 e7	 mov	 al, BYTE PTR _cc$78417[ebp]
  00344	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00347	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00350	83 c2 01	 add	 edx, 1
  00353	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00356	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  0035c	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$78417[ebp]
  00360	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00363	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  0036b	66 83 c0 01	 add	 ax, 1
  0036f	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$78417[ebp]
  00373	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00376	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  0037e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00381	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00387	83 e9 01	 sub	 ecx, 1
  0038a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0038d	33 c0		 xor	 eax, eax
  0038f	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00395	0f 94 c0	 sete	 al
  00398	89 45 f4	 mov	 DWORD PTR _bflush$[ebp], eax

; 2111 :             s->lookahead--;

  0039b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0039e	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  003a1	83 ea 01	 sub	 edx, 1
  003a4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a7	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 2112 :             s->strstart++;

  003aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ad	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  003b0	83 c2 01	 add	 edx, 1
  003b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b6	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN7@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  003b9	83 7d f4 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  003bd	74 6c		 je	 SHORT $LN6@deflate_rl
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003c2	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  003c6	7c 11		 jl	 SHORT $LN25@deflate_rl
  003c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  003ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d1	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  003d4	89 45 dc	 mov	 DWORD PTR tv284[ebp], eax
  003d7	eb 07		 jmp	 SHORT $LN26@deflate_rl
$LN25@deflate_rl:
  003d9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv284[ebp], 0
$LN26@deflate_rl:
  003e0	6a 00		 push	 0
  003e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e8	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  003eb	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  003ee	51		 push	 ecx
  003ef	8b 55 dc	 mov	 edx, DWORD PTR tv284[ebp]
  003f2	52		 push	 edx
  003f3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 __tr_flush_block
  003fc	83 c4 10	 add	 esp, 16			; 00000010H
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00402	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00405	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00408	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	52		 push	 edx
  00411	e8 00 00 00 00	 call	 _flush_pending
  00416	83 c4 04	 add	 esp, 4
  00419	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00422	75 07		 jne	 SHORT $LN6@deflate_rl
  00424	33 c0		 xor	 eax, eax
  00426	e9 08 01 00 00	 jmp	 $LN21@deflate_rl
$LN6@deflate_rl:

; 2115 :     }

  0042b	e9 d6 fb ff ff	 jmp	 $LN20@deflate_rl
$LN19@deflate_rl:

; 2116 :     s->insert = 0;

  00430	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00433	c7 82 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  0043d	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00441	75 76		 jne	 SHORT $LN4@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  00443	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00446	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0044a	7c 11		 jl	 SHORT $LN27@deflate_rl
  0044c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044f	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00452	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00455	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00458	89 55 d8	 mov	 DWORD PTR tv304[ebp], edx
  0045b	eb 07		 jmp	 SHORT $LN28@deflate_rl
$LN27@deflate_rl:
  0045d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv304[ebp], 0
$LN28@deflate_rl:
  00464	6a 01		 push	 1
  00466	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00469	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046c	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  0046f	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00472	50		 push	 eax
  00473	8b 4d d8	 mov	 ecx, DWORD PTR tv304[ebp]
  00476	51		 push	 ecx
  00477	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0047a	52		 push	 edx
  0047b	e8 00 00 00 00	 call	 __tr_flush_block
  00480	83 c4 10	 add	 esp, 16			; 00000010H
  00483	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00486	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00489	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0048c	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  0048f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00492	8b 08		 mov	 ecx, DWORD PTR [eax]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 _flush_pending
  0049a	83 c4 04	 add	 esp, 4
  0049d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a0	8b 02		 mov	 eax, DWORD PTR [edx]
  004a2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  004a6	75 0a		 jne	 SHORT $LN3@deflate_rl
  004a8	b8 02 00 00 00	 mov	 eax, 2
  004ad	e9 81 00 00 00	 jmp	 $LN21@deflate_rl
$LN3@deflate_rl:

; 2119 :         return finish_done;

  004b2	b8 03 00 00 00	 mov	 eax, 3
  004b7	eb 7a		 jmp	 SHORT $LN21@deflate_rl
$LN4@deflate_rl:

; 2120 :     }
; 2121 :     if (s->last_lit)

  004b9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004bc	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  004c3	74 69		 je	 SHORT $LN2@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  004c5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004c8	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  004cc	7c 11		 jl	 SHORT $LN29@deflate_rl
  004ce	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d1	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  004d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d7	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  004da	89 4d d4	 mov	 DWORD PTR tv324[ebp], ecx
  004dd	eb 07		 jmp	 SHORT $LN30@deflate_rl
$LN29@deflate_rl:
  004df	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv324[ebp], 0
$LN30@deflate_rl:
  004e6	6a 00		 push	 0
  004e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ee	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  004f1	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  004f4	52		 push	 edx
  004f5	8b 45 d4	 mov	 eax, DWORD PTR tv324[ebp]
  004f8	50		 push	 eax
  004f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fc	51		 push	 ecx
  004fd	e8 00 00 00 00	 call	 __tr_flush_block
  00502	83 c4 10	 add	 esp, 16			; 00000010H
  00505	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00508	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0050e	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00511	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00514	8b 02		 mov	 eax, DWORD PTR [edx]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 _flush_pending
  0051c	83 c4 04	 add	 esp, 4
  0051f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00522	8b 11		 mov	 edx, DWORD PTR [ecx]
  00524	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00528	75 04		 jne	 SHORT $LN2@deflate_rl
  0052a	33 c0		 xor	 eax, eax
  0052c	eb 05		 jmp	 SHORT $LN21@deflate_rl
$LN2@deflate_rl:

; 2123 :     return block_done;

  0052e	b8 01 00 00 00	 mov	 eax, 1
$LN21@deflate_rl:

; 2124 : }

  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c3		 ret	 0
_deflate_rle ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv464 = -48						; size = 4
tv444 = -44						; size = 4
tv432 = -40						; size = 4
tv368 = -36						; size = 4
tv315 = -32						; size = 4
tv231 = -28						; size = 4
_cc$78374 = -22						; size = 1
_cc$78364 = -21						; size = 1
_dist$78348 = -20					; size = 2
_len$78346 = -13					; size = 1
_max_insert$78345 = -12					; size = 4
_hash_head$ = -8					; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
$LN26@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  00011	73 33		 jae	 SHORT $LN24@deflate_sl

; 1941 :             fill_window(s);

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _fill_window
  0001c	83 c4 04	 add	 esp, 4

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00029	73 0d		 jae	 SHORT $LN23@deflate_sl
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002f	75 07		 jne	 SHORT $LN23@deflate_sl

; 1943 :                 return need_more;

  00031	33 c0		 xor	 eax, eax
  00033	e9 32 07 00 00	 jmp	 $LN27@deflate_sl
$LN23@deflate_sl:

; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003f	75 05		 jne	 SHORT $LN24@deflate_sl
  00041	e9 59 05 00 00	 jmp	 $LN25@deflate_sl
$LN24@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00050	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00054	0f 82 83 00 00
	00		 jb	 $LN21@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00060	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00063	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00066	d3 e2		 shl	 edx, cl
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00071	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00074	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00079	33 d1		 xor	 edx, ecx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00084	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00099	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  0009c	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0009f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000a2	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000a5	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000a9	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000b6	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000bf	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000c3	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN21@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000dd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e3	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000e6	89 50 78	 mov	 DWORD PTR [eax+120], edx
  000e9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ef	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000f2	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 1959 :         s->match_length = MIN_MATCH-1;

  000f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f8	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {

  000ff	83 7d f8 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  00103	74 7c		 je	 SHORT $LN20@deflate_sl
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00108	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010b	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  0010e	3b 82 80 00 00
	00		 cmp	 eax, DWORD PTR [edx+128]
  00114	73 6b		 jae	 SHORT $LN20@deflate_sl
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00119	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0011c	2b 55 f8	 sub	 edx, DWORD PTR _hash_head$[ebp]
  0011f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00122	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00125	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  0012b	3b d1		 cmp	 edx, ecx
  0012d	77 52		 ja	 SHORT $LN20@deflate_sl

; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  0012f	8b 55 f8	 mov	 edx, DWORD PTR _hash_head$[ebp]
  00132	52		 push	 edx
  00133	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _longest_match
  0013c	83 c4 08	 add	 esp, 8
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00142	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {

  00145	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00148	83 7a 60 05	 cmp	 DWORD PTR [edx+96], 5
  0014c	77 33		 ja	 SHORT $LN20@deflate_sl
  0014e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00151	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [eax+136], 1
  00158	74 1d		 je	 SHORT $LN18@deflate_sl
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015d	83 79 60 03	 cmp	 DWORD PTR [ecx+96], 3
  00161	75 1e		 jne	 SHORT $LN20@deflate_sl
  00163	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00166	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00169	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0016c	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  0016f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00175	76 0a		 jbe	 SHORT $LN20@deflate_sl
$LN18@deflate_sl:

; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2
$LN20@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00181	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00184	83 78 78 03	 cmp	 DWORD PTR [eax+120], 3
  00188	0f 82 ae 02 00
	00		 jb	 $LN17@deflate_sl
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00191	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00194	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00197	3b 42 78	 cmp	 eax, DWORD PTR [edx+120]
  0019a	0f 87 9c 02 00
	00		 ja	 $LN17@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a3	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  001a6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001ac	8d 54 0a fd	 lea	 edx, DWORD PTR [edx+ecx-3]
  001b0	89 55 f4	 mov	 DWORD PTR _max_insert$78345[ebp], edx

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1993 :                            s->prev_length - MIN_MATCH, bflush);

  001b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b6	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  001b9	83 e9 03	 sub	 ecx, 3
  001bc	88 4d f3	 mov	 BYTE PTR _len$78346[ebp], cl
  001bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c2	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  001c5	83 e8 01	 sub	 eax, 1
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cb	2b 41 64	 sub	 eax, DWORD PTR [ecx+100]
  001ce	66 89 45 ec	 mov	 WORD PTR _dist$78348[ebp], ax
  001d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d5	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001de	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  001e4	66 8b 4d ec	 mov	 cx, WORD PTR _dist$78348[ebp]
  001e8	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  001ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ef	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f8	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  001fe	8a 4d f3	 mov	 cl, BYTE PTR _len$78346[ebp]
  00201	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00204	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00207	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0020d	83 c0 01	 add	 eax, 1
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00213	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  00219	66 8b 55 ec	 mov	 dx, WORD PTR _dist$78348[ebp]
  0021d	66 83 ea 01	 sub	 dx, 1
  00221	66 89 55 ec	 mov	 WORD PTR _dist$78348[ebp], dx
  00225	0f b6 45 f3	 movzx	 eax, BYTE PTR _len$78346[ebp]
  00229	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  00230	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00233	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  0023b	66 83 c0 01	 add	 ax, 1
  0023f	0f b6 4d f3	 movzx	 ecx, BYTE PTR _len$78346[ebp]
  00243	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024d	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  00255	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$78348[ebp]
  00259	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0025f	7d 10		 jge	 SHORT $LN29@deflate_sl
  00261	0f b7 45 ec	 movzx	 eax, WORD PTR _dist$78348[ebp]
  00265	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  0026c	89 4d e4	 mov	 DWORD PTR tv231[ebp], ecx
  0026f	eb 11		 jmp	 SHORT $LN30@deflate_sl
$LN29@deflate_sl:
  00271	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$78348[ebp]
  00275	c1 fa 07	 sar	 edx, 7
  00278	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  0027f	89 45 e4	 mov	 DWORD PTR tv231[ebp], eax
$LN30@deflate_sl:
  00282	8b 4d e4	 mov	 ecx, DWORD PTR tv231[ebp]
  00285	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00288	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  00290	66 83 c0 01	 add	 ax, 1
  00294	8b 4d e4	 mov	 ecx, DWORD PTR tv231[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029a	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  002a2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a5	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  002ab	83 e9 01	 sub	 ecx, 1
  002ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b1	33 c0		 xor	 eax, eax
  002b3	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  002b9	0f 94 c0	 sete	 al
  002bc	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  002c5	83 ea 01	 sub	 edx, 1
  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002ce	2b ca		 sub	 ecx, edx
  002d0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d3	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2001 :             s->prev_length -= 2;

  002d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d9	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  002dc	83 e9 02	 sub	 ecx, 2
  002df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e2	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
$LN16@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  002e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e8	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002eb	83 c1 01	 add	 ecx, 1
  002ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f1	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  002f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f7	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002fa	3b 4d f4	 cmp	 ecx, DWORD PTR _max_insert$78345[ebp]
  002fd	0f 87 83 00 00
	00		 ja	 $LN15@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  00303	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00306	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00309	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0030c	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0030f	d3 e2		 shl	 edx, cl
  00311	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00314	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00317	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031a	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0031d	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00322	33 d1		 xor	 edx, ecx
  00324	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00327	23 50 54	 and	 edx, DWORD PTR [eax+84]
  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032d	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00330	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00333	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00336	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00339	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0033c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00342	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  00345	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00348	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0034b	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  0034e	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  00352	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  00356	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0035c	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0035f	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  00362	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00365	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00368	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  0036c	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  0036f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00372	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00375	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00378	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0037b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037e	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  00382	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN15@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  00386	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00389	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0038c	83 e9 01	 sub	 ecx, 1
  0038f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00392	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
  00395	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00398	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0039c	0f 85 43 ff ff
	ff		 jne	 $LN16@deflate_sl

; 2007 :             s->match_available = 0;

  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a5	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 2008 :             s->match_length = MIN_MATCH-1;

  003ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003af	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 2009 :             s->strstart++;

  003b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b9	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003bc	83 c1 01	 add	 ecx, 1
  003bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c2	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  003c5	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  003c9	74 6c		 je	 SHORT $LN12@deflate_sl
  003cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ce	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  003d2	7c 11		 jl	 SHORT $LN31@deflate_sl
  003d4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d7	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  003da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003dd	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  003e0	89 55 e0	 mov	 DWORD PTR tv315[ebp], edx
  003e3	eb 07		 jmp	 SHORT $LN32@deflate_sl
$LN31@deflate_sl:
  003e5	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv315[ebp], 0
$LN32@deflate_sl:
  003ec	6a 00		 push	 0
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003f4	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  003f7	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  003fa	50		 push	 eax
  003fb	8b 4d e0	 mov	 ecx, DWORD PTR tv315[ebp]
  003fe	51		 push	 ecx
  003ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00402	52		 push	 edx
  00403	e8 00 00 00 00	 call	 __tr_flush_block
  00408	83 c4 10	 add	 esp, 16			; 00000010H
  0040b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00411	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00414	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00417	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 _flush_pending
  00422	83 c4 04	 add	 esp, 4
  00425	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00428	8b 02		 mov	 eax, DWORD PTR [edx]
  0042a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0042e	75 07		 jne	 SHORT $LN12@deflate_sl
  00430	33 c0		 xor	 eax, eax
  00432	e9 33 03 00 00	 jmp	 $LN27@deflate_sl
$LN12@deflate_sl:
  00437	e9 5e 01 00 00	 jmp	 $LN10@deflate_sl
$LN17@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  0043c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0043f	83 79 68 00	 cmp	 DWORD PTR [ecx+104], 0
  00443	0f 84 29 01 00
	00		 je	 $LN9@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00449	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044c	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0044f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00452	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00455	8a 44 10 ff	 mov	 al, BYTE PTR [eax+edx-1]
  00459	88 45 eb	 mov	 BYTE PTR _cc$78364[ebp], al
  0045c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0045f	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00465	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00468	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  0046e	33 c0		 xor	 eax, eax
  00470	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00477	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  0047d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00480	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00486	8a 45 eb	 mov	 al, BYTE PTR _cc$78364[ebp]
  00489	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048f	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00495	83 c2 01	 add	 edx, 1
  00498	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0049b	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  004a1	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$78364[ebp]
  004a5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a8	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  004b0	66 83 c0 01	 add	 ax, 1
  004b4	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$78364[ebp]
  004b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004bb	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  004c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c6	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  004cc	83 e9 01	 sub	 ecx, 1
  004cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d2	33 c0		 xor	 eax, eax
  004d4	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  004da	0f 94 c0	 sete	 al
  004dd	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 2020 :             if (bflush) {

  004e0	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  004e4	74 5a		 je	 SHORT $LN8@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  004e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e9	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  004ed	7c 11		 jl	 SHORT $LN33@deflate_sl
  004ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f2	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f8	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  004fb	89 45 dc	 mov	 DWORD PTR tv368[ebp], eax
  004fe	eb 07		 jmp	 SHORT $LN34@deflate_sl
$LN33@deflate_sl:
  00500	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv368[ebp], 0
$LN34@deflate_sl:
  00507	6a 00		 push	 0
  00509	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050f	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00512	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00515	51		 push	 ecx
  00516	8b 55 dc	 mov	 edx, DWORD PTR tv368[ebp]
  00519	52		 push	 edx
  0051a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0051d	50		 push	 eax
  0051e	e8 00 00 00 00	 call	 __tr_flush_block
  00523	83 c4 10	 add	 esp, 16			; 00000010H
  00526	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00529	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052c	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0052f	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00532	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00535	8b 11		 mov	 edx, DWORD PTR [ecx]
  00537	52		 push	 edx
  00538	e8 00 00 00 00	 call	 _flush_pending
  0053d	83 c4 04	 add	 esp, 4
$LN8@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;

  00540	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00543	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00546	83 c1 01	 add	 ecx, 1
  00549	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0054c	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2024 :             s->lookahead--;

  0054f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00552	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00555	83 e9 01	 sub	 ecx, 1
  00558	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0055b	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 2025 :             if (s->strm->avail_out == 0) return need_more;

  0055e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00561	8b 08		 mov	 ecx, DWORD PTR [eax]
  00563	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00567	75 07		 jne	 SHORT $LN7@deflate_sl
  00569	33 c0		 xor	 eax, eax
  0056b	e9 fa 01 00 00	 jmp	 $LN27@deflate_sl
$LN7@deflate_sl:

; 2026 :         } else {

  00570	eb 28		 jmp	 SHORT $LN10@deflate_sl
$LN9@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;

  00572	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00575	c7 42 68 01 00
	00 00		 mov	 DWORD PTR [edx+104], 1

; 2031 :             s->strstart++;

  0057c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0057f	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00582	83 c1 01	 add	 ecx, 1
  00585	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00588	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 2032 :             s->lookahead--;

  0058b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0058e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00591	83 e9 01	 sub	 ecx, 1
  00594	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00597	89 4a 74	 mov	 DWORD PTR [edx+116], ecx
$LN10@deflate_sl:

; 2033 :         }
; 2034 :     }

  0059a	e9 68 fa ff ff	 jmp	 $LN26@deflate_sl
$LN25@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  0059f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005a2	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  005a6	0f 84 a1 00 00
	00		 je	 $LN5@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  005ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005af	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005b2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b5	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  005b8	8a 54 0a ff	 mov	 dl, BYTE PTR [edx+ecx-1]
  005bc	88 55 ea	 mov	 BYTE PTR _cc$78374[ebp], dl
  005bf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005c2	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  005c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005cb	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  005d1	33 d2		 xor	 edx, edx
  005d3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  005d7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005da	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  005e0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005e3	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  005e9	8a 55 ea	 mov	 dl, BYTE PTR _cc$78374[ebp]
  005ec	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f2	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  005f8	83 c1 01	 add	 ecx, 1
  005fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005fe	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  00604	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$78374[ebp]
  00608	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0060b	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  00613	66 83 c2 01	 add	 dx, 1
  00617	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$78374[ebp]
  0061b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0061e	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  00626	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00629	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  0062f	83 e8 01	 sub	 eax, 1
  00632	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00635	33 d2		 xor	 edx, edx
  00637	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  0063d	0f 94 c2	 sete	 dl
  00640	89 55 fc	 mov	 DWORD PTR _bflush$[ebp], edx

; 2039 :         s->match_available = 0;

  00643	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00646	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
$LN5@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  0064d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00650	83 79 6c 02	 cmp	 DWORD PTR [ecx+108], 2
  00654	73 0b		 jae	 SHORT $LN35@deflate_sl
  00656	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00659	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0065c	89 45 d8	 mov	 DWORD PTR tv432[ebp], eax
  0065f	eb 07		 jmp	 SHORT $LN36@deflate_sl
$LN35@deflate_sl:
  00661	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR tv432[ebp], 2
$LN36@deflate_sl:
  00668	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0066b	8b 55 d8	 mov	 edx, DWORD PTR tv432[ebp]
  0066e	89 91 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], edx

; 2042 :     if (flush == Z_FINISH) {

  00674	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00678	75 76		 jne	 SHORT $LN4@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  0067a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0067d	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00681	7c 11		 jl	 SHORT $LN37@deflate_sl
  00683	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00686	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00689	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0068c	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0068f	89 55 d4	 mov	 DWORD PTR tv444[ebp], edx
  00692	eb 07		 jmp	 SHORT $LN38@deflate_sl
$LN37@deflate_sl:
  00694	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv444[ebp], 0
$LN38@deflate_sl:
  0069b	6a 01		 push	 1
  0069d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006a0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006a3	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  006a6	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  006a9	50		 push	 eax
  006aa	8b 4d d4	 mov	 ecx, DWORD PTR tv444[ebp]
  006ad	51		 push	 ecx
  006ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006b1	52		 push	 edx
  006b2	e8 00 00 00 00	 call	 __tr_flush_block
  006b7	83 c4 10	 add	 esp, 16			; 00000010H
  006ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006c0	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  006c3	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  006c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006cb	51		 push	 ecx
  006cc	e8 00 00 00 00	 call	 _flush_pending
  006d1	83 c4 04	 add	 esp, 4
  006d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006d7	8b 02		 mov	 eax, DWORD PTR [edx]
  006d9	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  006dd	75 0a		 jne	 SHORT $LN3@deflate_sl
  006df	b8 02 00 00 00	 mov	 eax, 2
  006e4	e9 81 00 00 00	 jmp	 $LN27@deflate_sl
$LN3@deflate_sl:

; 2044 :         return finish_done;

  006e9	b8 03 00 00 00	 mov	 eax, 3
  006ee	eb 7a		 jmp	 SHORT $LN27@deflate_sl
$LN4@deflate_sl:

; 2045 :     }
; 2046 :     if (s->last_lit)

  006f0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006f3	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  006fa	74 69		 je	 SHORT $LN2@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  006fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006ff	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  00703	7c 11		 jl	 SHORT $LN39@deflate_sl
  00705	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00708	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0070b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0070e	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  00711	89 4d d0	 mov	 DWORD PTR tv464[ebp], ecx
  00714	eb 07		 jmp	 SHORT $LN40@deflate_sl
$LN39@deflate_sl:
  00716	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv464[ebp], 0
$LN40@deflate_sl:
  0071d	6a 00		 push	 0
  0071f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00722	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00725	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00728	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  0072b	52		 push	 edx
  0072c	8b 45 d0	 mov	 eax, DWORD PTR tv464[ebp]
  0072f	50		 push	 eax
  00730	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00733	51		 push	 ecx
  00734	e8 00 00 00 00	 call	 __tr_flush_block
  00739	83 c4 10	 add	 esp, 16			; 00000010H
  0073c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0073f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00742	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00745	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00748	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0074b	8b 02		 mov	 eax, DWORD PTR [edx]
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 _flush_pending
  00753	83 c4 04	 add	 esp, 4
  00756	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0075b	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0075f	75 04		 jne	 SHORT $LN2@deflate_sl
  00761	33 c0		 xor	 eax, eax
  00763	eb 05		 jmp	 SHORT $LN27@deflate_sl
$LN2@deflate_sl:

; 2048 :     return block_done;

  00765	b8 01 00 00 00	 mov	 eax, 1
$LN27@deflate_sl:

; 2049 : }

  0076a	5e		 pop	 esi
  0076b	8b e5		 mov	 esp, ebp
  0076d	5d		 pop	 ebp
  0076e	c3		 ret	 0
_deflate_slow ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv395 = -40						; size = 4
tv375 = -36						; size = 4
tv363 = -32						; size = 4
tv351 = -28						; size = 4
tv204 = -24						; size = 4
_cc$78305 = -17						; size = 1
_dist$78296 = -16					; size = 2
_len$78294 = -9						; size = 1
_hash_head$ = -8					; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
$LN20@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  00011	73 33		 jae	 SHORT $LN18@deflate_fa

; 1838 :             fill_window(s);

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _fill_window
  0001c	83 c4 04	 add	 esp, 4

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00029	73 0d		 jae	 SHORT $LN17@deflate_fa
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002f	75 07		 jne	 SHORT $LN17@deflate_fa

; 1840 :                 return need_more;

  00031	33 c0		 xor	 eax, eax
  00033	e9 9d 05 00 00	 jmp	 $LN21@deflate_fa
$LN17@deflate_fa:

; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003f	75 05		 jne	 SHORT $LN18@deflate_fa
  00041	e9 72 04 00 00	 jmp	 $LN19@deflate_fa
$LN18@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00050	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00054	0f 82 83 00 00
	00		 jb	 $LN15@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00060	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00063	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00066	d3 e2		 shl	 edx, cl
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00071	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00074	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00079	33 d1		 xor	 edx, ecx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00084	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00099	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  0009c	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0009f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000a2	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000a5	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000a9	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000b6	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000bf	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000c3	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN15@deflate_fa:

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000dd	83 7d f8 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  000e1	74 2e		 je	 SHORT $LN14@deflate_fa
  000e3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e6	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000e9	2b 4d f8	 sub	 ecx, DWORD PTR _hash_head$[ebp]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000f2	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000f7	3b c8		 cmp	 ecx, eax
  000f9	77 16		 ja	 SHORT $LN14@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _hash_head$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _longest_match
  00108	83 c4 08	 add	 esp, 8
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010e	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN14@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  00111	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00114	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  00118	0f 82 6f 02 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1868 :                            s->match_length - MIN_MATCH, bflush);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00121	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00124	83 e9 03	 sub	 ecx, 3
  00127	88 4d f7	 mov	 BYTE PTR _len$78294[ebp], cl
  0012a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00130	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00133	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  00136	66 89 4d f0	 mov	 WORD PTR _dist$78296[ebp], cx
  0013a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0013d	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00146	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  0014c	66 8b 4d f0	 mov	 cx, WORD PTR _dist$78296[ebp]
  00150	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00154	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00157	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00160	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00166	8a 4d f7	 mov	 cl, BYTE PTR _len$78294[ebp]
  00169	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0016c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016f	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00175	83 c0 01	 add	 eax, 1
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017b	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  00181	66 8b 55 f0	 mov	 dx, WORD PTR _dist$78296[ebp]
  00185	66 83 ea 01	 sub	 dx, 1
  00189	66 89 55 f0	 mov	 WORD PTR _dist$78296[ebp], dx
  0018d	0f b6 45 f7	 movzx	 eax, BYTE PTR _len$78294[ebp]
  00191	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  00198	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0019b	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  001a3	66 83 c0 01	 add	 ax, 1
  001a7	0f b6 4d f7	 movzx	 ecx, BYTE PTR _len$78294[ebp]
  001ab	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b5	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  001bd	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$78296[ebp]
  001c1	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  001c7	7d 10		 jge	 SHORT $LN23@deflate_fa
  001c9	0f b7 45 f0	 movzx	 eax, WORD PTR _dist$78296[ebp]
  001cd	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  001d4	89 4d e8	 mov	 DWORD PTR tv204[ebp], ecx
  001d7	eb 11		 jmp	 SHORT $LN24@deflate_fa
$LN23@deflate_fa:
  001d9	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$78296[ebp]
  001dd	c1 fa 07	 sar	 edx, 7
  001e0	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  001e7	89 45 e8	 mov	 DWORD PTR tv204[ebp], eax
$LN24@deflate_fa:
  001ea	8b 4d e8	 mov	 ecx, DWORD PTR tv204[ebp]
  001ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f0	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  001f8	66 83 c0 01	 add	 ax, 1
  001fc	8b 4d e8	 mov	 ecx, DWORD PTR tv204[ebp]
  001ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00202	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  0020a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020d	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00213	83 e9 01	 sub	 ecx, 1
  00216	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00219	33 c0		 xor	 eax, eax
  0021b	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00221	0f 94 c0	 sete	 al
  00224	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  00227	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022d	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00230	2b 42 60	 sub	 eax, DWORD PTR [edx+96]
  00233	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00236	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&
; 1877 :                 s->lookahead >= MIN_MATCH) {

  00239	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023f	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00242	3b 88 80 00 00
	00		 cmp	 ecx, DWORD PTR [eax+128]
  00248	0f 87 db 00 00
	00		 ja	 $LN12@deflate_fa
  0024e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00251	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00255	0f 82 ce 00 00
	00		 jb	 $LN12@deflate_fa

; 1878 :                 s->match_length--; /* string at strstart already in table */

  0025b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00261	83 e9 01	 sub	 ecx, 1
  00264	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00267	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN11@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  0026a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026d	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00270	83 c1 01	 add	 ecx, 1
  00273	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00276	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  00279	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027f	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00282	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00285	d3 e2		 shl	 edx, cl
  00287	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0028a	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0028d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00290	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00293	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00298	33 d1		 xor	 edx, ecx
  0029a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029d	23 50 54	 and	 edx, DWORD PTR [eax+84]
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a3	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  002a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a9	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  002ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002af	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  002b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b5	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002b8	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  002bb	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  002be	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002c1	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  002c4	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  002c8	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  002cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d2	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  002d5	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  002d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002db	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  002de	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  002e2	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  002e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e8	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  002eb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ee	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  002f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f4	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  002f8	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  002fc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ff	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00302	83 e9 01	 sub	 ecx, 1
  00305	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00308	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  0030b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030e	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  00312	0f 85 52 ff ff
	ff		 jne	 $LN11@deflate_fa

; 1886 :                 s->strstart++;

  00318	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0031e	83 c2 01	 add	 edx, 1
  00321	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00324	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1887 :             } else

  00327	eb 5f		 jmp	 SHORT $LN8@deflate_fa
$LN12@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  00329	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032c	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0032f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00332	03 50 60	 add	 edx, DWORD PTR [eax+96]
  00335	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00338	89 51 6c	 mov	 DWORD PTR [ecx+108], edx

; 1891 :                 s->match_length = 0;

  0033b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033e	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 1892 :                 s->ins_h = s->window[s->strstart];

  00345	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00348	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0034b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0034e	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00351	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  00355	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00358	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  0035b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00361	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00364	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00367	d3 e2		 shl	 edx, cl
  00369	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0036c	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0036f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00372	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00375	0f b6 4c 08 01	 movzx	 ecx, BYTE PTR [eax+ecx+1]
  0037a	33 d1		 xor	 edx, ecx
  0037c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0037f	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00382	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00385	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN8@deflate_fa:

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  00388	e9 b4 00 00 00	 jmp	 $LN7@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0038d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00390	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00393	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00396	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00399	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  0039c	88 45 ef	 mov	 BYTE PTR _cc$78305[ebp], al
  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a2	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003a8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ab	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  003b1	33 c0		 xor	 eax, eax
  003b3	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  003b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ba	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  003c0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003c3	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  003c9	8a 45 ef	 mov	 al, BYTE PTR _cc$78305[ebp]
  003cc	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d2	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003d8	83 c2 01	 add	 edx, 1
  003db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003de	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  003e4	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$78305[ebp]
  003e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003eb	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  003f3	66 83 c0 01	 add	 ax, 1
  003f7	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$78305[ebp]
  003fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fe	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  00406	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00409	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  0040f	83 e9 01	 sub	 ecx, 1
  00412	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00415	33 c0		 xor	 eax, eax
  00417	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  0041d	0f 94 c0	 sete	 al
  00420	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1905 :             s->lookahead--;

  00423	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00426	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00429	83 ea 01	 sub	 edx, 1
  0042c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0042f	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1906 :             s->strstart++;

  00432	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00435	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00438	83 c2 01	 add	 edx, 1
  0043b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0043e	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN7@deflate_fa:

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00441	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  00445	74 6c		 je	 SHORT $LN6@deflate_fa
  00447	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044a	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0044e	7c 11		 jl	 SHORT $LN25@deflate_fa
  00450	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00453	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00456	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00459	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  0045c	89 45 e4	 mov	 DWORD PTR tv351[ebp], eax
  0045f	eb 07		 jmp	 SHORT $LN26@deflate_fa
$LN25@deflate_fa:
  00461	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv351[ebp], 0
$LN26@deflate_fa:
  00468	6a 00		 push	 0
  0046a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00470	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00473	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00476	51		 push	 ecx
  00477	8b 55 e4	 mov	 edx, DWORD PTR tv351[ebp]
  0047a	52		 push	 edx
  0047b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 __tr_flush_block
  00484	83 c4 10	 add	 esp, 16			; 00000010H
  00487	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0048d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00490	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00493	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00496	8b 11		 mov	 edx, DWORD PTR [ecx]
  00498	52		 push	 edx
  00499	e8 00 00 00 00	 call	 _flush_pending
  0049e	83 c4 04	 add	 esp, 4
  004a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004a6	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  004aa	75 07		 jne	 SHORT $LN6@deflate_fa
  004ac	33 c0		 xor	 eax, eax
  004ae	e9 22 01 00 00	 jmp	 $LN21@deflate_fa
$LN6@deflate_fa:

; 1909 :     }

  004b3	e9 4f fb ff ff	 jmp	 $LN20@deflate_fa
$LN19@deflate_fa:

; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  004b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004bb	83 7a 6c 02	 cmp	 DWORD PTR [edx+108], 2
  004bf	73 0b		 jae	 SHORT $LN27@deflate_fa
  004c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c4	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  004c7	89 4d e0	 mov	 DWORD PTR tv363[ebp], ecx
  004ca	eb 07		 jmp	 SHORT $LN28@deflate_fa
$LN27@deflate_fa:
  004cc	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR tv363[ebp], 2
$LN28@deflate_fa:
  004d3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d6	8b 45 e0	 mov	 eax, DWORD PTR tv363[ebp]
  004d9	89 82 b4 16 00
	00		 mov	 DWORD PTR [edx+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  004df	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  004e3	75 76		 jne	 SHORT $LN4@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  004e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e8	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  004ec	7c 11		 jl	 SHORT $LN29@deflate_fa
  004ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f1	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f7	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  004fa	89 45 dc	 mov	 DWORD PTR tv375[ebp], eax
  004fd	eb 07		 jmp	 SHORT $LN30@deflate_fa
$LN29@deflate_fa:
  004ff	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv375[ebp], 0
$LN30@deflate_fa:
  00506	6a 01		 push	 1
  00508	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050e	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00511	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00514	51		 push	 ecx
  00515	8b 55 dc	 mov	 edx, DWORD PTR tv375[ebp]
  00518	52		 push	 edx
  00519	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0051c	50		 push	 eax
  0051d	e8 00 00 00 00	 call	 __tr_flush_block
  00522	83 c4 10	 add	 esp, 16			; 00000010H
  00525	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00528	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052b	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0052e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00531	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00534	8b 11		 mov	 edx, DWORD PTR [ecx]
  00536	52		 push	 edx
  00537	e8 00 00 00 00	 call	 _flush_pending
  0053c	83 c4 04	 add	 esp, 4
  0053f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00548	75 0a		 jne	 SHORT $LN3@deflate_fa
  0054a	b8 02 00 00 00	 mov	 eax, 2
  0054f	e9 81 00 00 00	 jmp	 $LN21@deflate_fa
$LN3@deflate_fa:

; 1913 :         return finish_done;

  00554	b8 03 00 00 00	 mov	 eax, 3
  00559	eb 7a		 jmp	 SHORT $LN21@deflate_fa
$LN4@deflate_fa:

; 1914 :     }
; 1915 :     if (s->last_lit)

  0055b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0055e	83 ba a0 16 00
	00 00		 cmp	 DWORD PTR [edx+5792], 0
  00565	74 69		 je	 SHORT $LN2@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  00567	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0056a	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0056e	7c 11		 jl	 SHORT $LN31@deflate_fa
  00570	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00573	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00576	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00579	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0057c	89 55 d8	 mov	 DWORD PTR tv395[ebp], edx
  0057f	eb 07		 jmp	 SHORT $LN32@deflate_fa
$LN31@deflate_fa:
  00581	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv395[ebp], 0
$LN32@deflate_fa:
  00588	6a 00		 push	 0
  0058a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0058d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00590	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00593	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00596	50		 push	 eax
  00597	8b 4d d8	 mov	 ecx, DWORD PTR tv395[ebp]
  0059a	51		 push	 ecx
  0059b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0059e	52		 push	 edx
  0059f	e8 00 00 00 00	 call	 __tr_flush_block
  005a4	83 c4 10	 add	 esp, 16			; 00000010H
  005a7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005ad	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005b0	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  005b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b8	51		 push	 ecx
  005b9	e8 00 00 00 00	 call	 _flush_pending
  005be	83 c4 04	 add	 esp, 4
  005c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005c4	8b 02		 mov	 eax, DWORD PTR [edx]
  005c6	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  005ca	75 04		 jne	 SHORT $LN2@deflate_fa
  005cc	33 c0		 xor	 eax, eax
  005ce	eb 05		 jmp	 SHORT $LN21@deflate_fa
$LN2@deflate_fa:

; 1917 :     return block_done;

  005d0	b8 01 00 00 00	 mov	 eax, 1
$LN21@deflate_fa:

; 1918 : }

  005d5	5e		 pop	 esi
  005d6	8b e5		 mov	 esp, ebp
  005d8	5d		 pop	 ebp
  005d9	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
PUBLIC	_deflate@8
; Function compile flags: /Odtp
;	COMDAT _deflate@8
_TEXT	SEGMENT
tv687 = -76						; size = 4
tv688 = -72						; size = 4
tv689 = -68						; size = 4
tv358 = -64						; size = 4
tv359 = -60						; size = 4
tv258 = -56						; size = 4
tv259 = -52						; size = 4
_bstate$78082 = -48					; size = 4
_val$78056 = -44					; size = 4
_beg$78055 = -40					; size = 4
_val$78038 = -36					; size = 4
_beg$78037 = -32					; size = 4
_copy$78025 = -28					; size = 4
_left$78021 = -24					; size = 4
_beg$78020 = -20					; size = 4
_header$77975 = -16					; size = 4
_level_flags$77976 = -12				; size = 4
_old_flush$ = -8					; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	75 0c		 jne	 SHORT $LN94@deflate
  00016	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  0001a	7f 06		 jg	 SHORT $LN94@deflate
  0001c	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00020	7d 0a		 jge	 SHORT $LN95@deflate
$LN94@deflate:

; 771  :         return Z_STREAM_ERROR;

  00022	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00027	e9 6d 0f 00 00	 jmp	 $LN96@deflate
$LN95@deflate:

; 772  :     }
; 773  :     s = strm->state;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00032	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||
; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

  00035	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00038	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0003c	74 23		 je	 SHORT $LN92@deflate
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00041	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00045	74 08		 je	 SHORT $LN91@deflate
  00047	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0004a	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0004d	74 12		 je	 SHORT $LN92@deflate
$LN91@deflate:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00052	81 78 04 9a 02
	00 00		 cmp	 DWORD PTR [eax+4], 666	; 0000029aH
  00059	75 1c		 jne	 SHORT $LN93@deflate
  0005b	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0005f	74 16		 je	 SHORT $LN93@deflate
$LN92@deflate:

; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg+16
  0006a	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0006d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00072	e9 22 0f 00 00	 jmp	 $LN96@deflate
$LN93@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00077	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0007a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0007e	75 16		 jne	 SHORT $LN90@deflate
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00083	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg+28
  00089	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0008c	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00091	e9 03 0f 00 00	 jmp	 $LN96@deflate
$LN90@deflate:

; 781  : 
; 782  :     old_flush = s->last_flush;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00099	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0009c	89 4d f8	 mov	 DWORD PTR _old_flush$[ebp], ecx

; 783  :     s->last_flush = flush;

  0009f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a2	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  000a5	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ab	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000af	74 28		 je	 SHORT $LN89@deflate

; 787  :         flush_pending(strm);

  000b1	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _flush_pending
  000ba	83 c4 04	 add	 esp, 4

; 788  :         if (strm->avail_out == 0) {

  000bd	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c0	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000c4	75 11		 jne	 SHORT $LN88@deflate

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c9	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 796  :             return Z_OK;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 c2 0e 00 00	 jmp	 $LN96@deflate
$LN88@deflate:

; 797  :         }
; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  000d7	eb 54		 jmp	 SHORT $LN87@deflate
$LN89@deflate:

; 804  :                flush != Z_FINISH) {

  000d9	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000dc	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000e0	75 4b		 jne	 SHORT $LN87@deflate
  000e2	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  000e5	d1 e0		 shl	 eax, 1
  000e7	33 c9		 xor	 ecx, ecx
  000e9	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  000ed	0f 9e c1	 setle	 cl
  000f0	83 e9 01	 sub	 ecx, 1
  000f3	83 e1 09	 and	 ecx, 9
  000f6	2b c1		 sub	 eax, ecx
  000f8	8b 55 f8	 mov	 edx, DWORD PTR _old_flush$[ebp]
  000fb	d1 e2		 shl	 edx, 1
  000fd	33 c9		 xor	 ecx, ecx
  000ff	83 7d f8 04	 cmp	 DWORD PTR _old_flush$[ebp], 4
  00103	0f 9e c1	 setle	 cl
  00106	83 e9 01	 sub	 ecx, 1
  00109	83 e1 09	 and	 ecx, 9
  0010c	2b d1		 sub	 edx, ecx
  0010e	3b c2		 cmp	 eax, edx
  00110	7f 1b		 jg	 SHORT $LN87@deflate
  00112	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00116	74 15		 je	 SHORT $LN87@deflate

; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00118	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0011b	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  00120	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00123	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00128	e9 6c 0e 00 00	 jmp	 $LN96@deflate
$LN87@deflate:

; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00130	81 79 04 9a 02
	00 00		 cmp	 DWORD PTR [ecx+4], 666	; 0000029aH
  00137	75 1f		 jne	 SHORT $LN85@deflate
  00139	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0013c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00140	74 16		 je	 SHORT $LN85@deflate

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00142	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00145	8b 0d 1c 00 00
	00		 mov	 ecx, DWORD PTR _z_errmsg+28
  0014b	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0014e	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00153	e9 41 0e 00 00	 jmp	 $LN96@deflate
$LN85@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  00158	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0015b	83 7a 04 2a	 cmp	 DWORD PTR [edx+4], 42	; 0000002aH
  0015f	0f 85 27 01 00
	00		 jne	 $LN84@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00168	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0016b	83 e9 08	 sub	 ecx, 8
  0016e	c1 e1 04	 shl	 ecx, 4
  00171	83 c1 08	 add	 ecx, 8
  00174	c1 e1 08	 shl	 ecx, 8
  00177	89 4d f0	 mov	 DWORD PTR _header$77975[ebp], ecx

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  0017a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0017d	83 ba 88 00 00
	00 02		 cmp	 DWORD PTR [edx+136], 2
  00184	7d 0c		 jge	 SHORT $LN82@deflate
  00186	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00189	83 b8 84 00 00
	00 02		 cmp	 DWORD PTR [eax+132], 2
  00190	7d 09		 jge	 SHORT $LN83@deflate
$LN82@deflate:

; 820  :             level_flags = 0;

  00192	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _level_flags$77976[ebp], 0
  00199	eb 31		 jmp	 SHORT $LN81@deflate
$LN83@deflate:

; 821  :         else if (s->level < 6)

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0019e	83 b9 84 00 00
	00 06		 cmp	 DWORD PTR [ecx+132], 6
  001a5	7d 09		 jge	 SHORT $LN80@deflate

; 822  :             level_flags = 1;

  001a7	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _level_flags$77976[ebp], 1
  001ae	eb 1c		 jmp	 SHORT $LN81@deflate
$LN80@deflate:

; 823  :         else if (s->level == 6)

  001b0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001b3	83 ba 84 00 00
	00 06		 cmp	 DWORD PTR [edx+132], 6
  001ba	75 09		 jne	 SHORT $LN78@deflate

; 824  :             level_flags = 2;

  001bc	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _level_flags$77976[ebp], 2

; 825  :         else

  001c3	eb 07		 jmp	 SHORT $LN81@deflate
$LN78@deflate:

; 826  :             level_flags = 3;

  001c5	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _level_flags$77976[ebp], 3
$LN81@deflate:

; 827  :         header |= (level_flags << 6);

  001cc	8b 45 f4	 mov	 eax, DWORD PTR _level_flags$77976[ebp]
  001cf	c1 e0 06	 shl	 eax, 6
  001d2	0b 45 f0	 or	 eax, DWORD PTR _header$77975[ebp]
  001d5	89 45 f0	 mov	 DWORD PTR _header$77975[ebp], eax

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001db	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  001df	74 09		 je	 SHORT $LN76@deflate
  001e1	8b 55 f0	 mov	 edx, DWORD PTR _header$77975[ebp]
  001e4	83 ca 20	 or	 edx, 32			; 00000020H
  001e7	89 55 f0	 mov	 DWORD PTR _header$77975[ebp], edx
$LN76@deflate:

; 829  :         header += 31 - (header % 31);

  001ea	8b 45 f0	 mov	 eax, DWORD PTR _header$77975[ebp]
  001ed	33 d2		 xor	 edx, edx
  001ef	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  001f4	f7 f1		 div	 ecx
  001f6	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  001fb	2b c2		 sub	 eax, edx
  001fd	03 45 f0	 add	 eax, DWORD PTR _header$77975[ebp]
  00200	89 45 f0	 mov	 DWORD PTR _header$77975[ebp], eax

; 830  : 
; 831  :         putShortMSB(s, header);

  00203	8b 4d f0	 mov	 ecx, DWORD PTR _header$77975[ebp]
  00206	51		 push	 ecx
  00207	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0020a	52		 push	 edx
  0020b	e8 00 00 00 00	 call	 _putShortMSB
  00210	83 c4 08	 add	 esp, 8

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  00213	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00216	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  0021a	74 2f		 je	 SHORT $LN75@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0021f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00222	c1 ea 10	 shr	 edx, 16			; 00000010H
  00225	52		 push	 edx
  00226	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 _putShortMSB
  0022f	83 c4 08	 add	 esp, 8

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00232	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00235	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00238	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0023e	52		 push	 edx
  0023f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 _putShortMSB
  00248	83 c4 08	 add	 esp, 8
$LN75@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  0024b	6a 00		 push	 0
  0024d	6a 00		 push	 0
  0024f	6a 00		 push	 0
  00251	e8 00 00 00 00	 call	 _adler32@12
  00256	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00259	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 839  :         s->status = BUSY_STATE;

  0025c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0025f	c7 42 04 71 00
	00 00		 mov	 DWORD PTR [edx+4], 113	; 00000071H

; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  00266	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _flush_pending
  0026f	83 c4 04	 add	 esp, 4

; 843  :         if (s->pending != 0) {

  00272	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00275	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00279	74 11		 je	 SHORT $LN84@deflate

; 844  :             s->last_flush = -1;

  0027b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0027e	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 845  :             return Z_OK;

  00285	33 c0		 xor	 eax, eax
  00287	e9 0d 0d 00 00	 jmp	 $LN96@deflate
$LN84@deflate:

; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  0028c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0028f	83 78 04 39	 cmp	 DWORD PTR [eax+4], 57	; 00000039H
  00293	0f 85 38 04 00
	00		 jne	 $LN73@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  00299	6a 00		 push	 0
  0029b	6a 00		 push	 0
  0029d	6a 00		 push	 0
  0029f	e8 00 00 00 00	 call	 _crc32@12
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  002a7	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 852  :         put_byte(s, 31);

  002aa	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002b0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002b3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002b6	c6 04 10 1f	 mov	 BYTE PTR [eax+edx], 31	; 0000001fH
  002ba	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002bd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002c0	83 c1 01	 add	 ecx, 1
  002c3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002c6	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 853  :         put_byte(s, 139);

  002c9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002cc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002cf	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002d2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002d5	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002dc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002df	83 c2 01	 add	 edx, 1
  002e2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002e5	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 854  :         put_byte(s, 8);

  002e8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002eb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002ee	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002f1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002f4	c6 04 0a 08	 mov	 BYTE PTR [edx+ecx], 8
  002f8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002fb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002fe	83 c0 01	 add	 eax, 1
  00301	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00304	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 855  :         if (s->gzhead == Z_NULL) {

  00307	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0030a	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  0030e	0f 85 53 01 00
	00		 jne	 $LN72@deflate

; 856  :             put_byte(s, 0);

  00314	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00317	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0031a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0031d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00320	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00324	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00327	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0032a	83 c2 01	 add	 edx, 1
  0032d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00330	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 857  :             put_byte(s, 0);

  00333	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00336	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00339	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0033c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033f	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
  00343	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00346	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00349	83 c0 01	 add	 eax, 1
  0034c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0034f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 858  :             put_byte(s, 0);

  00352	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00355	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00358	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0035b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0035e	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  00362	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00365	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00368	83 c1 01	 add	 ecx, 1
  0036b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0036e	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 859  :             put_byte(s, 0);

  00371	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00374	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00377	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0037a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0037d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00381	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00384	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00387	83 c2 01	 add	 edx, 1
  0038a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0038d	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 860  :             put_byte(s, 0);

  00390	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00393	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00396	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00399	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0039c	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
  003a0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003a3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003a6	83 c0 01	 add	 eax, 1
  003a9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003ac	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 861  :             put_byte(s, s->level == 9 ? 2 :
; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));

  003af	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003b2	83 ba 84 00 00
	00 09		 cmp	 DWORD PTR [edx+132], 9
  003b9	75 09		 jne	 SHORT $LN100@deflate
  003bb	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR tv259[ebp], 2
  003c2	eb 2e		 jmp	 SHORT $LN101@deflate
$LN100@deflate:
  003c4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003c7	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  003ce	7d 15		 jge	 SHORT $LN98@deflate
  003d0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003d3	83 b9 84 00 00
	00 02		 cmp	 DWORD PTR [ecx+132], 2
  003da	7c 09		 jl	 SHORT $LN98@deflate
  003dc	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], 0
  003e3	eb 07		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  003e5	c7 45 c8 04 00
	00 00		 mov	 DWORD PTR tv258[ebp], 4
$LN99@deflate:
  003ec	8b 55 c8	 mov	 edx, DWORD PTR tv258[ebp]
  003ef	89 55 cc	 mov	 DWORD PTR tv259[ebp], edx
$LN101@deflate:
  003f2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003f5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003f8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003fb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003fe	8a 55 cc	 mov	 dl, BYTE PTR tv259[ebp]
  00401	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00404	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00407	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0040a	83 c1 01	 add	 ecx, 1
  0040d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00410	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 864  :             put_byte(s, OS_CODE);

  00413	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00416	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00419	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0041c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0041f	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00426	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00429	83 c2 01	 add	 edx, 1
  0042c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0042f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 865  :             s->status = BUSY_STATE;

  00432	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00435	c7 41 04 71 00
	00 00		 mov	 DWORD PTR [ecx+4], 113	; 00000071H

; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  0043c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0043f	52		 push	 edx
  00440	e8 00 00 00 00	 call	 _flush_pending
  00445	83 c4 04	 add	 esp, 4

; 869  :             if (s->pending != 0) {

  00448	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0044b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0044f	74 11		 je	 SHORT $LN71@deflate

; 870  :                 s->last_flush = -1;

  00451	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00454	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1

; 871  :                 return Z_OK;

  0045b	33 c0		 xor	 eax, eax
  0045d	e9 37 0b 00 00	 jmp	 $LN96@deflate
$LN71@deflate:

; 872  :             }
; 873  :         }
; 874  :         else {

  00462	e9 6a 02 00 00	 jmp	 $LN73@deflate
$LN72@deflate:

; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +
; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );

  00467	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0046a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0046d	33 c9		 xor	 ecx, ecx
  0046f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00472	0f 95 c1	 setne	 cl
  00475	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00478	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0047b	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0047e	f7 da		 neg	 edx
  00480	1b d2		 sbb	 edx, edx
  00482	83 e2 02	 and	 edx, 2
  00485	03 ca		 add	 ecx, edx
  00487	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0048a	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0048d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00490	f7 d8		 neg	 eax
  00492	1b c0		 sbb	 eax, eax
  00494	83 e0 04	 and	 eax, 4
  00497	03 c8		 add	 ecx, eax
  00499	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0049c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0049f	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  004a2	f7 da		 neg	 edx
  004a4	1b d2		 sbb	 edx, edx
  004a6	83 e2 08	 and	 edx, 8
  004a9	03 ca		 add	 ecx, edx
  004ab	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004ae	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  004b1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004b4	f7 d8		 neg	 eax
  004b6	1b c0		 sbb	 eax, eax
  004b8	83 e0 10	 and	 eax, 16			; 00000010H
  004bb	03 c8		 add	 ecx, eax
  004bd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004c0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004c3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004c6	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  004c9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  004cc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004cf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004d2	83 c1 01	 add	 ecx, 1
  004d5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004d8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  004db	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004de	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004e1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004e4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004ea	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004f0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004f3	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  004f6	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004f9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  004fc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004ff	83 c2 01	 add	 edx, 1
  00502	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00505	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  00508	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0050b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0050e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00511	c1 e8 08	 shr	 eax, 8
  00514	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00519	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0051c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0051f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00522	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00525	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00528	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0052b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0052e	83 c0 01	 add	 eax, 1
  00531	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00534	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  00537	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0053a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0053d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00540	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00543	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00549	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0054c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0054f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00552	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00555	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00558	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0055b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0055e	83 c1 01	 add	 ecx, 1
  00561	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00564	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00567	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0056a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0056d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00570	c1 ea 18	 shr	 edx, 24			; 00000018H
  00573	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00579	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0057c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0057f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00582	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00585	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00588	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0058b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0058e	83 c2 01	 add	 edx, 1
  00591	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00594	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 885  :             put_byte(s, s->level == 9 ? 2 :
; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));

  00597	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0059a	83 b9 84 00 00
	00 09		 cmp	 DWORD PTR [ecx+132], 9
  005a1	75 09		 jne	 SHORT $LN104@deflate
  005a3	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR tv359[ebp], 2
  005aa	eb 2e		 jmp	 SHORT $LN105@deflate
$LN104@deflate:
  005ac	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005af	83 ba 88 00 00
	00 02		 cmp	 DWORD PTR [edx+136], 2
  005b6	7d 15		 jge	 SHORT $LN102@deflate
  005b8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005bb	83 b8 84 00 00
	00 02		 cmp	 DWORD PTR [eax+132], 2
  005c2	7c 09		 jl	 SHORT $LN102@deflate
  005c4	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv358[ebp], 0
  005cb	eb 07		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  005cd	c7 45 c0 04 00
	00 00		 mov	 DWORD PTR tv358[ebp], 4
$LN103@deflate:
  005d4	8b 4d c0	 mov	 ecx, DWORD PTR tv358[ebp]
  005d7	89 4d c4	 mov	 DWORD PTR tv359[ebp], ecx
$LN105@deflate:
  005da	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005dd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  005e0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005e3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005e6	8a 4d c4	 mov	 cl, BYTE PTR tv359[ebp]
  005e9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  005ec	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005f2	83 c0 01	 add	 eax, 1
  005f5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005f8	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 888  :             put_byte(s, s->gzhead->os & 0xff);

  005fb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  005fe	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00601	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00604	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0060a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0060d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00610	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00613	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00616	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00619	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0061c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0061f	83 c1 01	 add	 ecx, 1
  00622	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00625	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00628	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0062b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0062e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00632	74 5d		 je	 SHORT $LN69@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  00634	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00637	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0063a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0063d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00643	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00646	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00649	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0064c	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0064f	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00652	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00655	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00658	83 c1 01	 add	 ecx, 1
  0065b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0065e	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00661	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00664	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00667	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0066a	c1 ea 08	 shr	 edx, 8
  0066d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00673	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00676	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00679	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0067c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0067f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00682	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00685	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00688	83 c2 01	 add	 edx, 1
  0068b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0068e	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN69@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  00691	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00694	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00697	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0069b	74 20		 je	 SHORT $LN68@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,
; 895  :                                     s->pending);

  0069d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006a0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006a3	51		 push	 ecx
  006a4	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  006aa	50		 push	 eax
  006ab	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  006ae	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  006b1	52		 push	 edx
  006b2	e8 00 00 00 00	 call	 _crc32@12
  006b7	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  006ba	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN68@deflate:

; 896  :             s->gzindex = 0;

  006bd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006c0	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 897  :             s->status = EXTRA_STATE;

  006c7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006ca	c7 40 04 45 00
	00 00		 mov	 DWORD PTR [eax+4], 69	; 00000045H
$LN73@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  006d1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006d4	83 79 04 45	 cmp	 DWORD PTR [ecx+4], 69	; 00000045H
  006d8	0f 85 a2 01 00
	00		 jne	 $LN67@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  006de	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006e1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  006e4	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  006e8	0f 84 88 01 00
	00		 je	 $LN66@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */

  006ee	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006f1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006f4	89 55 ec	 mov	 DWORD PTR _beg$78020[ebp], edx

; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  006f7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006fa	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006fd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00700	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00706	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00709	2b 50 20	 sub	 edx, DWORD PTR [eax+32]
  0070c	89 55 e8	 mov	 DWORD PTR _left$78021[ebp], edx
$LN65@deflate:

; 904  :             while (s->pending + left > s->pending_buf_size) {

  0070f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00712	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00715	03 55 e8	 add	 edx, DWORD PTR _left$78021[ebp]
  00718	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0071b	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0071e	0f 86 cf 00 00
	00		 jbe	 $LN64@deflate

; 905  :                 uInt copy = s->pending_buf_size - s->pending;

  00724	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00727	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0072a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0072d	2b 42 14	 sub	 eax, DWORD PTR [edx+20]
  00730	89 45 e4	 mov	 DWORD PTR _copy$78025[ebp], eax

; 906  :                 zmemcpy(s->pending_buf + s->pending,
; 907  :                         s->gzhead->extra + s->gzindex, copy);

  00733	8b 4d e4	 mov	 ecx, DWORD PTR _copy$78025[ebp]
  00736	51		 push	 ecx
  00737	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0073a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0073d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00740	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00743	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
  00746	51		 push	 ecx
  00747	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0074a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0074d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00750	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00753	51		 push	 ecx
  00754	e8 00 00 00 00	 call	 _memcpy
  00759	83 c4 0c	 add	 esp, 12			; 0000000cH

; 908  :                 s->pending = s->pending_buf_size;

  0075c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0075f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00762	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00765	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN63@deflate:

; 909  :                 HCRC_UPDATE(beg);

  00768	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0076b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0076e	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00772	74 31		 je	 SHORT $LN62@deflate
  00774	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00777	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0077a	3b 45 ec	 cmp	 eax, DWORD PTR _beg$78020[ebp]
  0077d	76 26		 jbe	 SHORT $LN62@deflate
  0077f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00782	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00785	2b 55 ec	 sub	 edx, DWORD PTR _beg$78020[ebp]
  00788	52		 push	 edx
  00789	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0078c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0078f	03 4d ec	 add	 ecx, DWORD PTR _beg$78020[ebp]
  00792	51		 push	 ecx
  00793	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00796	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 _crc32@12
  0079f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007a2	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN62@deflate:
  007a5	33 d2		 xor	 edx, edx
  007a7	75 bf		 jne	 SHORT $LN63@deflate

; 910  :                 s->gzindex += copy;

  007a9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  007ac	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  007af	03 4d e4	 add	 ecx, DWORD PTR _copy$78025[ebp]
  007b2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007b5	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 911  :                 flush_pending(strm);

  007b8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  007bb	50		 push	 eax
  007bc	e8 00 00 00 00	 call	 _flush_pending
  007c1	83 c4 04	 add	 esp, 4

; 912  :                 if (s->pending != 0) {

  007c4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  007c7	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  007cb	74 11		 je	 SHORT $LN59@deflate

; 913  :                     s->last_flush = -1;

  007cd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007d0	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 914  :                     return Z_OK;

  007d7	33 c0		 xor	 eax, eax
  007d9	e9 bb 07 00 00	 jmp	 $LN96@deflate
$LN59@deflate:

; 915  :                 }
; 916  :                 beg = 0;

  007de	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _beg$78020[ebp], 0

; 917  :                 left -= copy;

  007e5	8b 45 e8	 mov	 eax, DWORD PTR _left$78021[ebp]
  007e8	2b 45 e4	 sub	 eax, DWORD PTR _copy$78025[ebp]
  007eb	89 45 e8	 mov	 DWORD PTR _left$78021[ebp], eax

; 918  :             }

  007ee	e9 1c ff ff ff	 jmp	 $LN65@deflate
$LN64@deflate:

; 919  :             zmemcpy(s->pending_buf + s->pending,
; 920  :                     s->gzhead->extra + s->gzindex, left);

  007f3	8b 4d e8	 mov	 ecx, DWORD PTR _left$78021[ebp]
  007f6	51		 push	 ecx
  007f7	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007fa	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  007fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00800	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00803	03 4a 20	 add	 ecx, DWORD PTR [edx+32]
  00806	51		 push	 ecx
  00807	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0080a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0080d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00810	03 4a 14	 add	 ecx, DWORD PTR [edx+20]
  00813	51		 push	 ecx
  00814	e8 00 00 00 00	 call	 _memcpy
  00819	83 c4 0c	 add	 esp, 12			; 0000000cH

; 921  :             s->pending += left;

  0081c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0081f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00822	03 4d e8	 add	 ecx, DWORD PTR _left$78021[ebp]
  00825	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00828	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN58@deflate:

; 922  :             HCRC_UPDATE(beg);

  0082b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0082e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00831	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00835	74 31		 je	 SHORT $LN57@deflate
  00837	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0083a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0083d	3b 45 ec	 cmp	 eax, DWORD PTR _beg$78020[ebp]
  00840	76 26		 jbe	 SHORT $LN57@deflate
  00842	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00845	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00848	2b 55 ec	 sub	 edx, DWORD PTR _beg$78020[ebp]
  0084b	52		 push	 edx
  0084c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0084f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00852	03 4d ec	 add	 ecx, DWORD PTR _beg$78020[ebp]
  00855	51		 push	 ecx
  00856	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00859	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0085c	50		 push	 eax
  0085d	e8 00 00 00 00	 call	 _crc32@12
  00862	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00865	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN57@deflate:
  00868	33 d2		 xor	 edx, edx
  0086a	75 bf		 jne	 SHORT $LN58@deflate

; 923  :             s->gzindex = 0;

  0086c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0086f	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
$LN66@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  00876	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00879	c7 41 04 49 00
	00 00		 mov	 DWORD PTR [ecx+4], 73	; 00000049H
$LN67@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  00880	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00883	83 7a 04 49	 cmp	 DWORD PTR [edx+4], 73	; 00000049H
  00887	0f 85 3a 01 00
	00		 jne	 $LN54@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  0088d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00890	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00893	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00897	0f 84 20 01 00
	00		 je	 $LN53@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  0089d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008a0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008a3	89 45 e0	 mov	 DWORD PTR _beg$78037[ebp], eax
$LN52@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  008a6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008a9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008ac	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  008af	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  008b2	75 6e		 jne	 SHORT $LN49@deflate
$LN48@deflate:

; 933  :                     HCRC_UPDATE(beg);

  008b4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008b7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  008ba	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  008be	74 31		 je	 SHORT $LN47@deflate
  008c0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  008c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008c6	3b 4d e0	 cmp	 ecx, DWORD PTR _beg$78037[ebp]
  008c9	76 26		 jbe	 SHORT $LN47@deflate
  008cb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008ce	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008d1	2b 45 e0	 sub	 eax, DWORD PTR _beg$78037[ebp]
  008d4	50		 push	 eax
  008d5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008d8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  008db	03 55 e0	 add	 edx, DWORD PTR _beg$78037[ebp]
  008de	52		 push	 edx
  008df	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  008e2	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  008e5	51		 push	 ecx
  008e6	e8 00 00 00 00	 call	 _crc32@12
  008eb	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  008ee	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN47@deflate:
  008f1	33 c0		 xor	 eax, eax
  008f3	75 bf		 jne	 SHORT $LN48@deflate

; 934  :                     flush_pending(strm);

  008f5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  008f8	51		 push	 ecx
  008f9	e8 00 00 00 00	 call	 _flush_pending
  008fe	83 c4 04	 add	 esp, 4

; 935  :                     if (s->pending != 0) {

  00901	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00904	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00908	74 11		 je	 SHORT $LN44@deflate

; 936  :                         s->last_flush = -1;

  0090a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0090d	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 937  :                         return Z_OK;

  00914	33 c0		 xor	 eax, eax
  00916	e9 7e 06 00 00	 jmp	 $LN96@deflate
$LN44@deflate:

; 938  :                     }
; 939  :                     beg = 0;

  0091b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _beg$78037[ebp], 0
$LN49@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  00922	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00925	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00928	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0092b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0092e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00931	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00935	89 45 dc	 mov	 DWORD PTR _val$78038[ebp], eax
  00938	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0093b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0093e	83 c2 01	 add	 edx, 1
  00941	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00944	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 942  :                 put_byte(s, val);

  00947	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0094a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0094d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00950	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00953	8a 45 dc	 mov	 al, BYTE PTR _val$78038[ebp]
  00956	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00959	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0095c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0095f	83 c2 01	 add	 edx, 1
  00962	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00965	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 943  :             } while (val != 0);

  00968	83 7d dc 00	 cmp	 DWORD PTR _val$78038[ebp], 0
  0096c	0f 85 34 ff ff
	ff		 jne	 $LN52@deflate
$LN43@deflate:

; 944  :             HCRC_UPDATE(beg);

  00972	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00975	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00978	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0097c	74 31		 je	 SHORT $LN42@deflate
  0097e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00981	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00984	3b 4d e0	 cmp	 ecx, DWORD PTR _beg$78037[ebp]
  00987	76 26		 jbe	 SHORT $LN42@deflate
  00989	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0098c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0098f	2b 45 e0	 sub	 eax, DWORD PTR _beg$78037[ebp]
  00992	50		 push	 eax
  00993	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00996	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00999	03 55 e0	 add	 edx, DWORD PTR _beg$78037[ebp]
  0099c	52		 push	 edx
  0099d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009a0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  009a3	51		 push	 ecx
  009a4	e8 00 00 00 00	 call	 _crc32@12
  009a9	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  009ac	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN42@deflate:
  009af	33 c0		 xor	 eax, eax
  009b1	75 bf		 jne	 SHORT $LN43@deflate

; 945  :             s->gzindex = 0;

  009b3	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  009b6	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
$LN53@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  009bd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  009c0	c7 42 04 5b 00
	00 00		 mov	 DWORD PTR [edx+4], 91	; 0000005bH
$LN54@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  009c7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  009ca	83 78 04 5b	 cmp	 DWORD PTR [eax+4], 91	; 0000005bH
  009ce	0f 85 30 01 00
	00		 jne	 $LN39@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  009d4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  009d7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  009da	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  009de	0f 84 16 01 00
	00		 je	 $LN38@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  009e4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  009e7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  009ea	89 4d d8	 mov	 DWORD PTR _beg$78055[ebp], ecx
$LN37@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  009ed	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  009f0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  009f3	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  009f6	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  009f9	75 6e		 jne	 SHORT $LN34@deflate
$LN33@deflate:

; 955  :                     HCRC_UPDATE(beg);

  009fb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  009fe	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00a01	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00a05	74 31		 je	 SHORT $LN32@deflate
  00a07	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a0a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a0d	3b 55 d8	 cmp	 edx, DWORD PTR _beg$78055[ebp]
  00a10	76 26		 jbe	 SHORT $LN32@deflate
  00a12	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a15	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00a18	2b 4d d8	 sub	 ecx, DWORD PTR _beg$78055[ebp]
  00a1b	51		 push	 ecx
  00a1c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a1f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a22	03 45 d8	 add	 eax, DWORD PTR _beg$78055[ebp]
  00a25	50		 push	 eax
  00a26	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00a29	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00a2c	52		 push	 edx
  00a2d	e8 00 00 00 00	 call	 _crc32@12
  00a32	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00a35	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN32@deflate:
  00a38	33 d2		 xor	 edx, edx
  00a3a	75 bf		 jne	 SHORT $LN33@deflate

; 956  :                     flush_pending(strm);

  00a3c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00a3f	50		 push	 eax
  00a40	e8 00 00 00 00	 call	 _flush_pending
  00a45	83 c4 04	 add	 esp, 4

; 957  :                     if (s->pending != 0) {

  00a48	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a4b	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00a4f	74 11		 je	 SHORT $LN29@deflate

; 958  :                         s->last_flush = -1;

  00a51	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a54	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 959  :                         return Z_OK;

  00a5b	33 c0		 xor	 eax, eax
  00a5d	e9 37 05 00 00	 jmp	 $LN96@deflate
$LN29@deflate:

; 960  :                     }
; 961  :                     beg = 0;

  00a62	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _beg$78055[ebp], 0
$LN34@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  00a69	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a6c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00a6f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00a72	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a75	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00a78	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00a7c	89 55 d4	 mov	 DWORD PTR _val$78056[ebp], edx
  00a7f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a82	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00a85	83 c1 01	 add	 ecx, 1
  00a88	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a8b	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 964  :                 put_byte(s, val);

  00a8e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a91	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a94	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a97	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a9a	8a 55 d4	 mov	 dl, BYTE PTR _val$78056[ebp]
  00a9d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00aa0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00aa3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00aa6	83 c1 01	 add	 ecx, 1
  00aa9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00aac	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 965  :             } while (val != 0);

  00aaf	83 7d d4 00	 cmp	 DWORD PTR _val$78056[ebp], 0
  00ab3	0f 85 34 ff ff
	ff		 jne	 $LN37@deflate
$LN28@deflate:

; 966  :             HCRC_UPDATE(beg);

  00ab9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00abc	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00abf	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00ac3	74 31		 je	 SHORT $LN27@deflate
  00ac5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00ac8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00acb	3b 45 d8	 cmp	 eax, DWORD PTR _beg$78055[ebp]
  00ace	76 26		 jbe	 SHORT $LN27@deflate
  00ad0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00ad3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ad6	2b 55 d8	 sub	 edx, DWORD PTR _beg$78055[ebp]
  00ad9	52		 push	 edx
  00ada	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00add	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00ae0	03 4d d8	 add	 ecx, DWORD PTR _beg$78055[ebp]
  00ae3	51		 push	 ecx
  00ae4	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00ae7	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00aea	50		 push	 eax
  00aeb	e8 00 00 00 00	 call	 _crc32@12
  00af0	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00af3	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN27@deflate:
  00af6	33 d2		 xor	 edx, edx
  00af8	75 bf		 jne	 SHORT $LN28@deflate
$LN38@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  00afa	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00afd	c7 40 04 67 00
	00 00		 mov	 DWORD PTR [eax+4], 103	; 00000067H
$LN39@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  00b04	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00b07	83 79 04 67	 cmp	 DWORD PTR [ecx+4], 103	; 00000067H
  00b0b	0f 85 df 00 00
	00		 jne	 $LN24@deflate

; 971  :         if (s->gzhead->hcrc) {

  00b11	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00b14	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00b17	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00b1b	0f 84 9f 00 00
	00		 je	 $LN23@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00b21	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00b24	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b27	83 c2 02	 add	 edx, 2
  00b2a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b2d	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00b30	76 26		 jbe	 SHORT $LN22@deflate

; 973  :                 flush_pending(strm);

  00b32	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00b35	51		 push	 ecx
  00b36	e8 00 00 00 00	 call	 _flush_pending
  00b3b	83 c4 04	 add	 esp, 4

; 974  :                 if (s->pending != 0) {

  00b3e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00b41	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00b45	74 11		 je	 SHORT $LN22@deflate

; 975  :                     s->last_flush = -1;

  00b47	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b4a	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 976  :                     return Z_OK;

  00b51	33 c0		 xor	 eax, eax
  00b53	e9 41 04 00 00	 jmp	 $LN96@deflate
$LN22@deflate:

; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00b58	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00b5b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00b5e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00b64	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b67	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b6a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b6d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00b70	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00b73	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00b76	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b79	83 c2 01	 add	 edx, 1
  00b7c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b7f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00b82	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00b85	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00b88	c1 ea 08	 shr	 edx, 8
  00b8b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00b91	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b94	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b97	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b9a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00b9d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00ba0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00ba3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ba6	83 c2 01	 add	 edx, 1
  00ba9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00bac	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00baf	6a 00		 push	 0
  00bb1	6a 00		 push	 0
  00bb3	6a 00		 push	 0
  00bb5	e8 00 00 00 00	 call	 _crc32@12
  00bba	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00bbd	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN23@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;

  00bc0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00bc3	c7 42 04 71 00
	00 00		 mov	 DWORD PTR [edx+4], 113	; 00000071H

; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  00bca	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bcd	50		 push	 eax
  00bce	e8 00 00 00 00	 call	 _flush_pending
  00bd3	83 c4 04	 add	 esp, 4

; 987  :         if (s->pending != 0) {

  00bd6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00bd9	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00bdd	74 11		 je	 SHORT $LN24@deflate

; 988  :             s->last_flush = -1;

  00bdf	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00be2	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 989  :             return Z_OK;

  00be9	33 c0		 xor	 eax, eax
  00beb	e9 a9 03 00 00	 jmp	 $LN96@deflate
$LN24@deflate:

; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

  00bf0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bf3	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00bf7	75 23		 jne	 SHORT $LN18@deflate
  00bf9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00bfc	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  00c00	75 1a		 jne	 SHORT $LN18@deflate
  00c02	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00c06	0f 84 9e 01 00
	00		 je	 $LN19@deflate
  00c0c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c0f	81 7a 04 9a 02
	00 00		 cmp	 DWORD PTR [edx+4], 666	; 0000029aH
  00c16	0f 84 8e 01 00
	00		 je	 $LN19@deflate
$LN18@deflate:

; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :
; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);

  00c1c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c1f	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00c26	75 15		 jne	 SHORT $LN110@deflate
  00c28	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00c2b	51		 push	 ecx
  00c2c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c2f	52		 push	 edx
  00c30	e8 00 00 00 00	 call	 _deflate_stored
  00c35	83 c4 08	 add	 esp, 8
  00c38	89 45 bc	 mov	 DWORD PTR tv689[ebp], eax
  00c3b	eb 70		 jmp	 SHORT $LN111@deflate
$LN110@deflate:
  00c3d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c40	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  00c47	75 15		 jne	 SHORT $LN108@deflate
  00c49	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00c4c	51		 push	 ecx
  00c4d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c50	52		 push	 edx
  00c51	e8 00 00 00 00	 call	 _deflate_huff
  00c56	83 c4 08	 add	 esp, 8
  00c59	89 45 b8	 mov	 DWORD PTR tv688[ebp], eax
  00c5c	eb 49		 jmp	 SHORT $LN109@deflate
$LN108@deflate:
  00c5e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c61	83 b8 88 00 00
	00 03		 cmp	 DWORD PTR [eax+136], 3
  00c68	75 15		 jne	 SHORT $LN106@deflate
  00c6a	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00c6d	51		 push	 ecx
  00c6e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c71	52		 push	 edx
  00c72	e8 00 00 00 00	 call	 _deflate_rle
  00c77	83 c4 08	 add	 esp, 8
  00c7a	89 45 b4	 mov	 DWORD PTR tv687[ebp], eax
  00c7d	eb 22		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  00c7f	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  00c82	50		 push	 eax
  00c83	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00c86	51		 push	 ecx
  00c87	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c8a	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00c90	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00c93	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR _configuration_table[eax+8]
  00c99	ff d1		 call	 ecx
  00c9b	83 c4 08	 add	 esp, 8
  00c9e	89 45 b4	 mov	 DWORD PTR tv687[ebp], eax
$LN107@deflate:
  00ca1	8b 55 b4	 mov	 edx, DWORD PTR tv687[ebp]
  00ca4	89 55 b8	 mov	 DWORD PTR tv688[ebp], edx
$LN109@deflate:
  00ca7	8b 45 b8	 mov	 eax, DWORD PTR tv688[ebp]
  00caa	89 45 bc	 mov	 DWORD PTR tv689[ebp], eax
$LN111@deflate:
  00cad	8b 4d bc	 mov	 ecx, DWORD PTR tv689[ebp]
  00cb0	89 4d d0	 mov	 DWORD PTR _bstate$78082[ebp], ecx

; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  00cb3	83 7d d0 02	 cmp	 DWORD PTR _bstate$78082[ebp], 2
  00cb7	74 06		 je	 SHORT $LN16@deflate
  00cb9	83 7d d0 03	 cmp	 DWORD PTR _bstate$78082[ebp], 3
  00cbd	75 0a		 jne	 SHORT $LN17@deflate
$LN16@deflate:

; 1006 :             s->status = FINISH_STATE;

  00cbf	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00cc2	c7 42 04 9a 02
	00 00		 mov	 DWORD PTR [edx+4], 666	; 0000029aH
$LN17@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  00cc9	83 7d d0 00	 cmp	 DWORD PTR _bstate$78082[ebp], 0
  00ccd	74 06		 je	 SHORT $LN14@deflate
  00ccf	83 7d d0 02	 cmp	 DWORD PTR _bstate$78082[ebp], 2
  00cd3	75 1a		 jne	 SHORT $LN15@deflate
$LN14@deflate:

; 1009 :             if (strm->avail_out == 0) {

  00cd5	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00cd8	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00cdc	75 0a		 jne	 SHORT $LN13@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  00cde	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00ce1	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1
$LN13@deflate:

; 1011 :             }
; 1012 :             return Z_OK;

  00ce8	33 c0		 xor	 eax, eax
  00cea	e9 aa 02 00 00	 jmp	 $LN96@deflate
$LN15@deflate:

; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  00cef	83 7d d0 01	 cmp	 DWORD PTR _bstate$78082[ebp], 1
  00cf3	0f 85 b1 00 00
	00		 jne	 $LN19@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00cf9	83 7d 0c 01	 cmp	 DWORD PTR _flush$[ebp], 1
  00cfd	75 0e		 jne	 SHORT $LN11@deflate

; 1023 :                 _tr_align(s);

  00cff	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00d02	52		 push	 edx
  00d03	e8 00 00 00 00	 call	 __tr_align
  00d08	83 c4 04	 add	 esp, 4
  00d0b	eb 77		 jmp	 SHORT $LN10@deflate
$LN11@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00d0d	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  00d11	74 71		 je	 SHORT $LN10@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  00d13	6a 00		 push	 0
  00d15	6a 00		 push	 0
  00d17	6a 00		 push	 0
  00d19	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d1c	50		 push	 eax
  00d1d	e8 00 00 00 00	 call	 __tr_stored_block
  00d22	83 c4 10	 add	 esp, 16			; 00000010H

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00d25	83 7d 0c 03	 cmp	 DWORD PTR _flush$[ebp], 3
  00d29	75 59		 jne	 SHORT $LN10@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  00d2b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d2e	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00d31	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d34	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00d37	33 c0		 xor	 eax, eax
  00d39	66 89 44 51 fe	 mov	 WORD PTR [ecx+edx*2-2], ax
  00d3e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d41	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00d44	8d 44 12 fe	 lea	 eax, DWORD PTR [edx+edx-2]
  00d48	50		 push	 eax
  00d49	6a 00		 push	 0
  00d4b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d4e	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00d51	52		 push	 edx
  00d52	e8 00 00 00 00	 call	 _memset
  00d57	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  00d5a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d5d	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00d61	75 21		 jne	 SHORT $LN10@deflate

; 1032 :                         s->strstart = 0;

  00d63	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d66	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0

; 1033 :                         s->block_start = 0L;

  00d6d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00d70	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 1034 :                         s->insert = 0;

  00d77	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d7a	c7 80 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5812], 0
$LN10@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  00d84	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00d87	51		 push	 ecx
  00d88	e8 00 00 00 00	 call	 _flush_pending
  00d8d	83 c4 04	 add	 esp, 4

; 1039 :             if (strm->avail_out == 0) {

  00d90	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00d93	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00d97	75 11		 jne	 SHORT $LN19@deflate

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

  00d99	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d9c	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1

; 1041 :               return Z_OK;

  00da3	33 c0		 xor	 eax, eax
  00da5	e9 ef 01 00 00	 jmp	 $LN96@deflate
$LN19@deflate:

; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  00daa	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00dae	74 07		 je	 SHORT $LN5@deflate
  00db0	33 c0		 xor	 eax, eax
  00db2	e9 e2 01 00 00	 jmp	 $LN96@deflate
$LN5@deflate:

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  00db7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00dba	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00dbe	7f 0a		 jg	 SHORT $LN4@deflate
  00dc0	b8 01 00 00 00	 mov	 eax, 1
  00dc5	e9 cf 01 00 00	 jmp	 $LN96@deflate
$LN4@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  00dca	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00dcd	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  00dd1	0f 85 64 01 00
	00		 jne	 $LN3@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  00dd7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00dda	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00ddd	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00de3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00de6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00de9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00dec	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00def	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00df2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00df5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00df8	83 c1 01	 add	 ecx, 1
  00dfb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00dfe	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00e01	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00e04	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e07	c1 e9 08	 shr	 ecx, 8
  00e0a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00e10	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e13	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e16	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e19	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00e1c	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00e1f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00e22	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e25	83 c1 01	 add	 ecx, 1
  00e28	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e2b	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00e2e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00e31	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e34	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e37	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00e3d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e40	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e43	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e46	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00e49	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00e4c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00e4f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e52	83 c1 01	 add	 ecx, 1
  00e55	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e58	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00e5b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00e5e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e61	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00e64	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00e6a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e6d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e70	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e73	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00e76	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00e79	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00e7c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e7f	83 c1 01	 add	 ecx, 1
  00e82	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e85	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00e88	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00e8b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00e8e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00e94	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e97	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e9a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e9d	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00ea0	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00ea3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00ea6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00ea9	83 c1 01	 add	 ecx, 1
  00eac	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00eaf	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00eb2	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00eb5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00eb8	c1 e9 08	 shr	 ecx, 8
  00ebb	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00ec1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00ec4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00ec7	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00eca	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00ecd	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00ed0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00ed3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00ed6	83 c1 01	 add	 ecx, 1
  00ed9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00edc	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00edf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00ee2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00ee5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ee8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00eee	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00ef1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00ef4	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00ef7	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00efa	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00efd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00f00	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f03	83 c1 01	 add	 ecx, 1
  00f06	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f09	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00f0c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00f0f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00f12	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00f15	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00f1b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f1e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00f21	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f24	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00f27	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00f2a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00f2d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00f30	83 c1 01	 add	 ecx, 1
  00f33	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f36	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1060 :     }
; 1061 :     else

  00f39	eb 2f		 jmp	 SHORT $LN2@deflate
$LN3@deflate:

; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00f3b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00f3e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00f41	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00f44	51		 push	 ecx
  00f45	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f48	52		 push	 edx
  00f49	e8 00 00 00 00	 call	 _putShortMSB
  00f4e	83 c4 08	 add	 esp, 8

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00f51	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00f54	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00f57	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00f5d	51		 push	 ecx
  00f5e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f61	52		 push	 edx
  00f62	e8 00 00 00 00	 call	 _putShortMSB
  00f67	83 c4 08	 add	 esp, 8
$LN2@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  00f6a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00f6d	50		 push	 eax
  00f6e	e8 00 00 00 00	 call	 _flush_pending
  00f73	83 c4 04	 add	 esp, 4

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00f76	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00f79	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00f7d	7e 0e		 jle	 SHORT $LN1@deflate
  00f7f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f82	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00f85	f7 d8		 neg	 eax
  00f87	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00f8a	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN1@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00f8d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00f90	33 c0		 xor	 eax, eax
  00f92	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00f96	0f 94 c0	 sete	 al
$LN96@deflate:

; 1073 : }

  00f99	8b e5		 mov	 esp, ebp
  00f9b	5d		 pop	 ebp
  00f9c	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateParams@12
; Function compile flags: /Odtp
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_err$77890 = -12					; size = 4
_func$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	74 0a		 je	 SHORT $LN12@deflatePar
  00016	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0001b	e9 96 01 00 00	 jmp	 $LN13@deflatePar
$LN12@deflatePar:

; 577  :     s = strm->state;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00023	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00026	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  00029	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  0002d	75 07		 jne	 SHORT $LN11@deflatePar
  0002f	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN11@deflatePar:

; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00036	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  0003a	7c 12		 jl	 SHORT $LN9@deflatePar
  0003c	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  00040	7f 0c		 jg	 SHORT $LN9@deflatePar
  00042	83 7d 10 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  00046	7c 06		 jl	 SHORT $LN9@deflatePar
  00048	83 7d 10 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  0004c	7e 0a		 jle	 SHORT $LN10@deflatePar
$LN9@deflatePar:

; 585  :         return Z_STREAM_ERROR;

  0004e	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00053	e9 5e 01 00 00	 jmp	 $LN13@deflatePar
$LN10@deflatePar:

; 586  :     }
; 587  :     func = configuration_table[s->level].func;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00061	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00064	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR _configuration_table[ecx+8]
  0006a	89 55 f8	 mov	 DWORD PTR _func$[ebp], edx

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 590  :         s->high_water) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00070	8b 4d 10	 mov	 ecx, DWORD PTR _strategy$[ebp]
  00073	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  00079	75 11		 jne	 SHORT $LN7@deflatePar
  0007b	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  0007e	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00081	8b 45 f8	 mov	 eax, DWORD PTR _func$[ebp]
  00084	3b 82 08 00 00
	00		 cmp	 eax, DWORD PTR _configuration_table[edx+8]
  0008a	74 3b		 je	 SHORT $LN8@deflatePar
$LN7@deflatePar:
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0008f	83 b9 c0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5824], 0
  00096	74 2f		 je	 SHORT $LN8@deflatePar

; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  00098	6a 05		 push	 5
  0009a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _deflate@8
  000a3	89 45 f4	 mov	 DWORD PTR _err$77890[ebp], eax

; 593  :         if (err == Z_STREAM_ERROR)

  000a6	83 7d f4 fe	 cmp	 DWORD PTR _err$77890[ebp], -2 ; fffffffeH
  000aa	75 08		 jne	 SHORT $LN6@deflatePar

; 594  :             return err;

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _err$77890[ebp]
  000af	e9 02 01 00 00	 jmp	 $LN13@deflatePar
$LN6@deflatePar:

; 595  :         if (strm->avail_out == 0)

  000b4	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000b7	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000bb	75 0a		 jne	 SHORT $LN8@deflatePar

; 596  :             return Z_BUF_ERROR;

  000bd	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000c2	e9 ef 00 00 00	 jmp	 $LN13@deflatePar
$LN8@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ca	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000d0	3b 55 0c	 cmp	 edx, DWORD PTR _level$[ebp]
  000d3	0f 84 cf 00 00
	00		 je	 $LN4@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000dc	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  000e3	75 62		 jne	 SHORT $LN3@deflatePar
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	83 b9 b0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5808], 0
  000ef	74 56		 je	 SHORT $LN3@deflatePar

; 600  :             if (s->matches == 1)

  000f1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000f4	83 ba b0 16 00
	00 01		 cmp	 DWORD PTR [edx+5808], 1
  000fb	75 0e		 jne	 SHORT $LN2@deflatePar

; 601  :                 slide_hash(s);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _slide_hash
  00106	83 c4 04	 add	 esp, 4

; 602  :             else

  00109	eb 13		 jmp	 SHORT $LN1@deflatePar
$LN2@deflatePar:

; 603  :                 CLEAR_HASH(s);

  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0010e	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00111	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00114	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00117	33 c0		 xor	 eax, eax
  00119	66 89 44 51 fe	 mov	 WORD PTR [ecx+edx*2-2], ax
$LN1@deflatePar:
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00121	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00124	8d 44 12 fe	 lea	 eax, DWORD PTR [edx+edx-2]
  00128	50		 push	 eax
  00129	6a 00		 push	 0
  0012b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0012e	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 _memset
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0013d	c7 80 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5808], 0
$LN3@deflatePar:

; 605  :         }
; 606  :         s->level = level;

  00147	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0014a	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  0014d	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx

; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  00153	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  00156	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00159	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+2]
  00160	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00163	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 608  :         s->good_match       = configuration_table[level].good_length;

  00169	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  0016c	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0016f	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax]
  00176	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00179	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  00182	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00185	0f b7 88 04 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+4]
  0018c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0018f	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  00195	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  00198	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0019b	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+6]
  001a2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001a5	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN4@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001ab	8b 4d 10	 mov	 ecx, DWORD PTR _strategy$[ebp]
  001ae	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 613  :     return Z_OK;

  001b4	33 c0		 xor	 eax, eax
$LN13@deflatePar:

; 614  : }

  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
END
