; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Odtp
; File c:\public\php\phpdev\vc9\php-5.6.33-src\ext\sqlite3\compat\zlib\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 406  :     int ret=-1;

  00004	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 407  :     if (stream!=NULL)

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0000f	74 09		 je	 SHORT $LN1@win32_erro

; 408  :     {
; 409  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx
$LN1@win32_erro:

; 410  :     }
; 411  :     return ret;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 412  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_hFile$79559 = -8					; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 388  :     int ret=-1;

  00006	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 389  : 
; 390  :     if (stream!=NULL)

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00011	74 2b		 je	 SHORT $LN2@win32_clos

; 391  :     {
; 392  :         HANDLE hFile;
; 393  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	89 4d f8	 mov	 DWORD PTR _hFile$79559[ebp], ecx

; 394  :         if (hFile != NULL)

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hFile$79559[ebp], 0
  0001f	74 11		 je	 SHORT $LN1@win32_clos

; 395  :         {
; 396  :             CloseHandle(hFile);

  00021	8b 55 f8	 mov	 edx, DWORD PTR _hFile$79559[ebp]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 397  :             ret=0;

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN1@win32_clos:

; 398  :         }
; 399  :         free(stream);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN2@win32_clos:

; 400  :     }
; 401  :     return ret;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 402  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_win32_close_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _MySetFilePointerEx
_TEXT	SEGMENT
_dwNewPos$ = -12					; size = 4
_lHigh$ = -8						; size = 4
_fOk$ = -4						; size = 4
_hFile$ = 8						; size = 4
_pos$ = 12						; size = 8
_newPos$ = 20						; size = 4
_dwMoveMethod$ = 24					; size = 4
_MySetFilePointerEx PROC				; COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 243  : #ifdef IOWIN32_USING_WINRT_API
; 244  :     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
; 245  : #else
; 246  :     LONG lHigh = pos.HighPart;

  00006	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp+4]
  00009	89 45 f8	 mov	 DWORD PTR _lHigh$[ebp], eax

; 247  :     DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, dwMoveMethod);

  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _dwMoveMethod$[ebp]
  0000f	51		 push	 ecx
  00010	8d 55 f8	 lea	 edx, DWORD PTR _lHigh$[ebp]
  00013	52		 push	 edx
  00014	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00022	89 45 f4	 mov	 DWORD PTR _dwNewPos$[ebp], eax

; 248  :     BOOL fOk = TRUE;

  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 1

; 249  :     if (dwNewPos == 0xFFFFFFFF)

  0002c	83 7d f4 ff	 cmp	 DWORD PTR _dwNewPos$[ebp], -1
  00030	75 11		 jne	 SHORT $LN3@MySetFileP

; 250  :         if (GetLastError() != NO_ERROR)

  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN3@MySetFileP

; 251  :             fOk = FALSE;

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 0
$LN3@MySetFileP:

; 252  :     if ((newPos != NULL) && (fOk))

  00043	83 7d 14 00	 cmp	 DWORD PTR _newPos$[ebp], 0
  00047	74 17		 je	 SHORT $LN1@MySetFileP
  00049	83 7d fc 00	 cmp	 DWORD PTR _fOk$[ebp], 0
  0004d	74 11		 je	 SHORT $LN1@MySetFileP

; 253  :     {
; 254  :         newPos->LowPart = dwNewPos;

  0004f	8b 55 14	 mov	 edx, DWORD PTR _newPos$[ebp]
  00052	8b 45 f4	 mov	 eax, DWORD PTR _dwNewPos$[ebp]
  00055	89 02		 mov	 DWORD PTR [edx], eax

; 255  :         newPos->HighPart = lHigh;

  00057	8b 4d 14	 mov	 ecx, DWORD PTR _newPos$[ebp]
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _lHigh$[ebp]
  0005d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN1@MySetFileP:

; 256  :     }
; 257  :     return fOk;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _fOk$[ebp]

; 258  : #endif
; 259  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_MySetFilePointerEx ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_dwErr$79423 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 222  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 223  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 224  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_writ

; 225  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_writ:

; 226  : 
; 227  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_writ

; 228  :     {
; 229  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_writ

; 230  :         {
; 231  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79423[ebp], eax

; 232  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79423[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_writ

; 233  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79423[ebp], 0
$LN1@win32_writ:

; 234  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79423[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_writ:

; 235  :         }
; 236  :     }
; 237  : 
; 238  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 239  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_dwErr$79400 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 200  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 201  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 202  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_read

; 203  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_read:

; 204  : 
; 205  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_read

; 206  :     {
; 207  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_read

; 208  :         {
; 209  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79400[ebp], eax

; 210  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79400[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_read

; 211  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79400[ebp], 0
$LN1@win32_read:

; 212  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79400[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_read:

; 213  :         }
; 214  :     }
; 215  : 
; 216  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 217  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_read_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_w32fiow$79292 = -12					; size = 8
_ret$ = -4						; size = 4
_hFile$ = 8						; size = 4
_win32_build_iowin PROC					; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 79   :     voidpf ret=NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 80   : 
; 81   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  0000d	83 7d 08 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00011	74 40		 je	 SHORT $LN3@win32_buil
  00013	83 7d 08 ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00017	74 3a		 je	 SHORT $LN3@win32_buil

; 82   :     {
; 83   :         WIN32FILE_IOWIN w32fiow;
; 84   :         w32fiow.hf = hFile;

  00019	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  0001c	89 45 f4	 mov	 DWORD PTR _w32fiow$79292[ebp], eax

; 85   :         w32fiow.error = 0;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _w32fiow$79292[ebp+4], 0

; 86   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00026	6a 08		 push	 8
  00028	e8 00 00 00 00	 call	 _malloc
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 87   : 
; 88   :         if (ret==NULL)

  00033	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00037	75 0c		 jne	 SHORT $LN2@win32_buil

; 89   :             CloseHandle(hFile);

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 90   :         else

  00043	eb 0e		 jmp	 SHORT $LN3@win32_buil
$LN2@win32_buil:

; 91   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  00045	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  00048	8b 45 f4	 mov	 eax, DWORD PTR _w32fiow$79292[ebp]
  0004b	89 02		 mov	 DWORD PTR [edx], eax
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _w32fiow$79292[ebp+4]
  00050	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@win32_buil:

; 92   :     }
; 93   :     return ret;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 94   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_win32_build_iowin ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_lpdwDesiredAccess$ = 12				; size = 4
_lpdwCreationDisposition$ = 16				; size = 4
_lpdwShareMode$ = 20					; size = 4
_lpdwFlagsAndAttributes$ = 24				; size = 4
_win32_translate_open_mode PROC				; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00003	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _lpdwFlagsAndAttributes$[ebp]
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00015	8b 55 14	 mov	 edx, DWORD PTR _lpdwShareMode$[ebp]
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 58   : 
; 59   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002a	83 e1 03	 and	 ecx, 3
  0002d	83 f9 01	 cmp	 ecx, 1
  00030	75 1d		 jne	 SHORT $LN5@win32_tran

; 60   :     {
; 61   :         *lpdwDesiredAccess = GENERIC_READ;

  00032	8b 55 0c	 mov	 edx, DWORD PTR _lpdwDesiredAccess$[ebp]
  00035	c7 02 00 00 00
	80		 mov	 DWORD PTR [edx], -2147483648 ; 80000000H

; 62   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0003b	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  0003e	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 63   :         *lpdwShareMode = FILE_SHARE_READ;

  00044	8b 4d 14	 mov	 ecx, DWORD PTR _lpdwShareMode$[ebp]
  00047	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  0004d	eb 36		 jmp	 SHORT $LN6@win32_tran
$LN5@win32_tran:

; 64   :     }
; 65   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0004f	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  00052	83 e2 04	 and	 edx, 4
  00055	74 14		 je	 SHORT $LN3@win32_tran

; 66   :     {
; 67   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  0005a	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 68   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  00063	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
  00069	eb 1a		 jmp	 SHORT $LN6@win32_tran
$LN3@win32_tran:

; 69   :     }
; 70   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  0006b	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0006e	83 e2 08	 and	 edx, 8
  00071	74 12		 je	 SHORT $LN6@win32_tran

; 71   :     {
; 72   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00073	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00076	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 73   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  0007f	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN6@win32_tran:

; 74   :     }
; 75   : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_win32_translate_open_mode ENDP
PUBLIC	_win32_seek64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
tv65 = -32						; size = 4
_dwErr$79547 = -28					; size = 4
_pos$79544 = -24					; size = 8
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 349  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 350  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 351  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 352  : 
; 353  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek

; 354  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek:

; 355  : 
; 356  :     switch (origin)

  00029	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e0	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e0 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek
  00035	83 7d e0 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek
  0003b	83 7d e0 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 357  :     {
; 358  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 359  :             dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 360  :             break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 361  :         case ZLIB_FILEFUNC_SEEK_END :
; 362  :             dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 363  :             break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 364  :         case ZLIB_FILEFUNC_SEEK_SET :
; 365  :             dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 366  :             break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 367  :         default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 55		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 368  :     }
; 369  : 
; 370  :     if (hFile)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 4c		 je	 SHORT $LN3@win32_seek

; 371  :     {
; 372  :         LARGE_INTEGER pos;
; 373  :         pos.QuadPart = offset;

  00069	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR _pos$79544[ebp], eax
  0006f	8b 4d 14	 mov	 ecx, DWORD PTR _offset$[ebp+4]
  00072	89 4d ec	 mov	 DWORD PTR _pos$79544[ebp+4], ecx

; 374  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  00075	8b 55 f4	 mov	 edx, DWORD PTR _dwMoveMethod$[ebp]
  00078	52		 push	 edx
  00079	6a 00		 push	 0
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _pos$79544[ebp+4]
  0007e	50		 push	 eax
  0007f	8b 4d e8	 mov	 ecx, DWORD PTR _pos$79544[ebp]
  00082	51		 push	 ecx
  00083	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0008c	83 c4 14	 add	 esp, 20			; 00000014H
  0008f	85 c0		 test	 eax, eax
  00091	75 1b		 jne	 SHORT $LN2@win32_seek

; 375  :         {
; 376  :             DWORD dwErr = GetLastError();

  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00099	89 45 e4	 mov	 DWORD PTR _dwErr$79547[ebp], eax

; 377  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0009f	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$79547[ebp]
  000a2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 378  :             ret = -1;

  000a5	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 379  :         }
; 380  :         else

  000ac	eb 07		 jmp	 SHORT $LN3@win32_seek
$LN2@win32_seek:

; 381  :             ret=0;

  000ae	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek:

; 382  :     }
; 383  :     return ret;

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek:

; 384  : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
tv65 = -32						; size = 4
_dwErr$79515 = -28					; size = 4
_pos$79512 = -24					; size = 8
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 311  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 312  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 313  : 
; 314  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 315  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek@2

; 316  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek@2:

; 317  :     switch (origin)

  00029	8b 55 14	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e0	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e0 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek@2
  00035	83 7d e0 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek@2
  0003b	83 7d e0 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek@2
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek@2
$LN7@win32_seek@2:

; 318  :     {
; 319  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 320  :         dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 321  :         break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek@2
$LN6@win32_seek@2:

; 322  :     case ZLIB_FILEFUNC_SEEK_END :
; 323  :         dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 324  :         break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek@2
$LN5@win32_seek@2:

; 325  :     case ZLIB_FILEFUNC_SEEK_SET :
; 326  :         dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 327  :         break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek@2
$LN4@win32_seek@2:

; 328  :     default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 54		 jmp	 SHORT $LN11@win32_seek@2
$LN8@win32_seek@2:

; 329  :     }
; 330  : 
; 331  :     if (hFile != NULL)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 4b		 je	 SHORT $LN3@win32_seek@2

; 332  :     {
; 333  :         LARGE_INTEGER pos;
; 334  :         pos.QuadPart = offset;

  00069	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0006c	33 c9		 xor	 ecx, ecx
  0006e	89 45 e8	 mov	 DWORD PTR _pos$79512[ebp], eax
  00071	89 4d ec	 mov	 DWORD PTR _pos$79512[ebp+4], ecx

; 335  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  00074	8b 55 f4	 mov	 edx, DWORD PTR _dwMoveMethod$[ebp]
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _pos$79512[ebp+4]
  0007d	50		 push	 eax
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR _pos$79512[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
  0008e	85 c0		 test	 eax, eax
  00090	75 1b		 jne	 SHORT $LN2@win32_seek@2

; 336  :         {
; 337  :             DWORD dwErr = GetLastError();

  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00098	89 45 e4	 mov	 DWORD PTR _dwErr$79515[ebp], eax

; 338  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0009e	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$79515[ebp]
  000a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 339  :             ret = -1;

  000a4	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 340  :         }
; 341  :         else

  000ab	eb 07		 jmp	 SHORT $LN3@win32_seek@2
$LN2@win32_seek@2:

; 342  :             ret=0;

  000ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek@2:

; 343  :     }
; 344  :     return ret;

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek@2:

; 345  : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_dwErr$79480 = -28					; size = 4
_pos$79478 = -24					; size = 8
_ret$ = -16						; size = 8
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 286  :     ZPOS64_T ret= (ZPOS64_T)-1;

  00006	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  0000d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 287  :     HANDLE hFile = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 288  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN4@win32_tell

; 289  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell:

; 290  : 
; 291  :     if (hFile)

  00029	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0002d	74 5a		 je	 SHORT $LN3@win32_tell

; 292  :     {
; 293  :         LARGE_INTEGER pos;
; 294  :         pos.QuadPart = 0;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pos$79478[ebp], 0
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pos$79478[ebp+4], 0

; 295  : 
; 296  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  0003d	6a 01		 push	 1
  0003f	8d 55 e8	 lea	 edx, DWORD PTR _pos$79478[ebp]
  00042	52		 push	 edx
  00043	8b 45 ec	 mov	 eax, DWORD PTR _pos$79478[ebp+4]
  00046	50		 push	 eax
  00047	8b 4d e8	 mov	 ecx, DWORD PTR _pos$79478[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00054	83 c4 14	 add	 esp, 20			; 00000014H
  00057	85 c0		 test	 eax, eax
  00059	75 22		 jne	 SHORT $LN2@win32_tell

; 297  :         {
; 298  :             DWORD dwErr = GetLastError();

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00061	89 45 e4	 mov	 DWORD PTR _dwErr$79480[ebp], eax

; 299  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00064	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00067	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$79480[ebp]
  0006a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 300  :             ret = (ZPOS64_T)-1;

  0006d	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  00074	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 301  :         }
; 302  :         else

  0007b	eb 0c		 jmp	 SHORT $LN3@win32_tell
$LN2@win32_tell:

; 303  :             ret=pos.QuadPart;

  0007d	8b 55 e8	 mov	 edx, DWORD PTR _pos$79478[ebp]
  00080	89 55 f0	 mov	 DWORD PTR _ret$[ebp], edx
  00083	8b 45 ec	 mov	 eax, DWORD PTR _pos$79478[ebp+4]
  00086	89 45 f4	 mov	 DWORD PTR _ret$[ebp+4], eax
$LN3@win32_tell:

; 304  :     }
; 305  :     return ret;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _ret$[ebp]
  0008c	8b 55 f4	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 306  : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_dwErr$79460 = -20					; size = 4
_pos$79458 = -16					; size = 8
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 263  :     long ret=-1;

  00006	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 264  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 265  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_tell@2

; 266  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell@2:

; 267  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 4d		 je	 SHORT $LN3@win32_tell@2

; 268  :     {
; 269  :         LARGE_INTEGER pos;
; 270  :         pos.QuadPart = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$79458[ebp], 0
  0002f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pos$79458[ebp+4], 0

; 271  : 
; 272  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00036	6a 01		 push	 1
  00038	8d 55 f0	 lea	 edx, DWORD PTR _pos$79458[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _pos$79458[ebp+4]
  0003f	50		 push	 eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _pos$79458[ebp]
  00043	51		 push	 ecx
  00044	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	75 1b		 jne	 SHORT $LN2@win32_tell@2

; 273  :         {
; 274  :             DWORD dwErr = GetLastError();

  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0005a	89 45 ec	 mov	 DWORD PTR _dwErr$79460[ebp], eax

; 275  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00060	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$79460[ebp]
  00063	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 276  :             ret = -1;

  00066	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 277  :         }
; 278  :         else

  0006d	eb 06		 jmp	 SHORT $LN3@win32_tell@2
$LN2@win32_tell@2:

; 279  :             ret=(long)pos.LowPart;

  0006f	8b 55 f0	 mov	 edx, DWORD PTR _pos$79458[ebp]
  00072	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx
$LN3@win32_tell@2:

; 280  :     }
; 281  :     return ret;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 282  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 171  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 172  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 173  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 174  : 
; 175  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 176  : 
; 177  : #ifdef IOWIN32_USING_WINRT_API
; 178  : #ifdef UNICODE
; 179  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 180  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 181  : #else
; 182  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 183  :     {
; 184  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 185  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 186  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 187  :     }
; 188  : #endif
; 189  : #else
; 190  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open

; 191  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open:

; 192  : #endif
; 193  : 
; 194  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 195  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcW
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 151  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 152  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 153  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 154  : 
; 155  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 156  : 
; 157  : #ifdef IOWIN32_USING_WINRT_API
; 158  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 159  :         hFile = CreateFile2((LPCWSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition,NULL);
; 160  : #else
; 161  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@2
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@2

; 162  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@2:

; 163  : #endif
; 164  : 
; 165  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 166  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcA
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 127  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 128  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 129  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 130  : 
; 131  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 132  : 
; 133  : #ifdef IOWIN32_USING_WINRT_API
; 134  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 135  :     {
; 136  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 137  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 138  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 139  :     }
; 140  : #else
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@3
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@3

; 142  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@3:

; 143  : #endif
; 144  : 
; 145  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 146  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 99   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 100  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 101  : 
; 102  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 103  : 
; 104  : #ifdef IOWIN32_USING_WINRT_API
; 105  : #ifdef UNICODE
; 106  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 107  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 108  : #else
; 109  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 110  :     {
; 111  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 112  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 113  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 114  :     }
; 115  : #endif
; 116  : #else
; 117  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@4
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@4

; 118  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@4:

; 119  : #endif
; 120  : 
; 121  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 122  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_func ENDP
PUBLIC	_fill_win32_filefunc64W
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 454  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 455  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 456  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 457  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 458  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 459  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 460  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 461  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 462  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64A
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 442  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 443  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 444  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 445  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 446  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 447  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 448  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 449  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 429  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 430  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 431  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 432  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 433  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 434  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 435  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 436  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 417  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 418  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 419  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 420  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek_file_func

; 421  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 422  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 423  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 424  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc ENDP
END
