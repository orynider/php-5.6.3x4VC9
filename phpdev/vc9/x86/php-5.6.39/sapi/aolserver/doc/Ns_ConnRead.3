'\"
'\" The contents of this file are subject to the AOLserver Public License
'\" Version 1.1 (the "License"); you may not use this file except in
'\" compliance with the License. You may obtain a copy of the License at
'\" http://aolserver.com/.
'\"
'\" Software distributed under the License is distributed on an "AS IS"
'\" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
'\" the License for the specific language governing rights and limitations
'\" under the License.
'\"
'\" The Original Code is AOLserver Code and related documentation
'\" distributed by AOL.
'\" 
'\" The Initial Developer of the Original Code is America Online,
'\" Inc. Portions created by AOL are Copyright (C) 1999 America Online,
'\" Inc. All Rights Reserved.
'\"
'\" Alternatively, the contents of this file may be used under the terms
'\" of the GNU General Public License (the "GPL"), in which case the
'\" provisions of GPL are applicable instead of those above.  If you wish
'\" to allow use of your version of this file only under the terms of the
'\" GPL and not to allow others to use your version of this file under the
'\" License, indicate your decision by deleting the provisions above and
'\" replace them with the notice and other provisions required by the GPL.
'\" If you do not delete the provisions above, a recipient may use your
'\" version of this file under either the License or the GPL.
'\" 
'\"
'\" $Header: /Users/dossy/Desktop/cvs/aolserver/doc/Ns_ConnRead.3,v 1.7 2006/04/19 17:37:30 jgdavidson Exp $
'\"
'\" 
.so man.macros

.TH Ns_ConnRead 3 4.0 AOLserver "AOLserver Library Procedures"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
Ns_ConnGets, Ns_ConnRead, Ns_ConnFlushHeaders, Ns_ConnReadHeaders, Ns_ConnReadLine \- Routines to copy connection content
.SH SYNOPSIS
.nf
\fB#include "ns.h"\fR
.sp
char *
\fBNs_ConnGets\fR(\fIbuf, bufsize, conn\fR)
.sp
int
\fBNs_ConnFlushContent\fR(\fIconn\fR)
.sp
int
\fBNs_ConnRead\fR(\fIconn, vbuf, toread\fR)
.sp
int
\fBNs_ConnReadHeaders\fR(\fIconn, set, nreadPtr\fR)
.sp
int
\fBNs_ConnReadLine\fR(\fIconn, dsPtr, nreadPtr\fR)
.SH ARGUMENTS
.AS Ns_DString dsPtr in/out
.AP char *buf in
Pointer to string buffer of length \fIbufsize\fR.
.AP int bufsize in
Length of buffer pointer to by \fIbuf\fR.
.AP Ns_Conn conn in
Pointer to open connection.
.AP Ns_DString dsPtr out
Pointer to initialized dstring to receive copied line.
.AP int *nreadPtr out
Pointer to integer to receive number of bytes copied.
.AP Ns_Set set in/out
Pointer to initialized Ns_Set to copy headers.
.AP int toread in
Number of bytes to copy to location starting at \fIvbuf\fR
.AP void *vbuf in
Pointer to memory location to copy content.
.BE

.SH DESCRIPTION
.PP
These routines support copying content from the connection.  They
all operate by copying from the content buffer returned by a call
to \fBNs_ConnContent\fR, maintaining a private, shared offset into
the content.  This means that these routines are not actually reading
directly from the network and thus will not block waiting for input.
See the man page on \fBNs_ConnContent\fR for details on how the
content is pre-read by the server and how resources are managed for
small and large content requests.

.TP
char *\fBNs_ConnGets\fR(\fIbuf, bufsize, conn\fR)
Copies the next available line of text from the content to the given
\fIbuf\fR string, up to the given \fIbufsize\fR less space for a
trailing null (\\0).  The result is a pointer to \fIbuf\fR or NULL
if an underlying call to \fBNs_ConnRead\fR fails.

.TP
int \fBNs_ConnFlushContent\fR(\fIconn\fR)
Performs a logical flush of the underlying content available to
these routines.  It simply moves the private offset to the end of
the content.  The result is NS_OK unless an underlying call to
\fBNs_ConnContent\fR failed in which case NS_ERROR is returned.

.TP
int \fBNs_ConnRead\fR(\fIconn, vbuf, toread\fR)
Copies up to \fItoread\fR bytes from the content to the memory
location pointed to by \fIvbuf\fR.  The result is the number of
bytes copied which will match \fItoread\fR unless less bytes are
available in the input or -1 if an underlying call to \fBNs_ConnContent\fR
failed.

.TP
int \fBNs_ConnReadHeaders\fR(\fIconn, set, nreadPtr\fR)
Copies lines up to the first blank line or end of content up to the
maximum header read size specified with the communication driver
"maxheader" parameter (default: 32k).  Each line is parsed into
"key: value" pairs into the given Ns_Set pointed to be the \fIset\fR
argument using the \fBNs_ParseHeader\fR routine with the
\fINs_HeaderCaseDisposition\fR specified by the "headercase" server
option (default: Preserve).  The result is NS_OK if all lines were
consumed or NS_ERROR on overflow beyond the max header limit or if
there was an error with the underlying call to \fBNs_ConnRead\fR
(including an error of a single line beyond the max line limit as
described below).  The integer pointed to by the \fInreadPtr\fR
argument, if given, is updated with the total number of bytes
consumed.  This routine can be useful when parsing multipart/form-data
content to collect headers for each part.

.TP
int \fBNs_ConnReadLine\fR(\fIconn, dsPtr, nreadPtr\fR)
Copies the next available line to the given \fIdsPtr\fR dstring.
The integer pointed to by \fInreadPtr\fR, if present, is updated
with the number of bytes copied.  The line will not include the
trailing \\r\\n or \\n if present.  The function will return NS_OK
unless an underlying call to \fBNs_ConnContent\fR failed or the
line exceeds the maximum line read size specified by the communication
driver "maxline" parameter (default: 4k).  This routine differs
from \fBNs_ConnGets\fR in that it copies the result to a dstring
instead of a character buffer, requires a full \n or end-of-content
terminated line, and enforces the maxline limit.

.SH "SEE ALSO"
Ns_ConnContent(3), Ns_ParseHeader(3)

.SH KEYWORDS
connection, read, content
