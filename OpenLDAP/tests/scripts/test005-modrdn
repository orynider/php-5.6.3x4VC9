#! /bin/sh
# $OpenLDAP: pkg/ldap/tests/scripts/test005-modrdn,v 1.12.2.5 2000/07/29 01:53:18 kurt Exp $

if test $# -eq 0 ; then
	SRCDIR="."
else
	SRCDIR=$1; shift
fi
if test $# -eq 1 ; then
	BACKEND=$1; shift
fi

echo "running defines.sh $SRCDIR $BACKEND"
. $SRCDIR/scripts/defines.sh

echo "Cleaning up in $DBDIR..."

rm -f $DBDIR/[!C]*

echo "Running slapadd to build slapd database..."
$SLAPADD -f $CONF -l $LDIF
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT..."
$SLAPD -f $CONF -h $MASTERURI -d $LVL $TIMING > $MASTERLOG 2>&1 &
PID=$!
echo "Testing slapd modrdn operations..."

# Make sure we can search the database
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'objectClass=*' > $INITOUT 2>&1
	RC=$?
	if test $RC = 1 ; then
		echo "Waiting 5 seconds for slapd to start..."
		sleep 5
	fi
done

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi

# -r used to do remove of old rdn

echo "Testing modrdn(deleteoldrdn=0)..."
$LDAPMODRDN -D "$MANAGERDN" -h localhost -p $PORT -w $PASSWD > \
	$TESTOUT 2>&1 'cn=James A Jones 1, ou=Alumni Association, ou=People, o=University of Michigan, c=US' 'cn=James A Jones III'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi

echo "Testing modrdn(deleteoldrdn=1)..."
$LDAPMODRDN -D "$MANAGERDN" -r -h localhost -p $PORT -w $PASSWD >> \
	$TESTOUT 2>&1 'cn=James A Jones 2, ou=Information Technology Division, ou=People, o=University of Michigan, c=US' 'cn=James A Jones II'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi

# Ensure the new rdn's can be found

echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones III)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'cn=James A Jones III' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi


LDIF=$MODRDNOUTMASTER1

echo "Filtering ldapsearch results..."
. $SRCDIR/scripts/acfilter.sh < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
. $SRCDIR/scripts/acfilter.sh < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	kill -HUP $PID
	exit 1
fi


echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones II)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'cn=James A Jones II' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi


LDIF=$MODRDNOUTMASTER2

echo "Filtering ldapsearch results..."
. $SRCDIR/scripts/acfilter.sh < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
. $SRCDIR/scripts/acfilter.sh < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	kill -HUP $PID
	exit 1
fi

# Ensure that you cannot find the entry for which the rdn was deleted as
# an attribute.

echo "Using ldapsearch to retrieve entries using removed rdn (cn=James A Jones 2)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'cn=James A Jones 2' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	kill -HUP $PID
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi
$CMP $SEARCHOUT /dev/null > $CMPOUT
if test $? != 0 ; then
	echo "failure: ldapsearch found attribute that was to be removed!"
	kill -HUP $PID
	exit 1
fi

echo "Using ldapsearch to retrieve all the entries..."
$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'objectClass=*' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	kill -HUP $PID
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi

LDIF=$MODRDNOUTMASTER0

echo "Filtering ldapsearch results..."
. $SRCDIR/scripts/acfilter.sh < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
. $SRCDIR/scripts/acfilter.sh < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	kill -HUP $PID
	exit 1
fi


echo "Testing modrdn(deleteoldrdn=1), modrdn with new rdn already an att val..."
$LDAPMODRDN -D "$MANAGERDN" -r -h localhost -p $PORT -w $PASSWD > \
	/dev/null 2>&1 'cn=James A Jones III, ou=Alumni Association, ou=People, o=University of Michigan, c=US' 'cn=James A Jones 1'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi

# Test that you can use modrdn with an attribute value which was previously
# present

echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones 1)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h localhost -p $PORT \
	    'cn=James A Jones 1' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	kill -HUP $PID
	exit $RC
fi


LDIF=$MODRDNOUTMASTER3

echo "Filtering ldapsearch results..."
. $SRCDIR/scripts/acfilter.sh < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
. $SRCDIR/scripts/acfilter.sh < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

kill -HUP $PID
if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	exit 1
fi

echo ">>>>> Test succeeded"



# echo "modrdn test not yet written"

exit 0
