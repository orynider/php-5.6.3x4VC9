.pgaw:Help.f.t insert end "CREATE OPERATOR" {bold} " defines a new operator, name. The user who defines an operator becomes its owner. 

The operator name is a sequence of up to thirty two (32) characters in any combination from the following: 

    + - * / < > = ~ ! @ # % ^ & | ` ? $ : 
	" {} "Note:" {bold} " No alphabetic characters are allowed in an operator name. This enables Postgres to parse SQL input into tokens without requiring spaces between each token. 

The operator \"!=\" is mapped to \"<>\" on input, so they are therefore equivalent. 

At least one of LEFTARG and RIGHTARG must be defined. For binary operators, both should be defined. For right unary operators, only LEFTARG should be defined, while for left unary \
operators only RIGHTARG should be defined. 
Also, the func_name procedure must have been previously defined using CREATE FUNCTION and must be defined to accept the correct number of arguments (either one or two).  \
The commutator operator should be identified if one exists, so that Postgres can reverse the order of the operands if it wishes. For example, the operator area-less-than, <<<, would probably \
have a commutator operator, area-greater-than, >>>. Hence, the query optimizer could freely convert: 

    \"0,0,1,1\"::box  >>> MYBOXES.description
to 
    MYBOXES.description <<< \"0,0,1,1\"::box

This allows the execution code to always use the latter representation and simplifies the query optimizer somewhat. 

Similarly, if there is a negator operator then it should be identified. Suppose that an operator, area-equal, ===, exists, as well as an area not equal, !==. The negator link allows the query \
optimizer to simplify 

    NOT MYBOXES.description === \"0,0,1,1\"::box   
to 
    MYBOXES.description !== \"0,0,1,1\"::box
    
If a commutator operator name is supplied, Postgres searches for it in the catalog. If it is found and it does not yet have a commutator itself, then the commutator's entry is updated to have the \
newly created operator as its commutator. This applies to the negator, as well. 

This is to allow the definition of two operators that are the commutators or the negators of each other. The first operator should be defined without a commutator or negator (as appropriate). \
When the second operator is defined, name the first as the commutator or negator. The first will be updated as a side effect.(As of Postgres 6.5, it also works to just have both operators refer to \
each other.) 

The next three specifications are present to support the query optimizer in performing joins. Postgres can always evaluate a join (i.e., processing a clause with two tuple variables separated by \
an operator that returns a boolean) by iterative substitution \[WONG76\]. In addition, Postgres can use a hash-join algorithm along the lines of \
\[SHAP86\]; however, it must know whether this \
strategy is applicable. The current hash-join algorithm is only correct for operators that represent equality tests; furthermore, equality of the datatype must mean bitwise equality of the \
representation of the type. (For example, a datatype that contains unused bits that don't matter for equality tests could not be hashjoined.) The HASHES flag indicates to the query optimizer \
that a hash join may safely be used with this operator.

Similarly, the two sort operators indicate to the query optimizer whether merge-sort is a usable join strategy and which operators should be used to sort the two operand classes. Sort operators \
should only be provided for an equality operator, and they should refer to less-than operators for the left and right side data types respectively. 

If other join strategies are found to be practical, Postgres will change the optimizer and run-time system to use them and will require additional specification when an operator is defined. \
Fortunately, the research community invents new join strategies infrequently, and the added generality of user-defined join strategies was not felt to be worth the complexity involved. 

The last two pieces of the specification are present so the query optimizer can estimate result sizes. If a clause of the form: 

    MYBOXES.description <<< \"0,0,1,1\"::box

is present in the qualification, then Postgres may have to estimate the fraction of the instances in MYBOXES that satisfy the clause. The function res_proc must be a registered function \
(meaning it is already defined using CREATE FUNCTION) which accepts arguments of the correct data types and returns a floating point number. The query optimizer simply calls this function, \
passing the parameter \"0,0,1,1\" and multiplies the result by the relation size to get the desired expected number of instances. 

Similarly, when the operands of the operator both contain instance variables, the query optimizer must estimate the size of the resulting join. The function join_proc will return another floating \
point number which will be multiplied by the cardinalities of the two classes involved to compute the desired expected result size. 

The difference between the function 

    my_procedure_1 (MYBOXES.description, \"0,0,1,1\"::box)
   
and the operator 

    MYBOXES.description === \"0,0,1,1\"::box
   
is that Postgres attempts to optimize operators and can decide to use an index to restrict the search space when operators are involved. However, there is no attempt to optimize functions, and \
they are performed by brute force. Moreover, functions can have any number of arguments while operators are restricted to one or two. 

" {} "Synopsis" {bold} "

CREATE OPERATOR name (
        PROCEDURE  = func_name
     \[, LEFTARG    = type1 \]
     \[, RIGHTARG   = type2 \]
     \[, COMMUTATOR = com_op \]
     \[, NEGATOR    = neg_op \]
     \[, RESTRICT   = res_proc \]
     \[, JOIN       = join_proc \]
     \[, HASHES \]
     \[, SORT1      = left_sort_op \]
     \[, SORT2      = right_sort_op \]
    )

" {code} "Inputs" {bold} "

" {} "name" {italic} "
       The operator to be defined. See below for allowable characters. 

" {} "func_name" {italic} "
       The function used to implement this operator. 

" {} "type1" {italic} "
       The type for the left-hand side of the operator, if any. This option would be omitted for a right-unary operator. 

" {} "type2" {italic} "
       The type for the right-hand side of the operator, if any. This option would be omitted for a left-unary operator. 

" {} "com_op" {italic} "
       The commutator for this operator. 

" {} "neg_op" {italic} "
       The negator of this operator. 

" {} "res_proc" {italic} "
       The restriction selectivity estimator function for this operator. 

" {} "join_proc" {italic} "
       The join selectivity estimator function for this operator. 

" {} "HASHES" {italic} "
       Indicates this operator can support a hash-join algorithm. 

" {} "left_sort_op" {italic} "
       Operator that sorts the left-hand data type of this operator. 

" {} "right_sort_op" {italic} "
       Operator that sorts the right-hand data type of this operator. 
       
" {} "Outputs" {bold} "

" {} "CREATE" {italic} "
       Message returned if the operator is successfully created. 

" {} "Usage" {bold} "

The following command defines a new operator, area-equality, for the BOX data type. 
" {} "
   CREATE OPERATOR === (
   LEFTARG = box,
   RIGHTARG = box,
   PROCEDURE = area_equal_procedure,
   COMMUTATOR = ===,
   NEGATOR = !==,
   RESTRICT = area_restriction_procedure,
   JOIN = area_join_procedure,
   HASHES,
   SORT1 = <<<,
   SORT2 = <<<)

" {code} "Notes" {bold} "

Refer to the chapter on operators in the PostgreSQL User's Guide for further information. Refer to DROP OPERATOR to delete user-defined operators from a database.
"
