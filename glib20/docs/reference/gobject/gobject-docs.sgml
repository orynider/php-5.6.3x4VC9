<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!entity gobject-GType SYSTEM "sgml/gtype.sgml">
<!entity gobject-GTypePlugin SYSTEM "sgml/gtypeplugin.sgml">
<!entity gobject-GTypeModule SYSTEM "sgml/gtypemodule.sgml">
<!entity gobject-The-Base-Object-Type SYSTEM "sgml/objects.sgml">
<!entity gobject-Enumeration-and-Flag-Types SYSTEM "sgml/enumerations_flags.sgml">
<!entity gobject-Boxed-Types SYSTEM "sgml/gboxed.sgml">
<!entity gobject-Generic-values SYSTEM "sgml/generic_values.sgml">
<!entity gobject-param-value-types SYSTEM "sgml/param_value_types.sgml">
<!entity gobject-GParamSpec SYSTEM "sgml/gparamspec.sgml">
<!entity gobject-Varargs-Value-Collection SYSTEM "sgml/value_collection.sgml">
<!entity gobject-Signals SYSTEM "sgml/signals.sgml">
<!entity gobject-Closures SYSTEM "sgml/gclosure.sgml">
<!entity gobject-Value-Arrays SYSTEM "sgml/value_arrays.sgml">
]>
<book id="index">
  <bookinfo>
    <title>GObject Reference Manual</title>
  </bookinfo>

  <preface>
    <title>Introduction</title>
      <para>
	Most modern programming languages come with their own native object
	systems and additional fundamental algorithmic language constructs.
	Just as GLib serves as an implementation of such fundamental
	types and algorithms (linked lists, hash tables and so forth), the
	GLib Object System provides the required implementations of a
	flexible extensible and intentionally easy to map (into other
	languages) object oriented framework for C.
	The substantial elements that are provided can be summarized as:
	<variablelist>
	  <varlistentry><term></term><listitem><para>
	    * A generic type system to register arbitrary single-inherited
	      flat and deep derived types as well as interfaces for
	      structured types.
	      It takes care of creation, initialization and memory management
	      of the assorted object and class structures, maintains
	      parent/child relationships and deals with dynamic implementations
	      of such types. That is, their type specific implementations are
	      relocatable/unloadable during runtime.
	  </para></listitem></varlistentry>
	  <varlistentry><term></term><listitem><para>
	    * A collection of fundamental type implementations, such as integers,
	      doubles, enums and structured types, to name a few.
	  </para></listitem></varlistentry>
	  <varlistentry><term></term><listitem><para>
	    * A sample fundamental type implementation to base object hierarchies
	      upon - the GObject fundamental type.
	  </para></listitem></varlistentry>
	  <varlistentry><term></term><listitem><para>
	    * A signal system that allows very flexible user customization of
	      virtual/overridable object methods and can serve as a powerful
	      notification mechanism.
	  </para></listitem></varlistentry>
	  <varlistentry><term></term><listitem><para>
	    * An extensible parameter/value system, supporting all the provided
	      fundamental types that can be used to generically handle object
	      properties or otherwise parameterized types.
	  </para></listitem></varlistentry>
	</variablelist>
      </para>
  </preface>

  <reference>
    <title>API Reference</title>
    
      &gobject-GType;
      &gobject-GTypePlugin;
      &gobject-GTypeModule;
      &gobject-The-Base-Object-Type;
      &gobject-Enumeration-and-Flag-Types;
      &gobject-Boxed-Types;
      &gobject-Generic-values;
      &gobject-param-value-types;
      &gobject-Varargs-Value-Collection;
      &gobject-GParamSpec;
      &gobject-Signals;
      &gobject-Closures;
      &gobject-Value-Arrays;
      
  </reference>
  
</book>
